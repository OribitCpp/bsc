#include "raw_table.hbs"

safe size_t one_less_than_next_power_of_two(size_t num);

// Returns the maximum effective capacity for the given bucket mask, taking
// the maximum load factor into account.
safe size_t bucket_mask_to_capacity(size_t bucket_mask) {
    if (bucket_mask < 8) {
        // For tables with 1/2/4/8 buckets, we always reserve one empty slot.
        // Keep in mind that the bucket mask is one less than the bucket count.
        return bucket_mask;
    } else {
        // For larger tables we reserve 12.5% of the slots as empty.
        return ((bucket_mask + 1) / 8) * 7;
    }
}

// Returns the number of buckets needed to hold the given number of items,
// taking the maximum load factor into account.
//
// The function aborts if an overflow occurs.
safe size_t capacity_to_buckets(size_t cap) {
    if (cap < 8) {
        unsafe {
            return cap < 4 ? 4 : 8;
        }
    }

    if (cap > SIZE_MAX / 8) {
        unsafe {
            bsc_overflow_handler();
        }
    }
    size_t adjusted_cap = cap * 8 / 7;

    return one_less_than_next_power_of_two(adjusted_cap) + 1;
}

// Returns a `_Bool` indicating whether the byte is `EMPTY`.
safe _Bool match_empty(uint8_t group) {
    // If the high bit is set, then the byte must be either:
    // 1111_1111 (EMPTY) or 1000_0000 (DELETED).
    // So we can just check if the top two bits are 1 by ANDing them.
    unsafe {
        return group & (group << 1) & 0x80;
    }
}

// Returns one less than next power of two.
safe size_t one_less_than_next_power_of_two(size_t num) {
    if (num <= 1) {
        return 0;
    }
    size_t p = num - 1;
    unsafe {
        int z = __builtin_clzll(p);

        return SIZE_MAX >> z;
    }
}

// Moves to the next position.
void ProbeSeq::move_next(ProbeSeq* borrow this, size_t bucket_mask) {
    this->count += 1;
    this->pos += this->stride;
    this->pos &= bucket_mask;
}
