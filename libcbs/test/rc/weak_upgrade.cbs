// Always enable asserts.
#ifdef NDEBUG
#undef NDEBUG
#endif

#include "rc.hbs"
#include "assert.h"

owned struct A {
public:
    int *owned p;
    ~A(A this) {
        free((void*)this.p);
    }
};

void weak_upgrade() {
    int *owned p = (int *owned)(void *owned)malloc(sizeof(int));
    *p = 5;
    A a = { .p = p };

    Rc<A> rc1 = Rc<A>::new(a);
    Weak<A> weak1 = Weak<A>::new(&const rc1);
    assert(rc1.strong_ref_count() == 1);
    assert(rc1.weak_ref_count() == 1);
    assert(weak1.strong_ref_count() == 1);
    assert(weak1.weak_ref_count() == 1);
    Option<Rc<A>> option_rc2 = weak1.upgrade();
    if (option_rc2.is_some()) {
        Rc<A> rc2 = option_unwrap<Rc<A>>(option_rc2);
        assert(rc1.strong_ref_count() == 2);
        assert(rc1.weak_ref_count() == 1);
        assert(weak1.strong_ref_count() == 2);
        assert(weak1.weak_ref_count() == 1);
        assert(rc2.strong_ref_count() == 2);
        assert(rc2.weak_ref_count() == 1);
    }
    assert(rc1.strong_ref_count() == 1);
    assert(rc1.weak_ref_count() == 1);
    assert(weak1.strong_ref_count() == 1);
    assert(weak1.weak_ref_count() == 1);
}

int main() {
    weak_upgrade();
    return 0;
}
