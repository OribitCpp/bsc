/*===--- bsc_type_traits.hbs - Standard header for type trait functions ---===*\
 *
 * Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
 * See https://llvm.org/LICENSE.txt for license information.
 * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 *
\*===----------------------------------------------------------------------===*/

// Define BSC type trait functions
#ifndef BSC_TYPE_TRAITS_HBS
#define BSC_TYPE_TRAITS_HBS
#include <stdbool.h>
#include <stddef.h>

// Unary Type Traits
constexpr bool is_integral<T>() {
    return __is_integral(T);
}

constexpr bool is_floating_point<T>() {
    return __is_floating_point(T);
}

constexpr bool is_signed<T>() {
    return __is_signed(T);
}

constexpr bool is_unsigned<T>() {
    return __is_unsigned(T);
}

constexpr bool is_pointer<T>() {
    return __is_pointer(T);
}

constexpr bool is_function<T>() {
    return __is_function(T);
}

constexpr bool is_array<T>() {
    return __is_array(T);
}

constexpr bool is_struct<T>() {
    return __is_struct(T);
}

constexpr bool is_union<T>() {
    return __is_union(T);
}

constexpr bool is_enum<T>() {
    return __is_enum(T);
}

constexpr bool is_const<T>() {
    return __is_const(T);
}

constexpr bool is_volatile<T>() {
    return __is_volatile(T);
}

constexpr bool is_move_semantic<T>() {
    return __is_move_semantic(T);
}

constexpr bool is_owned_pointer<T>() {
    return __is_owned_pointer(T);
}

constexpr bool is_owned_struct<T>() {
    return __is_owned_struct(T);
}

constexpr bool is_void<T>() {
    return __is_void(T);
}

// Binary Type Traits
constexpr bool is_same<T1, T2>() {
    return __is_same(T1, T2);
}

constexpr bool is_convertible<From, To>() {
    return __is_convertible(From, To);
}

// Array Type Traits
constexpr size_t rank<T>() {
    return __array_rank(T);
}

constexpr size_t extent<T, size_t N>() {
    return __array_extent(T, N);
}
#endif /* BSC_TYPE_TRAITS_HBS */



