// RUN: %clang_cc1 -verify %s

struct Foo {
  int a;
};

T* owned safe_malloc<T>(T value);
void free_owned<T>(T* owned p);

safe int struct Foo::getA(This this) {
  return this.a;
}

safe int struct Foo::getB(This* this) { // expected-error {{unsafe parameter type is forbidden in the safe function}}
  return this->a; // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
}

safe int struct Foo::getB_2(const This* this) { // expected-error {{unsafe parameter type is forbidden in the safe function}}
  return this->a; // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
}

safe int struct Foo::getC(This* borrow this) {
  this->a = 2;
  return this->a;
}

safe int struct Foo::getC_2(const This* borrow this) {
  return this->a;
}

safe void struct Foo::getD(This* owned this) {
  free_owned<struct Foo>(this);
}

safe void test_This_actual_param(void) {
  struct Foo foo = {.a = 1};
  int s_a = foo.getA();  // expect ok, run ok
  int s_b = foo.getB();  // expect error, function getB is error
  int s_b2 = foo.getB_2(); // expect error, function getB_2 is error
  int s_c = foo.getC();  // expect ok, run ok
  int s_c2 = foo.getC_2();  // expect ok, run ok
  foo.getD();  // expected-error {{incompatible conversion from non owned type 'struct Foo' to owned type 'struct Foo *owned' in member function call}}
}

void test_This_pointer_actual_param() {
  struct Foo foo = {.a = 1};
  struct Foo * foo_p = &foo;
  safe {
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_a = foo_p->getA(); // expected-error {{incompatible conversion from pointer type 'struct Foo *' to non-pointer type 'struct Foo' in member function call}}
    int s_b = foo_p->getB(); // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_b2 = foo_p->getB_2(); // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_c = foo_p->getC(); // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_c2 = foo_p->getC_2();  // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    foo_p->getD();  // expected-error {{incompatible conversion from non owned type 'struct Foo *' to owned type 'struct Foo *owned' in member function call}}
  }
}

void test_const_This_pointer_actual_param() {
  struct Foo foo = {.a = 1};
  const struct Foo * c_foo_p = &foo;
  safe {
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_a = c_foo_p->getA();  // expected-error {{incompatible conversion from pointer type 'const struct Foo *' to non-pointer type 'struct Foo' in member function call}}
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_b = c_foo_p->getB(); // expected-error {{incompatible conversion from const type 'const struct Foo *' to non-const type 'struct Foo *' in member function call}}
    int s_b2 = c_foo_p->getB_2(); // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_c = c_foo_p->getC();  // expected-error {{incompatible conversion from const type 'const struct Foo *' to non-const type 'struct Foo *borrow' in member function call}}
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    int s_c2 = c_foo_p->getC_2();  // expect error, run error
    // expected-error@+1 {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    c_foo_p->getD();  // expected-error {{incompatible conversion from non owned type 'const struct Foo *' to owned type 'struct Foo *owned' in member function call}}
  }
}

safe void test_This_pointer_borrow_actual_param(void) {
  struct Foo foo = {.a = 1};
  struct Foo * borrow foo_mut = &mut foo;
  int s_a = foo_mut->getA();  // expected-error {{incompatible conversion from pointer type 'struct Foo *borrow' to non-pointer type 'struct Foo' in member function call}}
  int s_b = foo_mut->getB();  // expect error, function getB is error
  int s_b2 = foo_mut->getB_2(); // expect error, function getB_2 is error
  int s_c = foo_mut->getC();  // expect ok, run ok
  int s_c2 = foo_mut->getC_2();  // expect ok, run ok
  foo_mut->getD();  // expected-error {{incompatible conversion from non owned type 'struct Foo *borrow' to owned type 'struct Foo *owned' in member function call}}
}

safe void test_const_This_pointer_borrow_actual_param(void) {
  struct Foo foo = {.a = 1};
  const struct Foo *borrow c_foo_mut = &const foo; // incompatible borrow types, cannot cast 'const struct Foo *borrow'
  int a = c_foo_mut->getA();  // expected-error {{incompatible conversion from pointer type 'const struct Foo *borrow' to non-pointer type 'struct Foo' in member function call}}
  int b = c_foo_mut->getB();  // expected-error {{incompatible conversion from const type 'const struct Foo *borrow' to non-const type 'struct Foo *' in member function call}}
  int b2 = c_foo_mut->getB_2(); // expect error, function getB_2 is error
  int c = c_foo_mut->getC();  // expected-error {{incompatible conversion from const type 'const struct Foo *borrow' to non-const type 'struct Foo *borrow' in member function call}}
  int c2 = c_foo_mut->getC_2();  // expect ok, run ok
  c_foo_mut->getD();  // expected-error {{incompatible conversion from non owned type 'const struct Foo *borrow' to owned type 'struct Foo *owned' in member function call}}
}

safe void test_This_pointer_owned_actual_param(void) {
  struct Foo foo = {.a = 1};
  struct Foo * owned foo_owned = safe_malloc<struct Foo>(foo);
  int s_a = foo_owned->getA();  // expected-error {{incompatible conversion from pointer type 'struct Foo *owned' to non-pointer type 'struct Foo' in member function call}}
  int s_b = foo_owned->getB(); // expect error, function getB is error
  int s_b2 = foo_owned->getB_2(); // expect error, function getB_2 is error
  int s_c = foo_owned->getC();  // expect ok, run ok
  int s_c2 = foo_owned->getC_2();  // expect ok, run ok
  foo_owned->getD();  // expect ok, run ok
}
