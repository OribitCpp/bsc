// RUN: %clang_cc1 -verify %s

struct M {
    int *owned _Nullable a;
};

struct N {
    struct M *borrow _Nullable b;
};

safe void test1(void) {
    struct N n1 = { .b = nullptr };
    if (n1.b->a != nullptr)   // expected-error {{cannot access member through nullable pointer}}
        *n1.b->a = 10;  // expected-error {{cannot access member through nullable pointer}}
    struct M m = { .a = nullptr };
    struct N n2 = { .b = &mut m };
    if (n2.b->a != nullptr)
        *n2.b->a = 10;
}

safe void test2(void) {
    struct N n1 = { .b = nullptr };
    if (n1.b != nullptr && n1.b->a != nullptr)
        *n1.b->a = 10;
}

safe void test3(void) {
    struct N n1 = { .b = nullptr };
    if (n1.b->a != nullptr && n1.b != nullptr)  // expected-error {{cannot access member through nullable pointer}}
        *n1.b->a = 10;
}

safe void test4(void) {
    struct N n1 = { .b = nullptr };
    if (n1.b != nullptr)
        if (n1.b->a != nullptr)
            *n1.b->a = 10;
}

safe void safe_free (struct N *owned _Nullable p);
safe struct N *owned _Nullable safe_malloc(struct N n);

safe void test5(void) {
    struct N n = { .b = nullptr };
    struct N *owned _Nullable p = safe_malloc(n);
    if (p->b->a != nullptr)   // expected-error {{cannot access member through nullable pointer}}
        *p->b->a = 10;  // expected-error {{cannot access member through nullable pointer}}
    safe_free(p);
}

safe void test6(void) {
    struct N n = { .b = nullptr };
    struct N *owned _Nullable p = safe_malloc(n);
    if (p->b != nullptr && p->b->a != nullptr)  // expected-error {{cannot access member through nullable pointer}} expected-error {{cannot access member through nullable pointer}}
        *p->b->a = 10; // expected-error {{cannot access member through nullable pointer}}
    safe_free(p);
}


safe void test7(void) {
    struct N n = { .b = nullptr };
    struct N *owned _Nullable p = safe_malloc(n);
    if (p != nullptr) {
        if (p->b != nullptr)
            if (p->b->a != nullptr) 
                *p->b->a = 10;
        safe_free(p);
    }
}

safe void test8(void) {
    struct N n = { .b = nullptr };
    struct N *owned _Nullable p = safe_malloc(n);
    if (p != nullptr && p->b != nullptr && p->b->a != nullptr)
        *p->b->a = 10;
    safe_free(p);
}

safe void test9(void) {
    struct N n = { .b = nullptr };
    struct N *owned _Nullable p = safe_malloc(n);
    if (p != nullptr && p->b != nullptr)
        if (p->b->a != nullptr) 
            *p->b->a = 10;
    safe_free(p);
}
