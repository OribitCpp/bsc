// RUN: %clang_cc1 -verify %s

safe int *borrow foo1(int *borrow a);
safe void test1(void) {
    int a = 10;
    int *borrow p1 = foo1(&mut a);
    int *borrow _Nullable p2 = foo1(&mut a);
}

safe void safe_free(int *owned _Nullable p);

safe int *owned foo2(void);
safe void test2(void) {
    int *owned p1 = foo2();
    int *owned _Nullable p2 = foo2();
    safe_free(p1);
    safe_free(p2);
}

safe int *borrow _Nullable foo3(int* borrow a);  
safe void test3(void) {
    int a = 10;
    int *borrow p1 = foo3(&mut a);  // expected-error {{nonnull pointer cannot be assigned by nullable pointer}}
    int *borrow _Nullable p2 = foo3(&mut a);
}

safe int *owned _Nullable foo4(void);  
safe void test4(void) {
    int *owned p1 = foo4();  // expected-error {{nonnull pointer cannot be assigned by nullable pointer}}
    int *owned _Nullable p2 = foo4();
    safe_free(p1);
    safe_free(p2);
}

safe int *borrow foo5(int *borrow _Nullable a) {
    return a;  // expected-error {{cannot return nullable pointer type}}
}

safe int *borrow foo6(int *borrow _Nullable a, int* borrow p) {
    a = p;
    return a;
}

safe int *borrow foo7(int *borrow _Nullable a, int* borrow p) {
    return foo6(a, p);
}