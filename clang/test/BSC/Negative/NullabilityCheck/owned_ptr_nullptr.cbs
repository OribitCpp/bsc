// RUN: %clang_cc1 -verify %s

safe T *owned safe_malloc<T>(T t);
safe void safe_free(void *owned p);

safe void test1(void) {
    int *owned _Nullable p = nullptr;
    int cond = 1;
    if (cond) {
        p = safe_malloc<int>(10);
        *p = 10;
    }
    safe_free((void *owned)p); // expected-error {{cannot cast nullable pointer to nonnull type}}
}

safe void test2(void) {
    int *owned _Nullable p = nullptr;
    int cond = 1;
    if (cond) {
        p = safe_malloc<int>(10);
        *p = 10;
    }
    p = nullptr; // expected-error {{assign to owned value: `p`}}
}

safe int *owned _Nullable get_owned(int cond) {
    int *owned _Nullable p = nullptr;
    if (cond) {
        p = safe_malloc<int>(10);
    }
    return p;
}
safe void test3(void) {
    int *owned _Nullable p = get_owned(5);
    if (p != nullptr) {
        *p = 10;
    }
    safe_free((void *owned)p); // expected-error {{cannot cast nullable pointer to nonnull type}}
}