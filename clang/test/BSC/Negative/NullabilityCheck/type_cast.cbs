// RUN: %clang_cc1 -nullability-check=all -verify %s

safe int *borrow return_and_take_nonnull(int *borrow a) {
    unsafe {
        int *borrow _Nullable p = nullptr;
        return (int *borrow)p;  // expected-error {{cannot cast nullable pointer to nonnull type}}
    }
}

safe void test1(void) {
    unsafe {
        int a = 10;
        int *borrow _Nullable p = &mut a;
        return_and_take_nonnull((int *borrow)p);
        int *borrow k1 = (int *borrow)p;
        p = nullptr;
        return_and_take_nonnull((int *borrow)p); // expected-error {{cannot cast nullable pointer to nonnull type}}
        int *borrow k2 = (int *borrow)p;  // expected-error {{cannot cast nullable pointer to nonnull type}}
    }
}

void *get_nullable();
void free_nonnull(int *_Nonnull p);
safe void test2(void) {
    unsafe {
        int *_Nonnull p1 = (int *_Nonnull)get_nullable(); // expected-error {{cannot cast nullable pointer to nonnull type}}

        int *p = get_nullable();  //implicit cast void* to int*
        *p = 10;   // expected-error {{nullable pointer cannot be dereferenced}}
        if (p != nullptr) {
            *p = 20;
        }
        free_nonnull((int *_Nonnull)p); // expected-error {{cannot cast nullable pointer to nonnull type}}
    }
}