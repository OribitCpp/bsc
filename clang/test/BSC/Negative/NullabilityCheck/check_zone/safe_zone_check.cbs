// RUN: %clang_cc1 -verify %s

safe void check_dereferenced_test1(void) {
  int *borrow _Nullable p = nullptr;
  {
    *p = 10; // expected-error {{nullable pointer cannot be dereferenced}}
    unsafe {
      int a = 2;
      *p = a;
    }
  }
  *p = 5; // expected-error {{nullable pointer cannot be dereferenced}}
}
void check_dereferenced_test2() {
  int *borrow _Nullable p = nullptr;
  if (p != nullptr) {
    *p = 5;
  }
  *p = 10;
}

void check_dereferenced_test3() {
  safe {
    int *borrow _Nullable p = nullptr;
    unsafe {
      *p = 5;
      safe {
        if (p != nullptr) {
          *p = 10;
        }
        *p = 15; // expected-error {{nullable pointer cannot be dereferenced}}
      }
    }
    *p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
  }
}

safe void check_assigned_test(void) {
  int *borrow p = nullptr; // expected-error {{nonnull pointer cannot be assigned by nullable pointer}}
  unsafe {
    int *borrow p2 = nullptr;
  }
}

safe int* borrow _Nonnull check_returned_test(int *borrow _Nonnull ptr ) {
  int *borrow _Nullable p = nullptr;
  return p; // expected-error {{cannot return nullable pointer type}}
}

safe void check_param_pass_test(int *borrow ptr) {
  int *borrow _Nullable p = nullptr;
  int *borrow p2 = check_returned_test(p); // expected-error {{cannot pass nullable pointer argument}}
  unsafe {
    int *borrow p3 = check_returned_test(p);
  }
}
