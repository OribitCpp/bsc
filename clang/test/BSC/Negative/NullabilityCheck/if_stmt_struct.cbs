// RUN: %clang_cc1 -verify %s

struct S {
    int *borrow _Nullable p;
};

safe void test1(void) {
    struct S s = { .p = nullptr };
    if (s.p != nullptr) {
        *s.p = 10;
    } else {
        *s.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test2(void) {
    int a = 10;
    struct S s = { .p = nullptr };
    if (s.p != nullptr) {
        *s.p = 10;
    } else {
        s.p = &mut a;
    }
    *s.p = 30;
}

safe void test3(void) {
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr) {
        *s1.p = 10;
        *s2.p = 10;
    } else {
        *s1.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test4(void) {
    int a = 10;
    int b = 10;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr) {
        *s1.p = 10;
        *s2.p = 10;
    } else {
        s1.p = &mut a;
        s2.p = &mut b;
    }
    *s1.p = 30;
    *s2.p = 30;
}

safe void test5(void) {
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr || s2.p != nullptr) {
        *s1.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
    } else {
        *s1.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test6(void) {
    int a = 10;
    int b = 10;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr) {
        *s1.p = 10;
        if (s2.p != nullptr)
          *s2.p = 10;
        else
          s2.p = &mut b;
    } else {
        s1.p = &mut a;
        if (s2.p != nullptr)
          *s2.p = 10;
        else
          s2.p = &mut b;
    }
    *s1.p = 30;
    *s2.p = 30;
}

safe void test7(void) {
    int a = 10;
    int b = 10;
    int c = 10;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    struct S s3 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr && s3.p != nullptr) {
        *s1.p = 10;
        *s2.p = 10;
        *s3.p = 10;
    } else {
        s1.p = &mut a;
        s2.p = &mut b;
        s3.p = &mut c;
    }
    *s1.p = 30;
    *s2.p = 30;
    *s3.p = 30;
}

safe void test8(void) {
    int a = 10;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    struct S s3 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr && s3.p != nullptr) {
        *s1.p = 10;
        *s2.p = 10;
        *s3.p = 10;
    } else {
        *s1.p = 20;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 20;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s3.p = 20;  // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
    *s3.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test9(void) {
    int a = 10;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    struct S s3 = { .p = nullptr };
    if (s1.p != nullptr || s2.p != nullptr || s3.p != nullptr) {
        *s1.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s3.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
    } else {
        *s1.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s3.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
    *s3.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test10(void) {
    int a = 0;
    struct S s = { .p = nullptr };
    if (s.p != nullptr) {
        *s.p = 10;
        s.p = nullptr;
    } else {
        s.p = &mut a;
    }
    *s.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test11(void) {
    int a = 0;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr || a > 0) {
        *s1.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 10;  // expected-error {{nullable pointer cannot be dereferenced}}
    } else {
        *s1.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test12(void) {
    int a = 0;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr && a > 0) {
        *s1.p = 10;
        *s2.p = 10;
    } else {
        *s1.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test13(void) {
    int a = 10;
    int b = 10;
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p != nullptr && s2.p != nullptr && a > 0) {
        *s1.p = 10;
        *s2.p = 10;
    } else {
        s1.p = &mut a;
        s2.p = &mut b;
    }
    *s1.p = 30;
    *s2.p = 30;
}

safe void test14(void) {
    struct S s = { .p = nullptr };
    if (s.p) {
        *s.p = 10;
    } else {
        *s.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test15(void) {
    struct S s = { .p = nullptr };
    if (!s.p) {
        *s.p = 10; // expected-error {{nullable pointer cannot be dereferenced}}
    } else {
        *s.p = 20;
    }
    *s.p = 30;  // expected-error {{nullable pointer cannot be dereferenced}}
}

safe void test16(void) {
    struct S s1 = { .p = nullptr };
    struct S s2 = { .p = nullptr };
    if (s1.p && s2.p) {
        *s1.p = 10;
        *s2.p = 10;
    } else {
        *s1.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
        *s2.p = 20; // expected-error {{nullable pointer cannot be dereferenced}}
    }
    *s1.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
    *s2.p = 30; // expected-error {{nullable pointer cannot be dereferenced}}
}