// RUN: %clang_cc1 -fsyntax-only -verify %s

struct A {
    int a;
};

__attribute__((operator +))
int add(struct A a1, struct A a2) {
    return a1.a + a2.a;
}

int test1() {
    struct A a1 = {1};
    struct A a2 = {2};
    safe {
        int b = a1 + a2;     // expected-error {{overload unsafe function is forbidden in the safe zone}}
    }
    return 0;
}

struct B {
    int a;
};

struct C {
    struct B b;
};

__attribute__((operator ->))
struct B * arrow(struct C *c) {
    return &(c->b);
}

int test2() {
    struct B b1 = {1};
    struct C c1 = {b1};
    safe {
        int m = c1->a;      // expected-error {{overload unsafe function is forbidden in the safe zone}}
    }
    return 0;
}

struct D {
    int b[10];
};

__attribute__((operator []))
int* subscript(struct D *d, int i) {
    return &d->b[i];
}

int test3() {
    struct D d = {{1,2,3}};
    safe {
        int m = d[1];       // expected-error {{overload unsafe function is forbidden in the safe zone}}
    }
    return 0;
}

struct G {
    int a;
};

struct H {
    struct G g;
    int b;
};

__attribute__((operator *))
int * borrow deref2(struct H * borrow h) {
    return &mut(h->g.a);
}

int test4() {
    struct G g1 = {1};
    struct H h1 = {g1, 11};
    safe {
        int t2 = *h1;           // expected-error {{overload unsafe function is forbidden in the safe zone}}
    }

    return 0;
}
