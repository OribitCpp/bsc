// RUN: %clang_cc1 -fsyntax-only -verify %s

// same name with ordinary function, different parameter
struct F
{
    int a;
};

__attribute__((operator +))
int operator_add_1(struct F f1, struct F f2 ){  // expected-note{{previous definition is here}}
    return f1.a + f2.a;
}

int operator_add_1(struct F f1, int f){         // expected-error {{conflicting types for 'operator_add_1'}}
    return f1.a + f;
}

int operator_add_2(struct F f1, int f){         // expected-note{{previous definition is here}}
    return f1.a + f;
}

__attribute__((operator +))
int operator_add_2(int a, struct F f2 ){        // expected-error {{conflicting types for 'operator_add_2'}}
    return a + f2.a;
}

// same name and parameter with ordinary function
struct E
{
    int a;
};

__attribute__((operator +))
int operator_add_3(struct E f1, struct E f2 ){      // expected-note{{previous definition is here}}
    return f1.a + f2.a;
}

int operator_add_3(struct E f1, struct E f2 ){      // expected-error {{conflicting types for 'operator_add_3'}}
    return f1.a + f2.a;
}

struct G
{
    int a;
};

int operator_add_4(struct G f1, struct G f2 ){      // expected-note{{previous definition is here}}
    return f1.a + f2.a;
}

__attribute__((operator +))
int operator_add_4(struct G f1, struct G f2 ){      // expected-error {{conflicting types for 'operator_add_4'}}
    return f1.a + f2.a;
}

// same name with overload function, different parameter
struct M
{
    int a;
};

__attribute__((operator +))
int operator_add_5(struct M f1, struct M f2 ){      // expected-note{{previous definition is here}}
    return f1.a + f2.a;
}

__attribute__((operator +))
int operator_add_5(struct M f1, int f){             // expected-error {{conflicting types for 'operator_add_5'}}
    return f1.a + f;
}

// same name and parameter with overload function
struct H
{
    int a;
};
__attribute__((operator +))
int operator_add_6(struct H f1, struct H f2 ){          // expected-note{{previous definition is here}}
    return f1.a + f2.a;
}

__attribute__((operator +))
int operator_add_6(struct H f1, struct H f2 ){          // expected-error {{redefinition of 'operator_add_6'}}
    return f1.a + f2.a;
}

// same parameter with overload function, different name
struct K
{
    int a;
};
__attribute__((operator +))
int operator_add_7(struct K f1, struct K f2 ){              // expected-note{{candidate function}}
    return f1.a + f2.a;
}

__attribute__((operator +))
int operator_add_8(struct K f1, struct K f2 ){              // expected-note{{candidate function}}
    return f1.a + f2.a;
}

int main() {
    struct K k1 = {1};
    struct K k2 = {2};
    return k1 + k2;                                   // expected-error{{use of overloaded operator '+' is ambiguous (with operand types 'struct K' and 'struct K')}}
}