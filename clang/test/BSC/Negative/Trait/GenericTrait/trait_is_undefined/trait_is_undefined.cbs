// RUN: %clang_cc1 -fsyntax-only -verify %s

trait F<T> {
  T foo(This* this);
};

int int::foo(int* this) {
  return 0;
}

impl trait F<int> for int;

struct S{
  trait F<int>* f;
  trait T<int>* t; // expected-error {{explicit specialization of undeclared template trait 'T'}}
// expected-error@-1 {{'trait T' must be defined before it can be used}}
};

trait T<int>* test(){ // expected-error {{explicit specialization of undeclared template trait 'T'}}
// expected-error@-1 {{'trait T' must be defined before it can be used}}
  int a = 1;
  trait T<int>* t = &a; // expected-error {{explicit specialization of undeclared template trait 'T'}}
// expected-warning@-1 {{incompatible pointer types initializing 'trait T *' with an expression of type 'int *'}}

  trait T<int>* t2 = ((trait T<int>*)&a); // expected-error {{explicit specialization of undeclared template trait 'T'}}
// expected-error@-1 {{explicit specialization of undeclared template trait 'T'}}

  return &a; // expected-error {{expected a pointer type which has implemented 'trait T', found 'int'}}
}

trait F<int>* get(trait P<int>* t) {  // expected-error {{explicit specialization of undeclared template trait 'P'}}
// expected-warning@-1 {{declaration of 'trait P' will not be visible outside of this function}}
// expected-error@-2 {{'trait P' must be defined before it can be used}}
  int a = 6;
  int* c = &a;
  *c = 3;
  return c;
}

int main() {
  return 0;
}