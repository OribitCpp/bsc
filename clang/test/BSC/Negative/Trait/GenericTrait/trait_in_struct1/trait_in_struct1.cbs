// RUN: %clang_cc1 -fsyntax-only -verify %s

trait F<T> {
  T f(This* this);
};

int int::f(int* this) {
  return 1;
}

struct S {
    trait F<int>* future;
};

int main() {
  int x = 1;
  trait F<int> *r = &x; // expected-warning {{incompatible pointer types initializing 'trait F<int> *' with an expression of type 'int *'}}
                        // expected-error@-1 {{expected a pointer type which has implemented 'trait F<int>', found 'int'}}
  struct S s = { .future = &x }; // expected-error {{expected a pointer type which has implemented 'trait F<int>', found 'int'}}
  struct S s1 = { .future = (trait F<int>*)&x }; // expected-error {{expected a pointer type which has implemented 'trait F<int>', found 'int'}}
  struct S s2 = { &x }; // expected-error {{expected a pointer type which has implemented 'trait F<int>', found 'int'}}
  struct S s3 = { .future = r };
  struct S s4;
  s4.future = &x; // expected-error {{expected a pointer type which has implemented 'trait F<int>', found 'int'}}
  int a = s.future->f();
  int a1 = s1.future->f();
  int a2 = s2.future->f();
  int a3 = s3.future->f();
  int a4 = s4.future->f();
  return a + a1 + a2 + a3 + a4 - 5;
}