// RUN: %clang_cc1 -fsyntax-only -verify %s

trait F {
  int foo(This *this);
};
trait G {};

struct S {};

int struct S::foo(This *this) {
  return 1;
}

impl trait F for struct S;

trait F *f(trait F *a) {
    return a;
}

int main() {
  struct S s;
  int num = 1;
  trait F *p = &s;

  trait F **q = &p;
  trait F **q1 = &p;
  // compare with null
  if (q == (void*)0) {}
  if ((void*)0 == q) {}
  // compare with trait **
  if (q != q1) {}
  if (q != &p) {}
  // compare with trait *
  if (q != p) {} // expected-error {{invalid operands to binary expression ('struct __Trait_F *' and 'struct __Trait_F')}}
                 // expected-warning@-1 {{comparison of distinct pointer types ('trait F **' and 'trait F *')}}
  // compare with int
  if (q != num) {} // expected-warning {{comparison between pointer and integer ('struct __Trait_F *' and 'int')}}
  // compare with struct S
  if (q != s) {} // expected-error {{invalid operands to binary expression ('struct __Trait_F *' and 'struct S')}}
  // compare with int *
  if (q != &num) {} // expected-warning {{comparison of distinct pointer types ('struct __Trait_F *' and 'int *')}}
  // compare with struct S *
  if (q != &s) {} // expected-warning {{comparison of distinct pointer types ('struct __Trait_F *' and 'struct S *')}}

  // desugar
  // compare with trait pointer
  trait G * g;
  if ((*q) != g) {} // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait G *')}}
  if ((*q) == (p) && (*q) != (p)) {}
  // compare with non-trait pointer
  int *a;
  if ((*q) == &s) {}
  if ((*q) == a) {} // expected-warning {{expected a pointer type which has implemented 'trait F', found 'int *'}}
  if ((*q) == s) {} // expected-error {{expected a pointer type which has implemented 'trait F', found 'struct S'}}

  trait F ***t = &q;
  // compare with trait pointer
  if ((**t) != g) {} // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait G *')}}
  if ((**t) == (p) && (**t) != (p)) {}
  // compare with non-trait pointer
  if ((**t) == &s) {}
  if ((**t) == a) {} // expected-warning {{expected a pointer type which has implemented 'trait F', found 'int *'}}
  if ((**t) == s) {} // expected-error {{expected a pointer type which has implemented 'trait F', found 'struct S'}}

  (*t)->foo(); // expected-error {{'trait F **' cannot directly call functions}}
}