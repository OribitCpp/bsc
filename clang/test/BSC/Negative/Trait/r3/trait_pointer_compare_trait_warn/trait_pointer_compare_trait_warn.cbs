// RUN: %clang_cc1 -fsyntax-only -verify %s
// RUN: %clang %s -o %t.output
// RUN: %t.output

trait F {
    int foo(This* this);
};

trait G {
    int goo(This* this);
};

trait H {
    double hoo(This* this);
};

int int::foo(int *this) {
    return 2;
};

int int::goo(int *this) {
    return 1;
};

double double::hoo(double *this) {
    return 1.0;
};

impl trait F for int;
impl trait G for int;
impl trait H for double;

int diffTraitCompareOnlyDataEqual() {
    int a = 1;
    int b = 1;
    trait F* f = &a;
    trait G* g = &b;
    if (f == g) { // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait G *')}}
        return 1;
    }
    if (f != g) { // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait G *')}}
        return 0;
    }
    return 1;
}

int diffTraitCompareNotEqual() {
    int a = 1;
    double b = 1.0;
    trait F* f = &a;
    trait H* h = &b;
    if (f == h) { // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait H *')}}
        return 1;
    }
    if (f != h) { // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait H *')}}
        return 0;
    }
    return 1;
}

int diffTraitCompareEqual() {
    trait F* f = ((void *)0);
    trait H* h = ((void *)0);
    if (f != h) { // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait H *')}}
        return 1;
    }
    if (f == h) { // expected-warning {{comparison of distinct pointer types ('trait F *' and 'trait H *')}}
        return 0;
    }
    return 1;
}

int main() {
    if (diffTraitCompareOnlyDataEqual()) {
        return 1;
    }
    if (diffTraitCompareNotEqual()) {
        return 1;
    }
    if (diffTraitCompareEqual()) {
        return 1;
    }
    return 0;
}