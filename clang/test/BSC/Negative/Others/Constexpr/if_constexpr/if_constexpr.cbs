// RUN: %clang_cc1 -verify %s
int foo1() {
    return 5;
}

constexpr int foo2(int a) {
    return a;
}

void foo3<T>(T a) {
    if constexpr (a) {  //expected-error {{BSC constexpr if condition expression does not support type 'float'}}
        a = 5;
    }
}

void foo4<T>(T a) {
    int b = 5;
    int p, q;
    if constexpr (1) {
        _Static_assert(1 == 0, "fail"); //expected-error{{static assertion failed due to requirement '1 == 0': fail}}
        _Static_assert(a == 0, "fail");  //expected-error{{static assertion expression is not an integral constant expression}}
        q = &b; //expected-error{{incompatible pointer to integer conversion assigning to 'int' from 'int *'; remove &}}  expected-error{{incompatible pointer to integer conversion assigning to 'int' from 'int *'; remove &}}
        p = &a; //expected-error{{incompatible pointer to integer conversion assigning to 'int' from 'int *'; remove &}}
    } else {
        _Static_assert(1 == 0, "fail"); //expected-error{{static assertion failed due to requirement '1 == 0': fail}}
        _Static_assert(a == 0, "fail"); 
        q = &b; //expected-error{{incompatible pointer to integer conversion assigning to 'int' from 'int *'; remove &}}
        p = &a;          
    }
}
int main() {
    int a = 1;
    if constexpr(5.0) { //expected-error{{BSC constexpr if condition expression does not support type 'double'}}
        a = 6;
    }
    if constexpr(&a) { //expected-error{{BSC constexpr if condition expression does not support type 'int *'}}
        a = 6;
    }
    if constexpr(a) {  //expected-error{{constexpr if condition is not a constant expression}}
        a = 6;
    }
    if constexpr(foo1()) {  //expected-error{{constexpr if condition is not a constant expression}}
        a = 6;
    }
    if constexpr(foo2(a)) {  //expected-error{{constexpr if condition is not a constant expression}}
        a = 6;
    }
    foo3<float>(5.0); //expected-note{{in instantiation of function template specialization 'foo3<float>' requested here}}
    foo4<int>(a);//expected-note{{in instantiation of function template specialization 'foo4<int>' requested here}}
    return 0;
}