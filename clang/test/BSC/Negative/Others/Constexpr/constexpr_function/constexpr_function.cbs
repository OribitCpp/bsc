// RUN: %clang_cc1 -verify %s

int foo1();   // expected-note {{previous declaration is here}}
constexpr int foo1() {  // expected-error {{constexpr declaration of 'foo1' follows non-constexpr declaration}}
    return 1;
}

constexpr void foo2() {} // expected-error {{BSC constexpr function does not support type 'void'}} expected-error {{constexpr function's return type 'void' is not a literal type}}

constexpr int foo3(float a, int* b) { // expected-error {{BSC constexpr function does not support type 'float'}} expected-error {{BSC constexpr function does not support type 'int *'}} 
    return 1;
}

constexpr int foo4(int a,...) { // expected-error {{BSC constexpr function does not support variadic}}
    return 1;
}

constexpr int foo5(constexpr int a) { // expected-error {{function parameter cannot be constexpr}}
    return 1;
}

constexpr int foo6() {  
    int a = 5;
    float b = 5.0; //expected-error {{BSC constexpr function does not support type 'float'}}
    return 1;
}

constexpr int foo7() { // expected-error {{constexpr function never produces a constant expression}}
    static int a = 1; // expected-note{{control flows through the definition of a static variable}}
    return 1;
}

int a = 5;
constexpr int foo8() {  // expected-error {{constexpr function never produces a constant expression}}
    int b = a;  // expected-note {{subexpression not valid in a constant expression}}
    return 1;
}

int bar() { return 1; }
constexpr int foo9() { // expected-error {{constexpr function never produces a constant expression}}
    int d = bar(); // expected-note {{subexpression not valid in a constant expression}}
    return 1;
}

constexpr int foo10<T>() {
    T a = 5;  //expected-error {{BSC constexpr function does not support type 'float'}}
    return 1;
}

trait M {
    constexpr int foo(This* this); // expected-error {{BSC constexpr function does not support type 'This *'}}
};
constexpr int int::foo(This* this) {  // expected-error {{BSC constexpr function does not support type 'int *'}}
    return 1;
}
struct S {};
constexpr int struct S::foo(This* this) {  // expected-error {{BSC constexpr function does not support type 'struct S *'}}
    return 1;
}
impl trait M for int; 
impl trait M for struct S;

struct G<T> {};
constexpr int struct G<T>::foo(This* this) { // expected-error {{BSC constexpr function does not support type 'struct G<int> *'}}
    return 1;
}

int main() {
    struct G<int> g;  // expected-note {{in instantiation of template class 'G<int>' requested here}}
    foo10<float>();  // expected-note {{in instantiation of function template specialization 'foo10<float>' requested here}}
    return 0;
}
