// Test without serialization:
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -ast-dump %s \
// RUN: | FileCheck --strict-whitespace %s
//
// Test with serialization:
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -x bsc -triple x86_64-unknown-unknown -include-pch %t -ast-dump-all /dev/null \
// RUN: | sed -e "s/ <undeserialized declarations>//" -e "s/ imported//" \
// RUN: | FileCheck --strict-whitespace %s

struct S<T>{
  T a;
};
// CHECK: ClassTemplateDecl 0x{{[^ ]*}} <{{.*}}:[[@LINE-3]]:1, line:[[@LINE-1]]:1> line:[[@LINE-3]]:8 S
// CHECK-NEXT: TemplateTypeParmDecl 0x{{[^ ]*}} <col:10> col:10 referenced class depth 0 index 0 T
// CHECK-NEXT: RecordDecl 0x{{[^ ]*}} <col:1, line:[[@LINE-3]]:1> line:[[@LINE-5]]:8 struct S definition
// CHECK-NEXT: FieldDecl 0x{{[^ ]*}} <line:[[@LINE-5]]:3, col:5> col:5 a 'T'
// CHECK-NEXT: ClassTemplateSpecializationDecl 0x{{[^ ]*}} <line:[[@LINE-7]]:1, line:[[@LINE-5]]:1> line:[[@LINE-7]]:8 struct S definition
// CHECK-NEXT: DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
// CHECK-NEXT: DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
// CHECK-NEXT: CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
// CHECK-NEXT: MoveConstructor exists simple trivial needs_implicit
// CHECK-NEXT: CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
// CHECK-NEXT: MoveAssignment exists simple trivial needs_implicit
// CHECK-NEXT: Destructor simple irrelevant trivial needs_implicit
// CHECK-NEXT: TemplateArgument type 'int'
// CHECK-NEXT: BuiltinType 0x{{[^ ]*}} 'int'
// CHECK-NEXT: FieldDecl 0x{{[^ ]*}} <line:[[@LINE-16]]:3, col:5> col:5 referenced a 'int':'int'

T max<T>(T a, T b) {
  return a > b ? a : b;
}
// CHECK: FunctionTemplateDecl 0x{{[^ ]*}} <line:[[@LINE-3]]:1, line:[[@LINE-1]]:1> line:[[@LINE-3]]:3 max
// CHECK-NEXT: TemplateTypeParmDecl 0x{{[^ ]*}} <col:7> col:7 referenced class depth 0 index 0 T
// CHECK-NEXT: FunctionDecl 0x{{[^ ]*}} <col:1, line:[[@LINE-3]]:1> line:[[@LINE-5]]:3 max 'T (T, T)'
// CHECK-NEXT: ParmVarDecl 0x{{[^ ]*}} <col:10, col:12> col:12 referenced a 'T'
// CHECK-NEXT: ParmVarDecl 0x{{[^ ]*}} <col:15, col:17> col:17 referenced b 'T'
// CHECK-NEXT: CompoundStmt 0x{{[^ ]*}} <col:20, line:[[@LINE-6]]:1>
// CHECK-NEXT: ReturnStmt 0x{{[^ ]*}} <line:[[@LINE-8]]:3, col:22>
// CHECK-NEXT: ConditionalOperator 0x{{[^ ]*}} <col:10, col:22> '<dependent type>'
// CHECK-NEXT: BinaryOperator 0x{{[^ ]*}} <col:10, col:14> '<dependent type>' '>'
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:10> 'T' lvalue ParmVar 0x{{[^ ]*}} 'a' 'T'
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:14> 'T' lvalue ParmVar 0x{{[^ ]*}} 'b' 'T'
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:18> 'T' lvalue ParmVar 0x{{[^ ]*}} 'a' 'T'
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:22> 'T' lvalue ParmVar 0x{{[^ ]*}} 'b' 'T'
// CHECK-NEXT: FunctionDecl 0x{{[^ ]*}} <line:[[@LINE-16]]:1, line:[[@LINE-14]]:1> line:[[@LINE-16]]:3 used max 'int (int, int)'
// CHECK-NEXT: TemplateArgument type 'int'
// CHECK-NEXT: BuiltinType 0x{{[^ ]*}} 'int'
// CHECK-NEXT: ParmVarDecl 0x{{[^ ]*}} <col:10, col:12> col:12 used a 'int':'int'
// CHECK-NEXT: ParmVarDecl 0x{{[^ ]*}} <col:15, col:17> col:17 used b 'int':'int'
// CHECK-NEXT: CompoundStmt 0x{{[^ ]*}} <col:20, line:[[@LINE-19]]:1>
// CHECK-NEXT: ReturnStmt 0x{{[^ ]*}} <line:[[@LINE-21]]:3, col:22>
// CHECK-NEXT: ConditionalOperator 0x{{[^ ]*}} <col:10, col:22> 'int'
// CHECK-NEXT: BinaryOperator 0x{{[^ ]*}} <col:10, col:14> 'int' '>'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:10> 'int':'int' <LValueToRValue>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:10> 'int':'int' lvalue ParmVar 0x{{[^ ]*}} 'a' 'int':'int'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:14> 'int':'int' <LValueToRValue>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:14> 'int':'int' lvalue ParmVar 0x{{[^ ]*}} 'b' 'int':'int'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:18> 'int':'int' <LValueToRValue>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:18> 'int':'int' lvalue ParmVar 0x{{[^ ]*}} 'a' 'int':'int'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:22> 'int':'int' <LValueToRValue>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:22> 'int':'int' lvalue ParmVar 0x{{[^ ]*}} 'b' 'int':'int'


int main() {
  struct S<int> s1 = {.a = 42};
  int a = s1.a;
  int b = max<int>(2023, 2022);
  return 0;
}
// CHECK: FunctionDecl 0x{{[^ ]*}} <line:[[@LINE-6]]:1, line:[[@LINE-1]]:1> line:[[@LINE-6]]:5 main 'int (void)'
// CHECK-NEXT: CompoundStmt 0x{{[^ ]*}} <col:12, line:[[@LINE-2]]:1>
// CHECK-NEXT: DeclStmt 0x{{[^ ]*}} <line:[[@LINE-7]]:10, col:31>
// CHECK-NEXT: VarDecl 0x{{[^ ]*}} <col:10, col:30> col:17 used s1 'S<int>':'struct S<int>' cinit
// CHECK-NEXT: InitListExpr 0x{{[^ ]*}} <col:22, col:30> 'S<int>':'struct S<int>'
// CHECK-NEXT: IntegerLiteral 0x{{[^ ]*}} <col:28> 'int' 42
// CHECK-NEXT: DeclStmt 0x{{[^ ]*}} <line:[[@LINE-10]]:3, col:15>
// CHECK-NEXT: VarDecl 0x{{[^ ]*}} <col:3, col:14> col:7 a 'int' cinit
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:11, col:14> 'int':'int' <LValueToRValue>
// CHECK-NEXT: MemberExpr 0x{{[^ ]*}} <col:11, col:14> 'int':'int' lvalue .a 0x{{[^ ]*}}
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:11> 'S<int>':'struct S<int>' lvalue Var 0x{{[^ ]*}} 's1' 'S<int>':'struct S<int>'
// CHECK-NEXT: DeclStmt 0x{{[^ ]*}} <line:[[@LINE-14]]:3, col:31>
// CHECK-NEXT: VarDecl 0x{{[^ ]*}} <col:3, col:30> col:7 b 'int' cinit
// CHECK-NEXT: CallExpr 0x{{[^ ]*}} <col:11, col:30> 'int':'int'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:11, col:18> 'int (*)(int, int)' <FunctionToPointerDecay>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:11, col:18> 'int (int, int)' Function 0x{{[^ ]*}} 'max' 'int (int, int)' (FunctionTemplate 0x{{[^ ]*}} 'max')
// CHECK-NEXT: IntegerLiteral 0x{{[^ ]*}} <col:20> 'int' 2023
// CHECK-NEXT: IntegerLiteral 0x{{[^ ]*}} <col:26> 'int' 2022
// CHECK-NEXT: ReturnStmt 0x{{[^ ]*}} <line:[[@LINE-20]]:3, col:10>
// CHECK-NEXT: IntegerLiteral 0x{{[^ ]*}} <col:10> 'int' 0