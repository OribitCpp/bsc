// RUN: %clang_cc1 -fsyntax-only -verify %s

struct F {
  int age;
  char name[20];
  int high;
};

void UnsafeOperator() {
  union un {
    int age;
    char name[20];
  };

  struct F pb = {10, "tom", 80};
  struct F *pc = &pb;
  struct F* owned po = (struct F * owned)&pb;

  safe {
    int a = 0;
    a++;     // expected-error {{'++' operator is forbidden in the safe zone}}
    a--;     // expected-error {{'--' operator is forbidden in the safe zone}}
    union un pa = {10}; 
    a = pa.age;   // expected-error {{'.' operator used by union type is forbidden in the safe zone}}
    a = pb.age;   // ok , not union type
    a = pc->age;  // expected-error {{'->' operator used by raw pointer type is forbidden in the safe zone}}
    a = po->age;  // ok , not raw point type
  }
}

void IncomInitList() {
  struct G {
    struct F f;
    int a;
  };

  struct S {
    unsigned int x1;
    int x2;
  };

  safe {
    struct F a = {};             // ok
    struct F b = {0};            // ok
    struct F c = {10};           // expected-error {{incomplete initialization is forbidden in the safe zone}}
    struct F d = {10, "tom"};    // expected-error {{incomplete initialization is forbidden in the safe zone}}
    struct F e = {10, "tom", 80};
    struct F f = {.age = 10};   // expected-error {{incomplete initialization is forbidden in the safe zone}}
    struct F g = {.age = 10, .name = "tom"};  // expected-error {{incomplete initialization is forbidden in the safe zone}}
    struct F h = {.age = 10, .name = "tom", .high = 90};
    struct G i = {0};
    struct G j = {.f.age = 10}; // expected-error {{incomplete initialization is forbidden in the safe zone}}
                                // expected-error@-1 {{incomplete initialization is forbidden in the safe zone}}
    struct G k = {{10, "tom", 80}, 10};
    struct G l = {.f.age = 10, .f.name = "tom", .f.high = 90, 10};
    struct S m = {};
    struct S n = {0};
  }

  safe {
    int arr1[4] = {0};          // ok
    int arr2[4] = {0, 1, 2};    // ok
    int arr3[4] = {0, 1, 2, 3};
    int arr4[4] = {0, 1, 2, 3, 4}; // expected-error {{excess elements in array initializer}}
    char arr5[10] = "\0";        // ok
    char arr6[10] = "hello";     // ok
    int arr7[] = {0};
    int arr8[] = {1, 2};
    struct F arr9[2] = {0};
    //int *arr10[10] = {0};
  }

  union E {
    char a;
    int b;
  };
  safe {
    union E ua = {0};            // ok
    union E ub = {127};          // ok
    union E uc = {128};          // expected-error {{conversion from type 'int' to 'char' is forbidden in the safe zone}}
    union E ud = {.b = 128};     // ok
    union E ue = {.a = 'a'};     // ok
  }
}