// RUN: %clang_cc1 -verify %s

trait T {
  safe void do_it(This* owned this);
  void do_that(This* this);
  safe void do_this(This* borrow this);
};

safe void int::do_it(int* owned this) {
  unsafe { int* x = (int*)this; }
}

void int::do_that(int* this) {
}

safe void int::do_this(int* borrow this) {
}

impl trait T for int;

struct S {
  int* owned a;
  int* owned b;
};

safe void struct S::do_it(struct S* owned this) {
  unsafe {
    int* a = (int *)this->a;
    int* b = (int *)this->b;
    void* s = (void *)(void* owned)this;
  }
}

void struct S::do_that(struct S* this) {
}

safe void struct S::do_this(struct S* borrow this) {
}

impl trait T for struct S;

safe int* owned initI(void);
safe struct S initS(void);
struct S* initSP();
safe struct S* owned convertToOwned(struct S);

trait T* cond1(int flag) {
  if (flag == 1) {
    int x = 1;
    return &x;
  } else if (flag == 2) {
    struct S* sp = initSP();
    return sp;
  } else if (flag == 3) {
    int x = 2;
    return (int* owned)&x;
  } else {
    double y = 2.0;
    return &y; // expected-error {{expected a pointer type which has implemented 'trait T', found 'double'}}
  }
}

trait T* owned cond2(int flag) {
  if (flag == 1) {
    int x = 1;
    return (int* owned)&x;
  } else if (flag == 2) {
    struct S s = initS();
    struct S* owned sp = convertToOwned(s);
    return sp;
  } else if (flag == 3) {
    int x = 2;
    return &x; // expected-error {{incompatible owned types, cannot cast 'void *' to 'void *owned'}}
  }
}

trait T* borrow cond3(int flag, int* borrow x) {
  if (flag == 1) {
    return x;
  } else if (flag == 2) {
    struct S* sp = initSP();
    return &mut *sp;
  } else {
    struct S s = initS();
    return &mut s;
  }
}

