// RUN: %clang_cc1 -verify %s

typedef struct {
    int a;
    int* owned p;
} B;

typedef struct {
    int a;
    int* owned p;
    B* b;
} ownedA;

B* ownedA::getB(This* this) {
    return this->b;
}

ownedA func1(ownedA sa) {
    return sa;
}
void test1(ownedA sa) {
    int res1 = sa.a;
    func1(sa).a;    // expected-error {{memory leak because temporary variable 'func1(sa)' is owned or indirect owned type, please fix it}}
    int res2 = func1(sa).a; // expected-error {{memory leak because temporary variable 'func1(sa)' is owned or indirect owned type, please fix it}}
    return;
}


ownedA* func2(ownedA* sa) {
    return sa;
}

void test2(ownedA* sa) {
    int res1 = sa->a;
    func2(sa)->a; // expected-warning {{expression result unused}}
    int res2 = func2(sa)->a;
    return;
}


void test3(ownedA sa) {
    B* res1 = func1(sa).getB(); // expected-error {{memory leak because temporary variable 'func1(sa)' is owned or indirect owned type, please fix it}}
    int res2 = func1(sa).getB()->a; // expected-error {{memory leak because temporary variable 'func1(sa)' is owned or indirect owned type, please fix it}}
    return;
}

typedef struct {
    int* p1;
    int* owned p2;
} CC;

CC* fun4(CC* c) { return c; }

void test4(CC* c) {
    fun4(c)->p1++;
    *fun4(c)->p2 += 1;
}
