// RUN: %clang_cc1 -ast-dump -verify %s

#define NULL ((void*) 0)

//owned to owned
void test1(float f) {
    float* owned a1 = (float* owned)&f;
    int* owned a2 = a1;    //expected-error {{incompatible owned types, cannot cast 'float *owned' to 'int *owned'}}
}

//unOwned to owned
void test2(int* b1) {
    int* owned b2 = b1;  //expected-error {{incompatible owned types, cannot cast 'int *' to 'int *owned'}}
}

//owned to unOwned
void test3(int* owned c1) {
    int* c2 = c1;  //expected-error {{incompatible owned types, cannot cast 'int *owned' to 'int *'}}
}

//unOwned to owned with typedef
typedef int* owned myInt;
void test4() {
    int b = 10;
    int* p1 = &b;
    myInt p2 = p1;  //expected-error {{incompatible owned types, cannot cast 'int *' to 'myInt' (aka 'int *owned'}}
}

int* owned test5(int* owned a){
    return a;
}

int test5_1(int* owned a) {
    int* owned b;
    b = test5(a);
    if (b != 0) {
        return 1;
    }
    return 0;
}

int* test6()
{
    int b = 0;
    int* a = &b;
    return a;
}

int test6_1()
{
    int* a = test6();
    int* owned b = (int* owned)a;
    if (*b != 0) {
        return 1;
    }
    return 0;
}

// short to int
int test7()
{
    short a = 0;
    owned short *b = &a;    //expected-error {{incompatible owned types, cannot cast 'short *' to 'owned short *'}}
    owned int **c = (owned int**)&b; // expected-error {{incompatible owned types, cannot cast 'owned short **' to 'owned int **'}}
    if(**c != 0) {
        return 1;
    }
    return 0;
}

// with other qualifiers
void test9() {
    int a = 10;
    int* const owned p1 = (int* owned)&a;   //legal
    int* const owned p2 = p1;   //legal
    const int* owned p3 = p1;   //legal
    const int* const owned p4 = p1; //legal
    volatile int* owned p5 = p1;
}

// pointer to owned type, recursively check
void test10(owned int* p0) {
    int* p1 = p0;   //expected-error {{incompatible owned types, cannot cast 'owned int *' to 'int *'}}
}

void test11(int* owned *p0) {
    int** p1 = p0;  //expected-error {{incompatible owned types, cannot cast 'int *owned *' to 'int **'}}
}

typedef int* owned * myIntPP;
void test12(int* owned *p0, int** p1) {
    myIntPP p2 = p0;
    myIntPP p3 = p1;    //expected-error {{incompatible owned types, cannot cast 'int **' to 'myIntPP' (aka 'int *owned *'}}
}

void test13(int* owned p0, const int* owned p1) {
    float* owned p2 = p0;   //expected-error {{incompatible owned types, cannot cast 'int *owned' to 'float *owned'}}
    const float* owned p3 = p1; //expected-error {{incompatible owned types, cannot cast 'const int *owned' to 'const float *owned'}}
    int* owned p4 = p1; //expected-warning {{initializing 'int *owned' with an expression of type 'const int *owned' discards qualifiers}}
}

owned struct S {
public:
    ~S(S this) {}
};

void test14() {
    S* s = NULL;
}

owned struct R<T> {
public:
    T* ptr;
    ~R(R<T> this) {}
};

void test15() {
    R<int> ri = { .ptr = NULL };
    R<S> rs = { .ptr = NULL };
}