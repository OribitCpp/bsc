// RUN: %clang_cc1 -ast-dump -verify %s

//owned to owned
void test1() {
    int* owned p1;
    int* owned p3 = (int* owned)p1;     //legal
    void* owned p4 = (void* owned)p1;   //legal
    float* owned p2 = (float* owned)p1;   //expected-error {{incompatible owned types, cannot cast 'int *owned' to 'float *owned'}}
    int owned a = 10;
    float owned b = (float owned)a;     //expected-error {{incompatible owned types, cannot cast 'owned int' to 'owned float'}}
    void* owned p5;
    int* owned p6 = (int* owned)p5;     //legal
}

//owned to unOwned
void test2() {
    int* p1;
    int* owned p2 = (int* owned)p1;
    float* owned p3 = (float* owned)p1;  //expected-error {{incompatible owned types, cannot cast 'int *' to 'float *owned'}}
}

//unOwned to owned
void test3() {
    int* owned p1;
    int* p2 = (int*)p1;
    float* p3 = (float*)p1;  //expected-error {{incompatible owned types, cannot cast 'int *owned' to 'float *'}}
}

//with const & muiti-layer pointer
void test4(int** p0, owned int* p1, int* p3) {
    const int* owned p11 = (const int* owned)p1;
    owned int* const owned * owned p22 = (owned int* const owned * owned)p0;
    int* const * owned p33 = (int* const * owned)p0;
    void* owned p44 = (void* owned)p3;
    owned int* p55 = (owned int*)p3;
}

// illegal cases
void test5(float owned f1, float* owned f2){
    int owned a1 = (int owned)f1;   //expected-error {{incompatible owned types, cannot cast 'owned float' to 'owned int'}}
    int* owned a2 = (int* owned)f2; //expected-error {{incompatible owned types, cannot cast 'float *owned' to 'int *owned'}}
    void* owned a4 = (void* owned)0;   //expected-error {{incompatible owned types, cannot cast 'int' to 'void *owned'}}
}

void test6(int** owned p) {
    const int** owned p1 = p;   //expected-warning {{initializing 'const int **owned' with an expression of type 'int **owned' discards qualifiers in nested pointer types}} [-Wincompatible-pointer-types-discards-qualifiers]
    const int** owned p2 = (const int** owned)p;
}
