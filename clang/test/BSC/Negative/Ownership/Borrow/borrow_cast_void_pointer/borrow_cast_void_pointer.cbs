// RUN: %clang_cc1 -ast-dump -verify %s

void test() {
  int a = 1;
  int b = 1;
  int * borrow p1  = &mut a;
  const int * borrow p2  = &const b;
  // T --> void
  void * borrow v1 = p1; // legal
  void * borrow v2 = (void * borrow)p1; // legal
  (const void * borrow)p1; // expected-warning {{expression result unused}}
  const void * borrow v3 = p2; // legal
  const void * borrow v4 = (const void * borrow)p2; // legal
  (void * borrow)p2; // expected-warning {{expression result unused}}
  v1 = v3; // expected-error {{incompatible borrow types, cannot cast 'const void *borrow' to 'void *borrow'}}
  v3 = v1; // expected-error {{incompatible borrow types, cannot cast 'void *borrow' to 'const void *borrow'}}

  // void --> T
  int * borrow p3 = (int * borrow)v1; // legal
  const int * borrow p4 = (const int * borrow)v3; // legal
  int * borrow p5 = v1; // expected-error {{incompatible borrow types, cannot cast 'void *borrow' to 'int *borrow'}}
  const int * borrow p6 = v3; // expected-error {{incompatible borrow types, cannot cast 'const void *borrow' to 'const int *borrow'}}
  p3 = v1; // expected-error {{incompatible borrow types, cannot cast 'void *borrow' to 'int *borrow'}}
  p4 = v3; // expected-error {{incompatible borrow types, cannot cast 'const void *borrow' to 'const int *borrow'}}
  p3 = p4; // expected-error {{incompatible borrow types, cannot cast 'const int *borrow' to 'int *borrow'}}
  p4 = p3; // expected-error {{incompatible borrow types, cannot cast 'int *borrow' to 'const int *borrow'}}
  p3 = (int * borrow)v1; // legal
  p4 = (const int * borrow)v3; // legal


  safe {
     // T --> void
     void * borrow v5 = (void * borrow)p1; // expected-error {{conversion from type 'int *borrow' to 'void *borrow' is forbidden in the safe zone}}
     const void * borrow v6 = (const void * borrow)p2; // expected-error {{conversion from type 'const int *borrow' to 'const void *borrow' is forbidden in the safe zone}}
     v5 = p1; // expected-error {{conversion from type 'int *borrow' to 'void *borrow' is forbidden in the safe zone}}
     v6 = p2; // expected-error {{conversion from type 'const int *borrow' to 'const void *borrow' is forbidden in the safe zone}}

     // void --> T
     (int * borrow)v5; // expected-error {{conversion from type 'void *borrow' to 'int *borrow' is forbidden in the safe zone}}
     (const int * borrow)v6; // expected-error {{conversion from type 'const void *borrow' to 'const int *borrow' is forbidden in the safe zone}}
  }
}