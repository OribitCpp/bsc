// RUN: %clang_cc1 -ast-dump -verify %s
struct R2 {
  const int a;
};
struct R2_wrap {
   struct R2 r;
};

trait T {
};

impl trait T for int;

void foo() {}
void test() {
  const int a = 1;
  struct R2_wrap r2;
  struct R2_wrap *pr2;
  struct R2_wrap * borrow b1 = &mut r2; // legal
  struct R2_wrap ** borrow b2 = &mut pr2; // legal
  struct R2 * borrow b3 = &mut r2.r; // legal
  const int * borrow b4 = &mut r2.r.a; // expected-error {{the expression after '&mut' must be modifiable}}
  b3 = &mut pr2->r; // legal
  b4 = &mut pr2->r.a; // expected-error {{the expression after '&mut' must be modifiable}}
  b4 = &mut a; // expected-error {{the expression after '&mut' must be modifiable}}
  &mut "const"; // expected-warning {{expression result unused}}

  int arr1[] = {1, 2, 3};
  const int arr2[] = {1, 2, 3};
  &mut arr1; // expected-warning {{expression result unused}}
  int * borrow b5 = &mut arr1[1]; // legal
  &mut arr2; // expected-error {{the expression after '&mut' must be modifiable}}
             // expected-warning@-1 {{expression result unused}}
  b4 = &mut arr2[1]; // expected-error {{the expression after '&mut' must be modifiable}}

  int b = 1;
  int *p = &b;
  b5 = &mut b;
  b4 = &const b;
  int *a1 = &*p;
  b5 = &mut *b5; // legal
  b4 = &const *b5;
  b4 = &const *p;
  trait T *t1 = &mut b;
  const trait T *t2 = &const b;
  &mut foo; // expected-error {{'&mut' for function pointer is not allowed}}
            // expected-warning@-1 {{expression result unused}}
  &const foo; // expected-warning {{expression result unused}}
}