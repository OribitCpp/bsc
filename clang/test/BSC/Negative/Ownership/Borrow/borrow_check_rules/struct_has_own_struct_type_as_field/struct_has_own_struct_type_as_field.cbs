// RUN: %clang_cc1 -verify %s

owned struct G;
owned struct G {
  public:
    G *g;
};

owned struct K;
owned struct S {
  public:
    K *k;
};

owned struct K {
  public:
    S *s;
};

void use_G_mut(G *borrow g);
void use_G_const(const G *borrow g);
void use_S_mut(S *borrow s);
void use_S_const(const S *borrow s);
void use_K_mut(K *borrow k);
void use_K_const(const K *borrow k);

void test1(G g1) {
  G g = { .g = &g1 };
  G *borrow p1 = &mut g; // expected-note {{mutable borrow occurs here}}
                         // expected-note@-1 {{first mut borrow occurs here}}
                         // expected-note@-2 {{mutable borrow occurs here}}
                         // expected-note@-3 {{first mut borrow occurs here}}
                         // expected-note@-4 {{mutable borrow occurs here}}
  const G *borrow p2 = &const g; // expected-error {{cannot borrow `g` as immutable because it is also borrowed as mutable}}
  G *borrow p3 = &mut *g.g; // expected-error {{cannot borrow `*g.g` as mutable more than once at a time}}
  const G *borrow p4 = &const *g.g; // expected-error {{cannot borrow `*g.g` as immutable because it is also borrowed as mutable}}
  G *borrow p5 = &mut *g.g->g; // expected-error {{cannot borrow `*(*g.g).g` as mutable more than once at a time}}
  const G *borrow p6 = &const *g.g->g; // expected-error {{cannot borrow `*(*g.g).g` as immutable because it is also borrowed as mutable}}
  use_G_mut(p1);
  use_G_const(p2);
  use_G_mut(p3);
  use_G_const(p4);
  use_G_mut(p5);
  use_G_const(p6);   
}

void test2(G g1) {
  G g = { .g = &g1 };
  G *borrow p1 = &mut g; // expected-note {{first mut borrow occurs here}}
                         // expected-note@-1 {{first mut borrow occurs here}}
  G *borrow p2 = &mut *g.g; // expected-error {{cannot borrow `*g.g` as mutable more than once at a time}}
  G *borrow p3 = &mut *g.g->g; // expected-error {{cannot borrow `*(*g.g).g` as mutable more than once at a time}}
  use_G_mut(p1);
  use_G_mut(p2);
  use_G_mut(p3);
}

void test3(S s1) {
  K k = { .s = &s1 };
  K *borrow p1 = &mut k; // expected-note {{mutable borrow occurs here}}
                         // expected-note@-1 {{first mut borrow occurs here}}
                         // expected-note@-2 {{mutable borrow occurs here}}
                         // expected-note@-3 {{first mut borrow occurs here}}
                         // expected-note@-4 {{mutable borrow occurs here}}
  const K *borrow p2 = &const k; // expected-error {{cannot borrow `k` as immutable because it is also borrowed as mutable}}
  S *borrow p3 = &mut *k.s; // expected-error {{cannot borrow `*k.s` as mutable more than once at a time}}
  const S *borrow p4 = &const *k.s; // expected-error {{cannot borrow `*k.s` as immutable because it is also borrowed as mutable}}
  K *borrow p5 = &mut *k.s->k; // expected-error {{cannot borrow `*(*k.s).k` as mutable more than once at a time}}
  const K *borrow p6 = &const *k.s->k; // expected-error {{cannot borrow `*(*k.s).k` as immutable because it is also borrowed as mutable}}
  use_K_mut(p1);
  use_K_const(p2);
  use_S_mut(p3);
  use_S_const(p4);
  use_K_mut(p5);
  use_K_const(p6);   
}

void test4(S s1) {
  K k = { .s = &s1 };
  K *borrow p1 = &mut k; // expected-note {{first mut borrow occurs here}}
                         // expected-note@-1 {{first mut borrow occurs here}}
  S *borrow p2 = &mut *k.s; // expected-error {{cannot borrow `*k.s` as mutable more than once at a time}}
  K *borrow p3 = &mut *k.s->k; // expected-error {{cannot borrow `*(*k.s).k` as mutable more than once at a time}}
  use_K_mut(p1);
  use_S_mut(p2);
  use_K_mut(p3);
}