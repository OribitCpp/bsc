// RUN: %clang_cc1 -verify %s

struct S {
  int a;
  int *owned b;
};

void use_mut(int *borrow p);
void use_immut(const int *borrow p);
T *owned safe_malloc<T>(T value);
void free_owned<T>(T *owned p);

void test1() {
  int e = 1;
  const int *borrow p1 = &const e; // expected-note {{`e` is borrowed here}}
  e = 2; // expected-error {{cannot assign to `e` because it is borrowed}}
  if (*p1 == 2) {
    e = 5;
  }

  int f = 1;
  const int  *borrow p2 = &const f; // expected-note {{`f` is borrowed here}}
  f = 2; // expected-error {{cannot assign to `f` because it is borrowed}}
  if (*p2) {
    f = 5;
  }

  int g = 1;
  const int *borrow p3 = &const g; // expected-note {{`g` is borrowed here}}
  g = 2; // expected-error {{cannot assign to `g` because it is borrowed}}
  if (*p3 < 0 || *p3 > 5 || *p3 + *p3 > 10) {
    g = 5;
  }

  int h = 1;
  int *borrow p4 = &mut h; // expected-note {{`h` is borrowed here}}
  int k = h; // expected-error {{cannot use `h` because it was mutably borrowed}}
  if (*p4) {
    h = 5;
  }
}

void test2() {
  int local = 5;
  struct S s = { .a = 1, .b = safe_malloc<int>(1) };
  const struct S *borrow p = &const s; // expected-note {{`s.a` is borrowed here}}
                                       // expected-note@-1 {{`s` is borrowed here}}
  s.a = 2; // expected-error {{cannot assign to `s.a` because it is borrowed}}
  free_owned<int>(s.b); // expected-error {{cannot move out of `s.b` because it is borrowed}}
  if (p->a == 2 && *(p->b) == 2) {
    s.a = 5;
  }
}

void test3() {
  int e = 1;
  int *borrow p = &mut e; // expected-note {{`e` is borrowed here}}
                          // expected-note@-1 {{`e` is borrowed here}}
  while (*p > 0) {
    --e; // expected-error {{cannot assign to `e` because it is borrowed}}
         // expected-error@-1 {{cannot use `e` because it was mutably borrowed}}
  }
}

void test4() {
  int e = 1;
  const int *borrow p = &const e; // expected-note {{`e` is borrowed here}}
  for (int i = 0; i < *p; ++i) {
    --e; // expected-error {{cannot assign to `e` because it is borrowed}}
  }
}

void test5() {
  int e = 1;
  const int *borrow p = &const e; // expected-note {{`e` is borrowed here}}
  e = 2; // expected-error {{cannot assign to `e` because it is borrowed}}
  do {
      --e;
  } while (*p > 0);
}

void test6() {
  int e = 1;
  int f = 2;
  const int *borrow p1 = &const e; // expected-note {{`e` is borrowed here}}
  const int *borrow p2 = &const f;
  e = 2; // expected-error {{cannot assign to `e` because it is borrowed}}
  for ( ; ; ) {
    while (p2 == p1)
      return;
  }
}

void test7() {
  int e = 1;
  const int *borrow p = &const e; // expected-note {{`e` is borrowed here}}
  e = 2; // expected-error {{cannot assign to `e` because it is borrowed}}
  while (*p > 0) {
    --e;
  }
}

void test8() {
  int e = 1;
  int f = 2;
  const int *borrow p1 = &const e; // expected-note {{`e` is borrowed here}}
  const int *borrow p2 = &const f;
  for (p2 = p1; *p2 > 0; ) {
    --e; // expected-error {{cannot assign to `e` because it is borrowed}}
  }
}

void test9() {
  int e = 1;
  int f = 2;
  const int *borrow p1 = &const e;
  const int *borrow p2 = &const f; // expected-note {{`f` is borrowed here}}
  for ( ; e = 2, f = 2; ) { // expected-error {{cannot assign to `f` because it is borrowed}}
    if (e) {
      return;
    } else {
      p1 = p2;
    }
  }
}

void test10() {
  int e = 1;
  int f = 2;
  const int *borrow p1 = &const e; // expected-note {{`e` is borrowed here}}
  const int *borrow p2 = &const f; // expected-note {{`f` is borrowed here}}
  for ( ; e = 2, f = 2; ) { // expected-error {{cannot assign to `e` because it is borrowed}}
                            // expected-error@-1 {{cannot assign to `f` because it is borrowed}}
    if (p1 == p2) {
      return;
    } else {
      p1 = p2;
    }
  }
}

void test11() {
  int local = 42;
  int *borrow p = &mut local;
  int *borrow q = &mut *p;
  while (1) {
    use_mut(p);
  }
  use_mut(q);
}