// RUN: %clang_cc1 -verify %s

typedef struct A {
  int *borrow p;
} A;

typedef struct B {
  int m;
  int n;
} B;

typedef struct C {
  B b;
  int *borrow p;
} C;

typedef struct D {
  B b;
  int *borrow p;
  int *borrow q;
} D;

typedef struct E {
  C c;
  int x;
  int *borrow p;
} E;

void use_mut(int *borrow);
void useE(E);
void useC(C);

void test1() {
  int local = 42;
  A a = { .p = &mut local }; // expected-note {{`local` is borrowed here}}
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  use_mut(a.p);
}

void test2(A a) {
  int local = 42;
  a.p = &mut local; // expected-note {{`local` is borrowed here}}
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  int x = *a.p;
}

void test3() {
  int local = 42;
  C c = { .p = &mut local }; // expected-note {{`local` is borrowed here}}
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  int temp = c.b.m;
}

void test4(C c) {
  int local = 42;
  c = (struct C) { .p = &mut local }; // expected-note {{`local` is borrowed here}}
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  int temp = c.b.m;
}

void test5() {
  int local = 42;
  D d = { .p = &mut local, .q = &mut local }; // expected-error {{cannot borrow `local` as mutable more than once at a time}}
                                              // expected-note@-1 {{`local` is borrowed here}}
                                              // expected-note@-2 {{first mut borrow occurs here}}
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  int temp = d.b.m;
}

void test6() {
  int local = 42;
  E e = { .c = (struct C) { .p = &mut local }, .p = &mut local }; // expected-error {{cannot borrow `local` as mutable more than once at a time}}
                                                                  // expected-note@-1 {{`local` is borrowed here}}
                                                                  // expected-note@-2 {{first mut borrow occurs here}}
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  int temp = e.c.b.m;
}

void test7(A a) {
  {
    int local = 42;
    a = (struct A) { .p = &mut local }; // expected-error {{`local` does not live long enough}}
  } // expected-note {{`local` dropped here while still borrowed}}
  use_mut(a.p);
}

void test8(A a) {
  {
    int local = 42;
    a = (struct A) { .p = &mut local }; // expected-note {{`local` is borrowed here}}
    local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  }
  use_mut(a.p);
}

void test9(A a1) {
  int local = 42;
  A a2 = { .p = &mut local }; // expected-note {{`local` is borrowed here}}
  a1 = a2;
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  use_mut(a1.p);
}

void test10() {
  int local = 42;
  A a1 = { .p = &mut local }; // expected-note {{`local` is borrowed here}}
  A a2 = a1;
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  use_mut(a2.p);
}

void test11() {
  int local = 42;
  C c = { .p = &mut local };
  int *borrow q = c.p; // expected-note {{`*c.p` is borrowed here}}
  int temp = *c.p; // expected-error {{cannot use `*c.p` because it was mutably borrowed}}
  use_mut(q);
}

void test12() {
  int local = 42;
  C c1 = { .p = &mut local };
  C c2 = c1; // expected-note {{`*c1.p` is borrowed here}}
  int temp = *c1.p; // expected-error {{cannot use `*c1.p` because it was mutably borrowed}}
  use_mut(c2.p);
}

void test13() {
  int local1 = 42;
  int local2 = 42;
  E e1 = { .c = (struct C) { .p = &mut local1 }, .p = &mut local2 };
  E e2 = e1; // expected-note {{`*e1.c.p` is borrowed here}}
             // expected-note@-1 {{first mut borrow occurs here}}
             // expected-note@-2 {{first mut borrow occurs here}}
  E temp = e1; // expected-error {{cannot use `e1` because it was mutably borrowed}}
               // expected-error@-1 {{cannot borrow `*e1.c.p` as mutable more than once at a time}}
               // expected-error@-2 {{cannot borrow `*e1.p` as mutable more than once at a time}}
  useE(e2);
}

void test14() {
  int local1 = 42;
  int local2 = 42;
  E e1 = { .c = (struct C) { .p = &mut local1 }, .p = &mut local2 };
  C c = e1.c;
  useE(e1);
}

void test15() {
  int local1 = 42;
  int local2 = 42;
  int local3 = 42;
  E e1 = { .c = (struct C) { .p = &mut local1 }, .p = &mut local2 };
  C c = e1.c;
  e1.c = (struct C) { .p = &mut local3 };
  useE(e1);
}

void test16() {
  int local1 = 42;
  int local2 = 42;
  E e1 = { .c = (struct C) { .p = &mut local1 }, .p = &mut local2 };
  int *borrow p = e1.p;
  useE(e1);
}

void test17() {
  int local1 = 42;
  int local2 = 42;
  E e = { .c = (struct C) { .p = &mut local1 }, .p = &mut local2 };
  C c = e.c; // expected-note {{`*e.c.p` is borrowed here}}
             // expected-note@-1 {{first mut borrow occurs here}}
  int *borrow p1 = e.p; // expected-note {{`*e.p` is borrowed here}}
                        // expected-note@-1 {{first mut borrow occurs here}}
  int *borrow p2 = e.p; // expected-error {{cannot use `e.p` because it was mutably borrowed}}
                        // expected-error@-1 {{cannot borrow `*e.p` as mutable more than once at a time}}
  use_mut(p1);
  useE(e); // expected-error {{cannot use `e` because it was mutably borrowed}}
           // expected-error@-1 {{cannot borrow `*e.c.p` as mutable more than once at a time}}
  useC(c);
}