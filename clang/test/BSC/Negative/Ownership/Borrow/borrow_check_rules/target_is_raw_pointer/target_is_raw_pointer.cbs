// RUN: %clang_cc1 -verify %s

struct N {
  int b;
  int *owned c;
};

struct M {
  int *a;
  struct N *n;
};

struct K {
  int *borrow p;
};

void use_mut(int *borrow p) {}

void test() {
  int a = 5;
  int *borrow p1 = &mut a;
  int *borrow p2 = &mut a;
  struct K k = { .p = &mut a }; // expected-note {{`a` is borrowed here}}
                                // expected-note@-1 {{`a` is borrowed here}}
  int *owned o = (int* owned)&a; // expected-error {{cannot use `a` because it was mutably borrowed}}
  {
    struct N n = { .b = 5, .c = o  };
    struct M m = { .a = &a, .n = &n }; // expected-error {{cannot use `a` because it was mutably borrowed}}
    p1 = &mut *m.a;
    p2 = &mut m.n->b;
    k.p = &mut *m.n->c;
    int *d = (int *)n.c;
  }
  use_mut(p1);
  use_mut(k.p);
  use_mut(p2);
}

int main() {
  test();
  return 0;
}