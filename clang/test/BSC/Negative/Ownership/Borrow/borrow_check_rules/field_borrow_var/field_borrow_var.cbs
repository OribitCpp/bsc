// RUN: %clang_cc1 -verify %s

typedef struct R {
  int a;
  int b;
} R;

typedef struct S {
  R *borrow r;
  int num;
} S;

void use_mut(R *borrow);
void use_const(const R *borrow);

void test1() {
  R local_r = { .a = 1, .b = 2 };
  S s = { .r = &mut local_r, .num = 3 }; // expected-note {{`local_r.a` is borrowed here}}
                                         // expected-note@-1 {{mutable borrow occurs here}}
  const R *borrow const_r = &const local_r; // expected-error {{cannot borrow `local_r` as immutable because it is also borrowed as mutable}}
  local_r.a = 4; // expected-error {{cannot assign to `local_r.a` because it is borrowed}}
  use_mut(s.r);
}

void test2() {
  R local_r = { .a = 1, .b = 2 };
  S s = { .r = &mut local_r, .num = 3 };
  const R *borrow const_r = &const local_r; // expected-note {{`local_r.a` is borrowed here}}
  local_r.a = 4; // expected-error {{cannot assign to `local_r.a` because it is borrowed}}
  use_const(const_r);
}

void test3() {
  R local_r = { .a = 1, .b = 2 };
  S s = { .r = &mut local_r, .num = 3 };
  const R *borrow const_r = &const local_r;
  int y = local_r.a;
  use_const(const_r);
}