// RUN: %clang_cc1 -verify %s

struct S {
  int a;
  int b;
};

void use_mut(int *borrow p);
void use_immut(const int *borrow p);
void use_S_mut(struct S *borrow a);
void use_S_immut(const struct S *borrow a);

void test1() {
  int a = 1;
  int *borrow p1 = &mut a; // expected-note {{first mut borrow occurs here}}
  int *borrow p2 = &mut a; // expected-error {{cannot borrow `a` as mutable more than once at a time}}
  int b = *p2;
  int c = *p1;
}

void test2() {
  int a = 1;
  int *borrow p1 = &mut a; // expected-note {{mutable borrow occurs here}}
  const int *borrow p2 = &const a; // expected-error {{cannot borrow `a` as immutable because it is also borrowed as mutable}}
  int b = *p2;
  int c = *p1;
}

void test3() {
  int a = 1;
  const int *borrow p1 = &const a; // expected-note {{immutable borrow occurs here}}
  int *borrow p2 = &mut a; // expected-error {{cannot borrow `a` as mutable because it is also borrowed as immutable}}
  int b = *p2;
  int c = *p1;
}

void test4() {
  int a = 1;
  const int *borrow p1 = &const a;
  const int *borrow p2 = &const a;
  int b = *p2;
  int c = *p1;
}

void test5() {
  struct S s = { 1, 1 };
  int *borrow p1 = &mut s.a;
  int *borrow p2 = &mut s.b;
  int b = *p2;
  int c = *p1;
}

void test6() {
  struct S s = { 1, 1 };
  int *borrow p1 = &mut s.a;
  const int *borrow p2 = &const s.b;
  int b = *p2;
  int c = *p1;
}

void test7() {
  struct S s = { 1, 1 };
  const int *borrow p1 = &const s.a;
  int *borrow p2 = &mut s.b;
  int b = *p2;
  int c = *p1;
}

void test8() {
  struct S s = { 1, 1 };
  const int *borrow p1 = &const s.a;
  const int *borrow p2 = &const s.b;
  int b = *p2;
  int c = *p1;
}

void test9() {
  struct S s = { 1, 1 };
  struct S *borrow p1 = &mut s; // expected-note {{first mut borrow occurs here}}
  int *borrow p2 = &mut s.b; // expected-error {{cannot borrow `s.b` as mutable more than once at a time}}
  int b = *p2;
  use_S_mut(p1);
}

void test10() {
  struct S s = {1, 1};
  struct S *borrow p1 = &mut s; // expected-note {{mutable borrow occurs here}}
  const int *borrow p2 = &const s.b; // expected-error {{cannot borrow `s.b` as immutable because it is also borrowed as mutable}}
  int b = *p2;
  use_S_mut(p1);
}

void test11() {
  struct S s = {1, 1};
  const struct S *borrow p1 = &const s; // expected-note {{immutable borrow occurs here}}
  int *borrow p2 = &mut s.b; // expected-error {{cannot borrow `s.b` as mutable because it is also borrowed as immutable}}
  int b = *p2;
  use_S_immut(p1);
}

void test12() {
  struct S s = { 1, 1 };
  const struct S *borrow p1 = &const s;
  const int *borrow p2 = &const s.b;
  int b = *p2;
  use_S_immut(p1);
}

void test13() {
  struct S s = { 1, 1 };
  int *borrow p1 = &mut s.b; // expected-note {{first mut borrow occurs here}}
  struct S *borrow p2 = &mut s; // expected-error {{cannot borrow `s` as mutable more than once at a time}}
  use_S_mut(p2);
  int b = *p1;
}

void test14() {
  struct S s = { 1, 1 };
  const int *borrow p1 = &const s.b; // expected-note {{immutable borrow occurs here}}
  struct S *borrow p2 = &mut s; // expected-error {{cannot borrow `s` as mutable because it is also borrowed as immutable}}
  use_S_mut(p2);
  int b = *p1;
}

void test15() {
  struct S s = { 1, 1 };
  int *borrow p1 = &mut s.b; // expected-note {{mutable borrow occurs here}}
  const struct S *borrow p2 = &const s; // expected-error {{cannot borrow `s` as immutable because it is also borrowed as mutable}}
  use_S_immut(p2);
  int b = *p1;
}

void test16() {
  struct S s = { 1, 1 };
  const int *borrow p1 = &const s.b;
  const struct S *borrow p2 = &const s;
  use_S_immut(p2);
  int b = *p1;
}

void test17() {
  int local = 5;
  int *borrow p = &mut local;
  int *borrow p1 = &mut *p;
  use_mut(p1);
  use_mut(&mut *p);
}