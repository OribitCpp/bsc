// RUN: %clang_cc1 -verify %s

void foo1(int *borrow, int *borrow);
void foo2(int, int *borrow);
void foo3(int *borrow, int);

void test1(int local) {
  foo1(&mut local, &mut local); // expected-error {{cannot borrow `local` as mutable more than once at a time}}
                                // expected-note@-1 {{first mut borrow occurs here}}
}

void test2(int local) {
  int *borrow p = &mut local; // expected-note {{first mut borrow occurs here}}
  int *borrow q = &mut local; // expected-error {{cannot borrow `local` as mutable more than once at a time}}
  foo1(p, q);
}

void test3(int local) {
  int *borrow p = &mut local; // expected-note {{first mut borrow occurs here}}
  foo1(p, &mut local); // expected-error {{cannot borrow `local` as mutable more than once at a time}}
}

void test4(int local) {
  int *borrow p = &mut local; // expected-note {{first mut borrow occurs here}}
  foo1(&mut local, p); // expected-error {{cannot borrow `local` as mutable more than once at a time}}
}

void test5(int local) {
  foo2(local, &mut local); // expected-error {{cannot use `local` because it was mutably borrowed}}
                           // expected-note@-1 {{`local` is borrowed here}}
}

void test6(int local) {
  int *borrow p = &mut local; // expected-note {{`local` is borrowed here}}
  foo2(local, p); // expected-error {{cannot use `local` because it was mutably borrowed}}
}

void test7(int local) {
  foo3(&mut local, local); // expected-error {{cannot use `local` because it was mutably borrowed}}
                           // expected-note@-1 {{`local` is borrowed here}}
}

void test8(int local) {
  int *borrow p = &mut local; // expected-note {{`local` is borrowed here}}
  foo3(p, local); // expected-error {{cannot use `local` because it was mutably borrowed}}
}
