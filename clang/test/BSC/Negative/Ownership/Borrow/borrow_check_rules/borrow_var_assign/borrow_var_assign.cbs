// RUN: %clang_cc1 -verify %s

struct S {
  int a;
};

void use_mut(int* borrow p);
void use_immut(const int* borrow p);
T* owned safe_malloc<T>(T value);
void free_owned<T>(T* owned p);
void free(void*);

void test1() {
  int local = 42;
  int* borrow p = &mut local; // expected-note {{`local` is borrowed here}}
  int* borrow q = p;
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  use_mut(q);
}

void test2() {
  int* owned oriPtr = safe_malloc<int>(0);
  int* borrow p1 = &mut *oriPtr; // expected-note {{`*oriPtr` is borrowed here}}
  int* borrow p2 = p1;
  free_owned<int>(oriPtr); // expected-error {{cannot move out of `oriPtr` because it is borrowed}}
  use_mut(p2);
}

void test3() {
  int local = 42;
  int* borrow p = &mut local; // expected-note {{first mut borrow occurs here}}
                              // expected-note@-1 {{`local` is borrowed here}}
  int* borrow q = &mut local; // expected-error {{cannot borrow `local` as mutable more than once at a time}}
  q = p;
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  use_mut(q);
}

void test4(int* oriPtr) {
  int* borrow p1 = &mut *oriPtr; // expected-note {{first mut borrow occurs here}}
                                 // expected-note@-1 {{`*oriPtr` is borrowed here}}
  int* borrow p2 = &mut *oriPtr; // expected-error {{cannot borrow `*oriPtr` as mutable more than once at a time}}
  free(oriPtr); // expected-error {{cannot use `oriPtr` because it was mutably borrowed}}
  use_mut(p1);
}

void test5() {
  int local = 42;
  const int* borrow p = &const local; // expected-note {{`local` is borrowed here}}
  const int* borrow q = p;
  local = 43; // expected-error {{cannot assign to `local` because it is borrowed}}
  use_immut(q);
}

void test6() {
  int arr[5];
  int* borrow p = &mut arr[0]; // expected-note {{`arr` is borrowed here}}
  int* borrow q = p;
  int temp = arr[2]; // expected-error {{cannot use `arr` because it was mutably borrowed}}
  use_mut(q);
}

void test7() {
  struct S s = { .a = 5 };
  struct S* borrow p1 = &mut s; // expected-note {{`s` is borrowed here}}
  struct S* borrow p2 = p1;
  struct S temp = s; // expected-error {{cannot use `s` because it was mutably borrowed}}
  struct S s2 = *p2;
}