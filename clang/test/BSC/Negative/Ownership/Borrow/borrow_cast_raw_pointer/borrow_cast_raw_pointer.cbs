// RUN: %clang_cc1 -ast-dump -verify %s

void test() {
  int a = 1;
  int b = 1;
  // T * --> T * borrow
  int *p = &a;
  int * borrow p1 = (int * borrow)&a; // legal
  const int * borrow p2 = (const int * borrow)&a; // legal
  p1 = (int * borrow)&a; // legal
  p2 = (const int * borrow)&a; // legal
  p1 = p; // expected-error {{incompatible borrow types, cannot cast 'int *' to 'int *borrow'}}
  p = p1; // expected-error {{incompatible borrow types, cannot cast 'int *borrow' to 'int *'}}
  p1 = p2; // expected-error {{incompatible borrow types, cannot cast 'const int *borrow' to 'int *borrow'}}
  p2 = p1; // expected-error {{incompatible borrow types, cannot cast 'int *borrow' to 'const int *borrow'}}

  // T * borrow --> T *
  int * p3 = (int *)&mut a; // legal
  const int * p4 = (const int *)&const a; // legal
  p3 = (int *)&mut a; // legal
  p4 = (const int *)&const a; // legal

  safe {
    // T * --> T * borrow
    int * borrow p1 = (int * borrow)p; // expected-error {{conversion from type 'int *' to 'int *borrow' is forbidden in the safe zone}}
    const int * borrow p2 = (const int * borrow)p; // expected-error {{conversion from type 'int *' to 'const int *borrow' is forbidden in the safe zone}}
    p1 = (int * borrow)p; // expected-error {{conversion from type 'int *' to 'int *borrow' is forbidden in the safe zone}}
    p2 = (const int * borrow)p; // expected-error {{conversion from type 'int *' to 'const int *borrow' is forbidden in the safe zone}}

    // T * borrow --> T *
    int * p3 = (int *)&mut a; // expected-error {{conversion from type 'int *borrow' to 'int *' is forbidden in the safe zone}}
    const int * p4 = (const int *)&const a; // expected-error {{conversion from type 'const int *borrow' to 'const int *' is forbidden in the safe zone}}
    p3 = (int *)&mut a; // expected-error {{conversion from type 'int *borrow' to 'int *' is forbidden in the safe zone}}
    p4 = (const int *)&const a; // expected-error {{conversion from type 'const int *borrow' to 'const int *' is forbidden in the safe zone}}
  }
}