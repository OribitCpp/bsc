// RUN: %clang_cc1 -ast-dump -verify %s

void test_freeze_ident1() {
  int a = 1;
  int *borrow c = &mut a;
  // we can modify "a" when c life time is end;
  a = 2;
}

void test_freeze_ident2() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{`a` is borrowed here}}
  a = 2; // expected-error {{cannot assign to `a` because it is borrowed}}
  int d = *c;
}

void test_freeze_ident2_0() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{`a` is borrowed here}}
  int m = a; // expected-error {{cannot use `a` because it was mutably borrowed}}
  int d = *c;
}

void test_freeze_ident3() {
  int a = 1;
  int b = 2;
  int *borrow c = &mut a;
  // "c" life time is end at before, and reactivate at after;
  a = 2;
  c = &mut b;
}

void test_freeze_ident4() {
  int a = 1;
  int *borrow c = &mut a;
  int *borrow d = &mut a;    
}

void test_freeze_ident5() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{first mut borrow occurs here}}
  int *borrow d = &mut a; // expected-error {{cannot borrow `a` as mutable more than once at a time}}
  int e = *c;
}

void test_freeze_ident6() {
  int a = 1;
  int *borrow c = &mut a;
  int *borrow d = &mut a;
  int e = *d;
}

void test_freeze_ident6_0() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{first mut borrow occurs here}}
  int *borrow d = &mut a; // expected-error {{cannot borrow `a` as mutable more than once at a time}}
  int e = *d;
  int f = *c;
}

void test_freeze_ident6_1() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{first mut borrow occurs here}}
  int *borrow d = &mut a; // expected-error {{cannot borrow `a` as mutable more than once at a time}}
  int e = *c;
  int f = *d;
}

void test_freeze_ident6_2() {
  int a = 1;
  int *borrow c = &mut a;
  int *borrow d = c; // expected-note {{`*c` is borrowed here}}
  int e = *c; // expected-error {{cannot use `*c` because it was mutably borrowed}}
  int f = *d;
}

void use(int *borrow a) {}

void test_freeze_ident6_3() {
  int a = 1;
  int *borrow c = &mut a;
  int *borrow d = c; // expected-note {{`*c` is borrowed here}}
  int e = *c; // expected-error {{cannot use `*c` because it was mutably borrowed}}
  use(d);
}

void test_freeze_ident7() {
  int a = 1;
  int *borrow c = &mut a;
  const int *borrow d = &const a;
}

void test_freeze_ident8() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{mutable borrow occurs here}}
  const int *borrow d = &const a; // expected-error {{cannot borrow `a` as immutable because it is also borrowed as mutable}}
  int e = *c;
}

void test_freeze_ident9() {
  int a = 1;
  int *borrow c = &mut a;
  const int *borrow d = &const a;
  int e = *d;
}

void test_freeze_ident10() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{mutable borrow occurs here}}
  const int *borrow d = &const a; // expected-error {{cannot borrow `a` as immutable because it is also borrowed as mutable}}
  int b = *d;
  int e = *c;
}

void const_use(const int *borrow a) {};

void test_freeze_ident11() {
  int a = 1;
  int *borrow c = &mut a; // expected-note {{mutable borrow occurs here}}
  const int *borrow d = &const a; // expected-error {{cannot borrow `a` as immutable because it is also borrowed as mutable}}
  int b = *c;
  const_use(d);
}

void test_freeze_ident12() {
  int a = 1;
  const int *borrow c = &const a;
  const int *borrow d = &const a;
  int b = *c;
  int e = *d;
}

void test_freeze_ident13() {
  int a = 1;
  const int *borrow c = &const a; // expected-note {{`a` is borrowed here}}
  a = 2; // expected-error {{cannot assign to `a` because it is borrowed}}
  int b = *c;
}

int test_freeze_ident14(){
  int a = 1;
  int b = 2;
  int *c, *d;
  c = &a;
  d = &b;
  int * borrow e = &mut *c;
  int m = *d;
  use(e);
  return 0;
}

int test_freeze_ident15(int *borrow m){
  int a = 1;
  int b = 2;
  int *c, *d;
  c = &a;
  d = &b;
  int *borrow e = &mut *c; // expected-note {{first mut borrow occurs here}}
  int *borrow f = &mut *c; // expected-error {{cannot borrow `*c` as mutable more than once at a time}}
  int g = f == e ? *f : *e;
  use(f);
  use(e);
  return 0;
}

struct S {
  int a;
  int *borrow b;
};

void test_freeze_ident17(){
  int a = 1;
  int *owned b = (int *owned)&a;
  int *borrow c = &mut *b;
  int *d = (int *)b;
}

void test_freeze_ident18(){
  int a = 1;
  int *owned b = (int *owned)&a;
  int *borrow c = &mut *b; // expected-note {{`*b` is borrowed here}}
  int *d = (int *)b; // expected-error {{cannot move out of `b` because it is borrowed}}
  use(c);
}

void test_freeze_ident19(){
  int a = 1;
  int *owned b = (int *owned)&a;
  int *borrow c = &mut *b; // expected-note {{`*b` is borrowed here}}
  int *owned d = b; // expected-error {{cannot move out of `b` because it is borrowed}}
  use(c);
  int *e = (int *)d;
}

void test_freeze_ident20(){
  int a = 1;
  int *owned b = (int *owned)&a;
  const int *borrow c = &const *b; // expected-note {{`*b` is borrowed here}}
  int *owned d = b; // expected-error {{cannot move out of `b` because it is borrowed}}
  const_use(c);
  int * e = (int *)d;
}

owned struct F {
public:
  int a;
};

void owned_struct_use1(F *borrow b){}

void test_freeze_ident21(){
  F f = {1};
  F *borrow b = &mut f; // expected-note {{`f` is borrowed here}}
  F k = f; // expected-error {{cannot move out of `f` because it is borrowed}}
  owned_struct_use1(b);
}

void owned_struct_use2(const F *borrow b){}

void test_freeze_ident22(){
  F f = {1};
  const F *borrow b = &const f; // expected-note {{`f` is borrowed here}}
  F k = f; // expected-error {{cannot move out of `f` because it is borrowed}}
  owned_struct_use2(b);
}

struct H {
  int *owned a;
  int b;
};

void owned_struct_use3(struct H *borrow b){}

void test_freeze_ident23(){
  int a = 1;
  struct H h = {(int *owned)&a, 2};
  struct H *borrow b = &mut h; // expected-note {{`h` is borrowed here}}
  struct H g = h; // expected-error {{cannot move out of `h` because it is borrowed}}
  owned_struct_use3(b);
  int *c = (int *)g.a;
}

void owned_struct_use4(const struct H *borrow b){}

void test_freeze_ident24(){
  int a = 1;
  struct H h = {(int *owned)&a, 2};
  const struct H *borrow b = &const h; // expected-note {{`h` is borrowed here}}
  struct H g = h; // expected-error {{cannot move out of `h` because it is borrowed}}
  owned_struct_use4(b);
  int *c = (int *)g.a;
}

void test_freeze_ident25(){
  int a = 1;
  int *borrow p1 = &mut a; // expected-note {{`a` is borrowed here}}
  a = 5; // expected-error {{cannot assign to `a` because it is borrowed}}
  int *borrow p2 = p1;
}

void test_freeze_ident26(){
  int a = 1;
  int *owned b = (int *owned)&a;
  int *borrow p1 = &mut *b; // expected-note {{`*b` is borrowed here}}
  int *d = (int *)b; // expected-error {{cannot move out of `b` because it is borrowed}}
  int *borrow p2 = p1;
}

void test_freeze_ident27(){
  int a = 1;
  int *owned b = (int *owned)&a;
  int *borrow p1 = &mut *b; // expected-note {{`*b` is borrowed here}}
  int *borrow p2 = p1;
  int *d = (int *)b; // expected-error {{cannot move out of `b` because it is borrowed}}
  use(p2);
}

void test_freeze_ident28(){
  int a = 1;
  int *owned b = (int *owned)&a;
  int *borrow p1 = &mut *b; // expected-note {{`*b` is borrowed here}}
                            // expected-note@-1 {{`b` is borrowed here}}
  int *d = (int *)b; // expected-error {{cannot move out of `b` because it is borrowed}}
  int *borrow p2 = p1;
  b = (int *owned)&a; // expected-error {{cannot assign to `b` because it is borrowed}}
  d = (int *)b;
  use(p2);
}

void test_freeze_ident29(){
  int a = 1;
  int *borrow p1 = &mut a; // expected-note {{first mut borrow occurs here}}
                           // expected-note@-1 {{`a` is borrowed here}}
  int *borrow p2 = &mut a; // expected-error {{cannot borrow `a` as mutable more than once at a time}}
  a = 5; // expected-error {{cannot assign to `a` because it is borrowed}}
  p2 = p1;
}

void test_freeze_ident30(){
  int local = 5;
  int *borrow p = &mut local; // expected-note {{first mut borrow occurs here}}
  use(&mut local); // expected-error {{cannot borrow `local` as mutable more than once at a time}}
  use(p);
}