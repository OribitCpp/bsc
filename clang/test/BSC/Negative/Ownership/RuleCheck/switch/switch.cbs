// RUN: %clang_cc1 -verify %s

void func1(int n) {
    int num = 5;
    int * owned a = (int * owned)&num;
    int * owned b;
    switch (n) {
        case 0:
            break;
        case 1:
            b = a;
            break;
        case 4:
            b = a;
            break;
        case 5:
            break;
        default:
            break;
    }
    b = (int * owned)&num; // expected-error {{assign to owned value: `b`}}
} // expected-error {{memory leak of value: `a`}} expected-error {{memory leak of value: `b`}}

void func2(int n) {
    int num = 5;
    int * owned a = (int * owned)&num;
    int * owned b;
    switch (n) {
        case 0: {
            num = 1;
            break;
        }
        case 1: {
            b = a;
            break;
        }
        case 4: {
            b = a;
            break;
        }
        case 5: {
            break;
        }
        default: {
            break;
        }
    }
    b = (int * owned)&num; // expected-error {{assign to owned value: `b`}}
} // expected-error {{memory leak of value: `a`}} expected-error {{memory leak of value: `b`}}

void func3(int n) {
    int num = 5;
    int * owned a;
    switch (n) {
        case 0:
            if (num > 0) {
                a = (int * owned)&num;
            }
            break;
        case 1:
            break;
        case 4:
            break;
        case 5:
            break;
        default:
            break;
    }
}  // expected-error {{memory leak of value: `a`}}

void func4(int n) {
    int num = 5;
    int * owned a;
    switch (n) {
        case 0:
            if (num > 0) {
                a = (int * owned)&num;
            }
            break;
        case 1: {
            a = (int * owned)&num;
            break;
        }
        case 2:
            a = (int * owned)&num;
        case 4: {
            a = (int * owned)&num; // expected-error {{assign to owned value: `a`}}
        }
            break;
        case 5:
            break;
        default:
            break;
    }
    int * b = (int *)a; // expected-error {{use of possibly uninitialized value: `a`}}
}

void func5(int n) {
    int num = 5;
    int * owned a;
    switch (n) {
        case 0:
            for (int i = 0; i < 10; i++) {
                if (n > 4) {
                    a = (int * owned)&num;
                    break;
                }
            }
        case 1:
            a = (int * owned)&num; // expected-error {{assign to owned value: `a`}}
            break;
        case 4:
            for (int i = 0; i < 10; i++)
                break;
        case 5:
            break;
        default:
            break;
    }
} // expected-error {{memory leak of value: `a`}}

void func6(int n) {
    int num = 5;
    int * owned a;
    switch (n) {
        case 1:
            a = (int * owned)&num;
            for (int i = 0; i < 10; i++)
                break;
        case 2:
            a = (int * owned)&num; // expected-error {{assign to owned value: `a`}}
            break;
        default:
            break;
    }
} // expected-error {{memory leak of value: `a`}}

void func7(int n) {
    int num = 5;
    int * owned a = (int * owned)&num;
    int * owned b;
    switch (n) {
        case 0 : {
            if (num > 0)
                b = a;

            if (num < 5)
                b = a; // expected-error {{assign to owned value: `b`}} expected-error {{use of moved value: `a`}}
            break;
        }
        case 1:
            b = a;
            {
                b = a; // expected-error {{assign to owned value: `b`}} expected-error {{use of moved value: `a`}}
                break;
            }
        case 4:
            b = a;
            for (int i = 0; i < 10; i++)
                break;
        case 5:
            b = (int * owned)&num; // expected-error {{assign to owned value: `b`}}
        default: {
            break;
        }
    }
} // expected-error {{memory leak of value: `a`}} expected-error {{memory leak of value: `b`}}

void func8(int n) {
    int num = 5;
    int * owned a = (int * owned)&num;
    int * owned b;
    switch (n) {
        case 0: {
            b = a;
            break;
        }
        case 1: {
            b = a;
            break;
        }
        case 4: {
            b = a;
            break;
        }
        case 5: {
            b = a;
            break;
        }
        default: {
            b = a;
            int * c = (int *)b;
            break;
        }
    }
} // expected-error {{memory leak of value: `b`}}

void func9(int n) {
    int num = 5;
    int * owned a = (int * owned)&num;
    int * owned b;
    switch (n) {
        case 0: {
            b = a;
            for (int i = 0; i < 10; i++)
                break;
            break;
        }
        case 1: {
            b = a;
            break;
        }
        case 4: {
            b = a;
            for (int i = 0; i < 10; i++)
                break;
        }
        case 5: {
            b = a; // expected-error {{assign to owned value: `b`}} expected-error {{use of moved value: `a`}}
            break;
        }
        default: {
            break;
        }
    }
} // expected-error {{memory leak of value: `a`}} expected-error {{memory leak of value: `b`}}