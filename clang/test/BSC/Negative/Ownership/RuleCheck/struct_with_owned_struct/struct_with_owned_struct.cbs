// RUN: %clang_cc1 -verify %s

owned struct S {
public:
  int a;
  int b;
};

owned struct T {
public:
  S s;
};

struct A {
  S s;
  int c;
};

struct B {
  T t;
  int c;
};

void test_memory_leak(struct A sa) {
} // expected-error {{field memory leak of value: `sa`, sa.s is leak}}

void test_no_leak(struct A sa) {
  S sp = sa.s;
}

void test_owned_pointer_A(struct A* owned ap) {
} // expected-error {{memory leak of value: `ap`}}
  // expected-error@-1 {{field memory leak of value: `ap`, ap.s is leak}}

void test_raw_pointer_A(struct A* ap) {
}

void test_nested_memory_leak(struct B sb) {
} // expected-error {{field memory leak of value: `sb`, sb.t, sb.t.s are leak}}

void test_nested_no_leak(struct B sb) {
  T t = sb.t;
}

void test_partially_moved_leak1(struct B sb) {
  S s = sb.t.s;
} // expected-error {{field memory leak of value: `sb`, sb.t is leak}}

void test_partially_moved_leak2(struct B sb) {
  S s = sb.t.s;
  T t = sb.t; // expected-error {{use of partially moved value: `sb.t`, sb.t.s is moved}}
}

struct A* owned change_to_owned_pointer(struct A a);
void print(struct A a);
void safe_free(void* owned p);

void use_after_free() {
  struct A a = { .s = { .a = 1, .b = 2}, .c = 3 };
  struct A* owned ap = change_to_owned_pointer(a);

  print(*ap);
  safe_free((void* owned)ap);

  struct A an = a; // expected-error {{use of partially moved value: `a`, a.s is moved}}
} // expected-error {{field memory leak of value: `an`, an.s is leak}}
