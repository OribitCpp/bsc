// RUN: %clang_cc1 -verify %s

void safe_free(void* owned);

owned struct S {
public:
    int* owned a;
    int b;
    ~S(S this) {
        safe_free((void* owned)this.a);
    }
};

typedef struct R {
    S* owned sp;
    S s;
} R;

S* owned initS();

void test1(R* owned r) {
    S tmp1 = *r->sp;
    S tmp2 = r->s;
} // expected-error {{memory leak of value: `r`}}
  // expected-error@-1 {{field memory leak of value: `r`, r.sp is leak}}

void test2(R* owned r) {
    S tmp1 = *r->sp;
    S tmp2 = r->s;
    safe_free((void* owned)r); // expected-error {{invalid cast to `void * owned` of not all moved value: `r`, r.sp is owned}}
}

void test3(R* owned r) {
    S tmp1 = *r->sp;
    S tmp2 = r->s;
    safe_free((void* owned)r->sp);
} // expected-error {{memory leak of value: `r`}}

void test4(R* owned r) {
    S* owned sp = r->sp;
    S tmp2 = r->s;
    safe_free((void* owned)r);
} // expected-error {{memory leak of value: `sp`}}
  // expected-error@-1 {{field memory leak of value: `sp`, sp.a is leak}}

void test5(R r) {
    S tmp1 = *r.sp;
    S tmp2 = r.s;
} // expected-error {{field memory leak of value: `r`, r.sp is leak}}

void test6(R r) {
    S tmp1 = *r.sp;
    S tmp2 = r.s;
    safe_free((void* owned)r.sp);
}

void test7(R r) {
    S* owned sp = r.sp;
    S tmp2 = r.s;
} // expected-error {{memory leak of value: `sp`}}
  // expected-error@-1 {{field memory leak of value: `sp`, sp.a is leak}}

void test8(R r) {
    S* owned sp = r.sp;
    S tmp2 = r.s;
    S tmp1 = *sp;
} // expected-error {{memory leak of value: `sp`}}

void test9(R r) {
    S* owned sp = r.sp;
    S tmp2 = r.s;
    S tmp1 = *sp;
    safe_free((void* owned)sp);
}

void test10(R r) {
    S tmp1 = *r.sp;
    *r.sp = tmp1;
} // expected-error {{field memory leak of value: `r`, r.sp, r.s, r.s.a, r.sp.a, *r.sp are leak}}

void test11(R r) {
    S tmp1 = *r.sp;
    *r.sp = tmp1;
    S tmp2 = {};
    *r.sp = tmp2; // expected-error {{assign to subfield owned value: `r`, r.sp.a is owned}}
                  // expected-error@-1 {{assign to part of owned value: `*r.sp`}}
} // expected-error {{field memory leak of value: `r`, r.sp, r.s, r.s.a, r.sp.a, *r.sp are leak}}

void test12(R r) {
    S tmp1 = *r.sp;
    r.sp = initS();  // expected-error {{assign to part of owned value: `r.sp`}}
} // expected-error {{field memory leak of value: `r`, r.sp, r.s, r.s.a, r.sp.a, *r.sp are leak}}

void test13(R* owned r) {
    R tmp = *r;
    *r = tmp;
} // expected-error {{memory leak of value: `r`}}
  // expected-error@-1 {{field memory leak of value: `r`, r.sp, *r.sp, r.sp.a, r.s, r.s.a are leak}}

void test14(R* owned r) {
    S tmp = *r->sp;
    *r->sp = tmp;
} // expected-error {{memory leak of value: `r`}}
  // expected-error@-1 {{field memory leak of value: `r`, r.sp, r.s, r.s.a, r.sp.a, *r.sp are leak}}

void test15(R* owned r) {
    S* owned tmp = r->sp;
    *r->sp = *tmp; // expected-error {{assign to part of moved value: `r.sp`}}
} // expected-error {{memory leak of value: `tmp`}}
  // expected-error@-1 {{memory leak of value: `r`}}
  // expected-error@-2 {{field memory leak of value: `r`, r.s, r.s.a, *r.sp are leak}}