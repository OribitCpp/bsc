// RUN: %clang_cc1 -verify %s

extern void* malloc(unsigned long);
extern void free(void *);

owned struct S{
public:
    int data;
    int* owned p;
    ~S(S this) {
        free((void*)this.p);
    } 
};

void borrow_p(int* borrow p);

void modify(S* borrow s) {
    s->data = 1024;
}

void move(S s) {
}

void test1() {
  int* owned p = (int* owned)malloc(sizeof(int));
  S s = {.p = p, .data = 42};
  modify(&mut s);
  move(s);
  modify(&mut s); // expected-error {{use of moved value: `s`}}
}

void test2() {
  int* owned p = (int* owned)malloc(sizeof(int));
  S s = {.p = p, .data = 42};
  modify(&mut s);
  move(s);
}

void test3() {
  int* owned p = (int* owned)malloc(sizeof(int));
  S s = {.p = p, .data = 42};
  borrow_p(&mut *s.p);
  borrow_p(&mut s.data);
  move(s);
}

typedef struct R {
  int* owned a;
  int* owned b;
} R;

R* owned initR();
void consumeR(R* owned);

void test4() {
  R* owned r = initR();
  borrow_p(&mut *r->a);
  borrow_p(&mut *r->b);
  consumeR(r);
}

void test5() {
  R* owned r = initR();
  R* owned rr = r;
  int* a = (int *)r->a; // expected-error {{use of moved value: `r.a`}}
  borrow_p(&mut *r->a); // expected-error {{use of moved value: `r.a`}}
  borrow_p(&mut *r->b); // expected-error {{use of moved value: `r.b`}}
  consumeR(rr);
}
