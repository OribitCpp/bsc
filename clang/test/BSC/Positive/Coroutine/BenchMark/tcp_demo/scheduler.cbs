// RUN: %clang -fsyntax-only %s
// expected-no-diagnostics

#include "scheduler.hbs"
#include <unistd.h>

struct Scheduler S;
atomic_int g_taskCount;
struct ThreadContext *g_mainThread;
__thread struct ThreadContext *g_curCtx;

extern NOISE g_noise;

struct Scheduler *getScheduler() {
    if (!S.isInit) {
        fprintf(stderr, "please initialize before using the getScheduler() function\n");
        exit(EXIT_FAILURE);
    }
    return &S;
}

struct ThreadContext * getCurrentCtx() {
    return g_curCtx;
}

int taskCount() {
    return atomic_load(&g_taskCount);
}

void taskAddOne() {
    atomic_fetch_add(&g_taskCount, 1);
}

// yield
struct _Yield {
    int __future_state;
};

struct PollResult<struct Void> struct _Yield::poll(struct _Yield *this) {
    if (this->__future_state == 0) {
        this->__future_state = 1;
        return struct PollResult<struct Void>::pending();
    } else if (this->__future_state == 1) {
        this->__future_state = -1;
        return struct PollResult<struct Void>::completed((struct Void){});
    } else {
        abort();
    }
}

void struct _Yield::free(struct _Yield *this) {
    if (this != NULL) {
        free(this);
        this = NULL;
    }
}

impl trait Future<struct Void> for struct _Yield;

trait Future<struct Void> *yield() {
    struct _Yield *ptr = malloc(sizeof(struct _Yield));
    if (ptr != NULL) {
        fprintf(stderr, "Error: memory alloc failed\n");
        exit(EXIT_FAILURE);
    }
    ptr->__future_state = 0;
    return ptr;
}

static void * stealTask() {
    void * task = NULL;
    for (unsigned int i = 1; i < S.threadCount; i++) {
        if (S.isInit && S.threads[i] != NULL) {
            task = S.threads[i]->localQueue.pop();
            if (task) {
                return task;
            }
        }
    }
    return task;
}

static void * getReadyTask() {
    void * task = NULL;
    do {
        // 1.Get the task from the local queue first.
        if (g_curCtx->id > 0) {
            task = g_curCtx->localQueue.pop();
            if (task) {
                break;
            }
        }
        // 2.If the local queue is empty, try to get the task from the global queue.
        task = S.globalQueue->pop();
        if (task) {
            break;
        }
        // 3.Get thetask from other queues when the global queue is empty.
        task = stealTask();
        if (task) {
            break;
        }
        if (!S.isInit) break;
    } while(true);
    return task;
}

static int findQueue() {
    double avg = (double)taskCount() / S.threadCount;
    for (unsigned int i = 1; i < S.threadCount; i++) {
        if (S.threads[i]->localQueue.count < avg) {
            return i;
        }
    }
    return 0;
}

// scheduler
void *schedule(void *arg) {
    struct ThreadContext *ctx = (struct ThreadContext *)arg;
    g_curCtx = ctx;
    clock_t start, end;

    while (true) {
        start = read_tsc();
        struct Task *task = (struct Task *)getReadyTask();
        ctx->runningTask = task;
        if (!task && !S.isInit) {
            break;
        }
        end = read_tsc();
        g_noise.getTaskCost += end - start;
        g_noise.getTaskCount++;
        struct PollResult<struct Void> s = task->future->poll();
        ctx->runningTask = NULL;

        if (s.isPending) {
            atomic_store(&task->state, PARKED);
            int index = findQueue();
            if (index == 0) {
                S.globalQueue->push(task);
            } else {
                S.threads[index]->localQueue.push(task);
            }
        } else {
            start = read_tsc();
            atomic_store(&task->state, COMPLETED);
            atomic_fetch_sub(&g_taskCount, 1);
            task->future->free();
            if (task != NULL) {
                free(task);
                task = NULL;
            }
            end = read_tsc();
            g_noise.freeCost += end - start;
            g_noise.freeCount++;
        }
        if (!S.isInit) {
            break;
        }
    }
    return NULL;
}

void struct Scheduler::init(unsigned int threadCount) {
    if (S.isInit) {
        fprintf(stderr, "Error: cannot create scheudler repeatedly.\n");
        exit(EXIT_FAILURE);
    }
    S = (struct Scheduler){.threadCount = threadCount + 1};
    S.globalQueue = (struct Queue<void *> *)malloc(sizeof(struct Queue<void *>));
    S.globalQueue->init(128);
    S.threads = malloc(sizeof(struct ThreadContext *) * (threadCount + 1));
    if (S.threads == NULL) {
        fprintf(stderr, "Error: memory alloc failed\n");
        exit(EXIT_FAILURE);
    }
    g_mainThread = malloc(sizeof(struct ThreadContext));
    g_taskCount = 0;


    if (g_mainThread == NULL) {
        fprintf(stderr, "Error: main thread memory alloc failed\n");
        exit(EXIT_FAILURE);
    }
    g_mainThread->id = 0;
    g_mainThread->pid = getpid();
    g_curCtx = g_mainThread;
    S.threads[0] = g_mainThread;
    S.isInit = true;

    unsigned int i;
    for (i = 1; i <= threadCount; i++) {
        struct ThreadContext *thread = malloc(sizeof(struct ThreadContext));
        if (thread == NULL) {
            fprintf(stderr, "Error: memory alloc failed\n");
            exit(EXIT_FAILURE);
        }
        thread->id = i;
        thread->localQueue.init(128);
        S.threads[i] = thread;
        pthread_t pid;
        int res = pthread_create(&pid, NULL, schedule, (void *)thread);
        thread->pid = pid;
        if (res != 0) {
            fprintf(stderr, "Error: create thread failed\n");
            exit(EXIT_FAILURE);
        }
    }
}

void struct Scheduler::run() {
    if (!S.isInit) {
        fprintf(stderr, "Error: please initialize the scheduler before run.\n");
        exit(EXIT_FAILURE);
    }
    schedule(g_mainThread);
}

struct Task *struct Scheduler::spawn(trait Future<struct Void> *future) {
    clock_t start, end;
    start = read_tsc();
    if (!S.isInit) {
        fprintf(stderr, "Error: please initialize the scheduler before spawn.\n");
        exit(EXIT_FAILURE);
    }
    struct Task *t = malloc(sizeof(struct Task));
    if (t == NULL) {
        fprintf(stderr, "Error: malloc alloc failed\n");
        exit(EXIT_FAILURE);
    }
    t->future = future;
    t->state = READY;
    end = read_tsc();
    g_noise.createTaskCost = end - start;
    g_noise.createTaskCount++;

    int index = findQueue();
    if (index == 0) {
        S.globalQueue->push(t);
    } else {
        S.threads[index]->localQueue.push(t);
    }
    taskAddOne();
    return t;
}

void struct Scheduler::destroy() {
    unsigned int i;
    S.isInit = false;
    if (S.globalQueue != NULL) {
        S.globalQueue->destroy();
        free(S.globalQueue);
        S.globalQueue = NULL;
    }
    for (i = 0; i < S.threadCount; i++) {
        if (i != 0)
            S.threads[i]->localQueue.destroy();
        if (S.threads[i] != NULL) {
            free(S.threads[i]);
            S.threads[i] = NULL;
        }
    }
    if (S.threads != NULL) {
        free(S.threads);
        S.threads = NULL;
    }
}