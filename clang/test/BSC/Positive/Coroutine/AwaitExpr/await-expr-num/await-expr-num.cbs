// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %S/../../../../../../lib/Headers/bsc_include/future.hbs -o %T/future.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include "future.hbs"
#include <stdlib.h>

async int read(int a) {
  return 0;
}

struct _Futuretest2 {
    int a;
    int res;
    int __future_state;
};
typedef struct _Futuretest2 __Futuretest2;

struct PollResult<int> struct _Futuretest2::poll(__Futuretest2 *this)     {
    struct PollResult<int> poll_result;
    switch (this->__future_state) {
      case 0:
        goto L0;
    }
  L0:
    this->res = this->a;
    this->__future_state = -1;
    return struct PollResult<int>::completed(this->res);
}

void struct _Futuretest2::free(struct _Futuretest2 *this) {}

impl trait Future<int> for struct _Futuretest2;

trait Future<int>* test2(int a)     {
  struct _Futuretest2* ptr = malloc(sizeof(struct _Futuretest2));
  ptr->a = a;
  ptr->__future_state = 0;
  return ptr;
}

async int f(int start) {
  int result = await read(2);
  if (start < 20)
    start = await test2(1);
  return result + start;
}

int main() {
  trait Future<int>* this = f(1);
  this->poll();
  return 0;
}
