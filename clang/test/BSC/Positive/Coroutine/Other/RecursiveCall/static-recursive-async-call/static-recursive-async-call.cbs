// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %S/../../../../../../../lib/Headers/bsc_include/future.hbs -o %T/future.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include "future.hbs"
#include <stdlib.h>

static async int f(int n) {
  if (n == 0 || n == 1)
    return 1;
  int tmp = await f(n-1);
  return n * tmp;
}

int main() {
  trait Future<int>* this = f(3);
  this->poll();
  this->free();
  return 0;
}

// CHECK:struct _Futuref {
// CHECK-NEXT:      int n;
// CHECK-NEXT:      int tmp;
// CHECK-NEXT:      struct _Futuref *Ft_1;
// CHECK-NEXT:      int __future_state;
// CHECK-NEXT:  };

// CHECK:struct _Futuref *__f(int n) {
// CHECK-NEXT:      struct _Futuref *data = calloc(1, sizeof(struct _Futuref));
// CHECK-NEXT:      if (data == 0) {
// CHECK-NEXT:          exit(1);
// CHECK-NEXT:      }
// CHECK-NEXT:      data->n = n;
// CHECK-NEXT:      data->__future_state = 0;
// CHECK-NEXT:      return data;
// CHECK-NEXT:  }

// CHECK: void struct__Futuref_free(struct _Futuref *this) {
// CHECK-NEXT:      if (this->Ft_1 != 0) {
// CHECK-NEXT:          struct__Futuref_free((void *)this->Ft_1);
// CHECK-NEXT:          this->Ft_1 = (struct _Futuref *)(void *)0;
// CHECK-NEXT:      }
// CHECK-NEXT:      if (this != 0) {
// CHECK-NEXT:          free((void *)this);
// CHECK-NEXT:          this = (struct _Futuref *)(void *)0;
// CHECK-NEXT:      }
// CHECK-NEXT:  }

// CHECK:struct PollResult_int struct__Futuref_poll(struct _Futuref *this) {
// CHECK-NEXT:      switch (this->__future_state) {
// CHECK-NEXT:        case 0:
// CHECK-NEXT:          goto __L0;
// CHECK-NEXT:        case 1:
// CHECK-NEXT:          goto __L1;
// CHECK-NEXT:      }
// CHECK-NEXT:    __L0:
// CHECK-NEXT:      ;
// CHECK-NEXT:      if (this->n == 0 || this->n == 1) {
// CHECK-NEXT:          {
// CHECK-NEXT:          this->__future_state = -1;
// CHECK-NEXT:          int __RES_RETURN = 1;
// CHECK-NEXT:          return struct_PollResult_int_completed(__RES_RETURN);
// CHECK-NEXT:          }
// CHECK-NEXT:      }
// CHECK-NEXT:      this->Ft_1 = __f(this->n - 1);
// CHECK-NEXT:    __L1:
// CHECK-NEXT:      ;
// CHECK-NEXT:      int Res_1;
// CHECK-NEXT:      struct PollResult_int PR_1 = struct__Futuref_poll(this->Ft_1);
// CHECK-NEXT:      if (struct_PollResult_int_is_completed(&PR_1, &Res_1)) {
// CHECK-NEXT:          {
// CHECK-NEXT:              struct__Futuref_free(this->Ft_1);
// CHECK-NEXT:              this->Ft_1 = (struct _Futuref *)0;
// CHECK-NEXT:          }
// CHECK-NEXT:      } else {
// CHECK-NEXT:          this->__future_state = 1;
// CHECK-NEXT:          return struct_PollResult_int_pending();
// CHECK-NEXT:      }
// CHECK-NEXT:      this->tmp = Res_1;
// CHECK-NEXT:      {
// CHECK-NEXT:      this->__future_state = -1;
// CHECK-NEXT:      int __RES_RETURN_1 = this->n * this->tmp;
// CHECK-NEXT:      return struct_PollResult_int_completed(__RES_RETURN_1);
// CHECK-NEXT:      }
// CHECK-NEXT:  }
