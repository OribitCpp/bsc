// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include "future.hbs"
#include <stdlib.h>

async int read(int a) {
  return 0;
}

async int f(int n) {
  int tmp1 = await read(n-1);
  int tmp2 = await read(n);
  return tmp2 + tmp1 + 42;
}

int main() {
  trait Future<int>* this = f(3);
  this->poll();
  this->free();
  return 0;
}

// CHECK-DAG:  struct __Trait_Future_Vtable_int {
// CHECK-DAG:    struct PollResult_int (*poll)(void *);
// CHECK-DAG:    void (*free)(void *);
// CHECK-DAG:  };

// CHECK-DAG:  struct PollResult_int {
// CHECK-DAG:    _Bool isPending;
// CHECK-DAG:    int res;
// CHECK-DAG:  };

// CHECK-DAG:  struct __Trait_Future_int {
// CHECK-DAG:    void *data;
// CHECK-DAG:    struct __Trait_Future_Vtable_int *vtable;
// CHECK-DAG:  };

// CHECK-DAG:  struct _Futureread {
// CHECK-DAG:   int a;
// CHECK-DAG:   int __future_state;
// CHECK-DAG: };

// CHECK-DAG:  struct _Futuref {
// CHECK-DAG:    int n;
// CHECK-DAG:    int tmp1;
// CHECK-DAG:    int tmp2;
// CHECK-DAG:    struct _Futureread *Ft_1;
// CHECK-DAG:    struct _Futureread *Ft_2;
// CHECK-DAG:    int __future_state;
// CHECK-DAG:  };

// CHECK:      static struct PollResult_int struct_PollResult_int_pending(void);
// CHECK-EMPTY:
// CHECK-NEXT: static _Bool struct_PollResult_int_is_completed(struct PollResult_int *this, int *out);
// CHECK-EMPTY:
// CHECK-NEXT: static struct PollResult_int struct_PollResult_int_completed(int result);
// CHECK-EMPTY:
// CHECK-NEXT: struct _Futureread *__read(int a);
// CHECK-EMPTY:
// CHECK-NEXT: struct _Futureread *__read(int a) {
// CHECK-NEXT:     struct _Futureread *data = calloc(1, sizeof(struct _Futureread));
// CHECK-NEXT:   if (data == 0) {
// CHECK-NEXT:         exit(1);
// CHECK-NEXT:     }
// CHECK-NEXT:     data->a = a;
// CHECK-NEXT:     data->__future_state = 0;
// CHECK-NEXT:     return data;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: void struct__Futureread_free(struct _Futureread *this) {
// CHECK-NEXT:     if (this != 0) {
// CHECK-NEXT:         free((void *)this);
// CHECK-NEXT:         this = (struct _Futureread *)(void *)0;
// CHECK-NEXT:     }
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct PollResult_int struct__Futureread_poll(struct _Futureread *this) {
// CHECK-NEXT:     switch (this->__future_state) {
// CHECK-NEXT:       case 0:
// CHECK-NEXT:         goto __L0;
// CHECK-NEXT:     }
// CHECK-NEXT:   __L0:
// CHECK-NEXT:     ;
// CHECK-NEXT:     {
// CHECK-NEXT:         this->__future_state = -1;
// CHECK-NEXT:         int __RES_RETURN = 0;
// CHECK-NEXT:         return struct_PollResult_int_completed(__RES_RETURN);
// CHECK-NEXT:     }
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_Vtable_int __struct__Futureread_trait_Future = {.poll = (struct PollResult_int (*)(void *))struct__Futureread_poll, .free = (void (*)(void *))struct__Futureread_free};
// CHECK-EMPTY:
// CHECK-NEXT: struct _Futuref *__f(int n);
// CHECK-EMPTY:
// CHECK-NEXT: struct _Futuref *__f(int n) {
// CHECK-NEXT:     struct _Futuref *data = calloc(1, sizeof(struct _Futuref));
// CHECK-NEXT:     if (data == 0) {
// CHECK-NEXT:         exit(1);
// CHECK-NEXT:     }
// CHECK-NEXT:     data->n = n;
// CHECK-NEXT:     data->__future_state = 0;
// CHECK-NEXT:     return data;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: void struct__Futuref_free(struct _Futuref *this) {
// CHECK-NEXT:      if (this->Ft_2 != 0) {
// CHECK-NEXT:          struct__Futureread_free((void *)this->Ft_2);
// CHECK-NEXT:          this->Ft_2 = (struct _Futureread *)(void *)0;
// CHECK-NEXT:      }
// CHECK-NEXT:      if (this->Ft_1 != 0) {
// CHECK-NEXT:          struct__Futureread_free((void *)this->Ft_1);
// CHECK-NEXT:          this->Ft_1 = (struct _Futureread *)(void *)0;
// CHECK-NEXT:      }
// CHECK-NEXT:      if (this != 0) {
// CHECK-NEXT:          free((void *)this);
// CHECK-NEXT:          this = (struct _Futuref *)(void *)0;
// CHECK-NEXT:      }
// CHECK-NEXT:  }
// CHECK-EMPTY:
// CHECK-NEXT: struct PollResult_int struct__Futuref_poll(struct _Futuref *this) {
// CHECK-NEXT:     switch (this->__future_state) {
// CHECK-NEXT:       case 0:
// CHECK-NEXT:         goto __L0;
// CHECK-NEXT:       case 1:
// CHECK-NEXT:         goto __L1;
// CHECK-NEXT:       case 2:
// CHECK-NEXT:         goto __L2;
// CHECK-NEXT:     }
// CHECK-NEXT:   __L0:
// CHECK-NEXT:     ;
// CHECK-NEXT:     this->Ft_1 = __read(this->n - 1);
// CHECK-NEXT:   __L1:
// CHECK-NEXT:     ;
// CHECK-NEXT:     int Res_1;
// CHECK-NEXT:     struct PollResult_int PR_1 = struct__Futureread_poll(this->Ft_1);
// CHECK-NEXT:     if (struct_PollResult_int_is_completed(&PR_1, &Res_1)) {
// CHECK-NEXT:         {
// CHECK-NEXT:             struct__Futureread_free(this->Ft_1);
// CHECK-NEXT:             this->Ft_1 = (struct _Futureread *)0;
// CHECK-NEXT:         }
// CHECK-NEXT:     } else {
// CHECK-NEXT:         this->__future_state = 1;
// CHECK-NEXT:         return struct_PollResult_int_pending();
// CHECK-NEXT:     }
// CHECK-NEXT:     this->tmp1 = Res_1;
// CHECK-NEXT:     this->Ft_2 = __read(this->n);
// CHECK-NEXT:   __L2:
// CHECK-NEXT:     ;
// CHECK-NEXT:     int Res_2;
// CHECK-NEXT:     struct PollResult_int PR_2 = struct__Futureread_poll(this->Ft_2);
// CHECK-NEXT:     if (struct_PollResult_int_is_completed(&PR_2, &Res_2)) {
// CHECK-NEXT:         {
// CHECK-NEXT:             struct__Futureread_free(this->Ft_2);
// CHECK-NEXT:             this->Ft_2 = (struct _Futureread *)0;
// CHECK-NEXT:         }
// CHECK-NEXT:     } else {
// CHECK-NEXT:         this->__future_state = 2;
// CHECK-NEXT:         return struct_PollResult_int_pending();
// CHECK-NEXT:     }
// CHECK-NEXT:     this->tmp2 = Res_2;
// CHECK-NEXT:     {
// CHECK-NEXT:         this->__future_state = -1;
// CHECK-NEXT:         int __RES_RETURN = this->tmp2 + this->tmp1 + 42;
// CHECK-NEXT:         return struct_PollResult_int_completed(__RES_RETURN);
// CHECK-NEXT:     }
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_Vtable_int __struct__Futuref_trait_Future = {.poll = (struct PollResult_int (*)(void *))struct__Futuref_poll, .free = (void (*)(void *))struct__Futuref_free};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct __Trait_Future_int this = {__f(3), &__struct__Futuref_trait_Future};
// CHECK-NEXT:   this.vtable->poll(this.data);
// CHECK-NEXT:   this.vtable->free(this.data);
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static struct PollResult_int struct_PollResult_int_pending(void) {
// CHECK-NEXT:   struct PollResult_int this;
// CHECK-NEXT:   this.isPending = 1;
// CHECK-NEXT:   return this;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static _Bool struct_PollResult_int_is_completed(struct PollResult_int *this, int *out) {
// CHECK-NEXT:   *out = this->res;
// CHECK-NEXT:   return !this->isPending;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static struct PollResult_int struct_PollResult_int_completed(int result) {
// CHECK-NEXT:   struct PollResult_int this;
// CHECK-NEXT:   this.isPending = 0;
// CHECK-NEXT:   this.res = result;
// CHECK-NEXT:   return this;
// CHECK-NEXT: }
