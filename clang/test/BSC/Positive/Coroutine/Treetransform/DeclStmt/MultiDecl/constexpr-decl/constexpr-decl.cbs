// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %S/../../../../../../../../lib/Headers/bsc_include/future.hbs -o %T/future.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include "future.hbs"
#include <stdlib.h>

async int read(int a) {
  return 0;
}

struct Addr
{
    int a;
    char str[10];
};

async int f(int start) {
  constexpr long myLong = 100000L;
  constexpr unsigned int myUnsignedInt = 10U;
  constexpr int myInt = 2;
  static struct Addr addr = {myInt, "hello"};

  int result = await read(myInt);
  return result + 5 + start;
}

int main() {
  trait Future<int>* this = f(1);
  this->poll();
  return 0;
}

// CHECK: struct _Futuref {
// CHECK-NEXT:     int start;
// CHECK-NEXT:     int result;
// CHECK-NEXT:     struct _Futureread *Ft_1;
// CHECK-NEXT:     int __future_state;
// CHECK-NEXT: };

// CHECK: struct PollResult_int struct__Futuref_poll(struct _Futuref *this) {
// CHECK-NEXT:     switch (this->__future_state) {
// CHECK-NEXT:       case 0:
// CHECK-NEXT:         goto __L0;
// CHECK-NEXT:       case 1:
// CHECK-NEXT:         goto __L1;
// CHECK-NEXT:     }
// CHECK-NEXT:   __L0:
// CHECK-NEXT:     ;
// CHECK-NEXT:     long myLong = 100000L;
// CHECK-NEXT:     unsigned int myUnsignedInt = 10U;
// CHECK-NEXT:     int myInt = 2;
// CHECK-NEXT:     static struct Addr addr = {2, "hello"};
// CHECK-NEXT:     this->Ft_1 = __read(2);
// CHECK-NEXT:   __L1:
// CHECK-NEXT:     ;
// CHECK-NEXT:     int Res_1;
// CHECK-NEXT:     struct PollResult_int PR_1 = struct__Futureread_poll(this->Ft_1);
// CHECK-NEXT:     if (struct_PollResult_int_is_completed(&PR_1, &Res_1)) {
// CHECK-NEXT:         {
// CHECK-NEXT:             struct__Futureread_free(this->Ft_1);
// CHECK-NEXT:             this->Ft_1 = (struct _Futureread *)0;
// CHECK-NEXT:         }
// CHECK-NEXT:     } else {
// CHECK-NEXT:         this->__future_state = 1;
// CHECK-NEXT:         return struct_PollResult_int_pending();
// CHECK-NEXT:     }
// CHECK-NEXT:     this->result = Res_1;
// CHECK-NEXT:     {
// CHECK-NEXT:     this->__future_state = -1;
// CHECK-NEXT:     int __RES_RETURN = this->result + 5 + this->start;
// CHECK-NEXT:     return struct_PollResult_int_completed(__RES_RETURN);
// CHECK-NEXT:     }
// CHECK-NEXT: }
