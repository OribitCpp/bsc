// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %S/../../../../../../../../lib/Headers/bsc_include/future.hbs -o %T/future.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include "future.hbs"
#include <stdlib.h>

async int read(int a) {
  return 0;
}

struct Addr {
    int a;
};

async int f() {
  int a;
  float b;
  char c;
  char *p;
  float f[10];
  struct Addr addr[10];
  a = 1;
  int cc[10][3] = {0};
  int n[10];
  for (int i=0; i<10; i++) {
    n[i] = i + 100;
  }
  int x = await read(2);
  return 42;
}

int main() {
  trait Future<int>* this = f();
  this->poll();
  return 0;
}

// CHECK:struct _Futuref {
// CHECK-NEXT:      int a;
// CHECK-NEXT:      float b;
// CHECK-NEXT:      char c;
// CHECK-NEXT:      char *p;
// CHECK-NEXT:      float f[10];
// CHECK-NEXT:      struct Addr addr[10];
// CHECK-NEXT:      int cc[10][3];
// CHECK-NEXT:      int n[10];
// CHECK-NEXT:      int i;
// CHECK-NEXT:      int x;
// CHECK-NEXT:      struct _Futureread *Ft_1;
// CHECK-NEXT:      int __future_state;
// CHECK-NEXT:  };

// CHECK:struct PollResult_int struct__Futuref_poll(struct _Futuref *this) {
// CHECK-NEXT:      switch (this->__future_state) {
// CHECK-NEXT:        case 0:
// CHECK-NEXT:          goto __L0;
// CHECK-NEXT:        case 1:
// CHECK-NEXT:          goto __L1;
// CHECK-NEXT:      }
// CHECK-NEXT:    __L0:
// CHECK-NEXT:      ;
// CHECK-NEXT:      int a;
// CHECK-NEXT:      float b;
// CHECK-NEXT:      char c;
// CHECK-NEXT:      char *p;
// CHECK-NEXT:      float f[10];
// CHECK-NEXT:      struct Addr addr[10];
// CHECK-NEXT:      this->a = 1;
// CHECK-NEXT:      int cc[10][3] = {0};
// CHECK-NEXT:      int *__ASSIGNED_ARRAY_PTR_int = (int *)cc;
// CHECK-NEXT:      int *__ARRAY_PTR_int = (int *)this->cc;
// CHECK-NEXT:      for (int I = 0; I < 30; ++I) {
// CHECK-NEXT:          *__ARRAY_PTR_int++ = *__ASSIGNED_ARRAY_PTR_int++;
// CHECK-NEXT:      }
// CHECK-NEXT:      __ARRAY_PTR_int = /*implicit*/(int *)0;
// CHECK-NEXT:      int n[10];
// CHECK-NEXT:      for (this->i = 0; this->i < 10; this->i++) {
// CHECK-NEXT:          this->n[this->i] = this->i + 100;
// CHECK-NEXT:      }
// CHECK-NEXT:      this->Ft_1 = __read(2);
// CHECK-NEXT:    __L1:
// CHECK-NEXT:      ;
// CHECK-NEXT:      int Res_1;
// CHECK-NEXT:      struct PollResult_int PR_1 = struct__Futureread_poll(this->Ft_1);
// CHECK-NEXT:      if (struct_PollResult_int_is_completed(&PR_1, &Res_1)) {
// CHECK-NEXT:          {
// CHECK-NEXT:              struct__Futureread_free(this->Ft_1);
// CHECK-NEXT:              this->Ft_1 = (struct _Futureread *)0;
// CHECK-NEXT:          }
// CHECK-NEXT:      } else {
// CHECK-NEXT:          this->__future_state = 1;
// CHECK-NEXT:          return struct_PollResult_int_pending();
// CHECK-NEXT:      }
// CHECK-NEXT:      this->x = Res_1;
// CHECK-NEXT:      {
// CHECK-NEXT:      this->__future_state = -1;
// CHECK-NEXT:      int __RES_RETURN = 42;
// CHECK-NEXT:      return struct_PollResult_int_completed(__RES_RETURN);
// CHECK-NEXT:      }
// CHECK-NEXT:  }
