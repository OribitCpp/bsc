// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

// custom type + ordinary type
struct E
{
    int a;
};

__attribute__((operator +))
int opratorAnd1(struct E f1, int b){
    return f1.a + b;
}

int genericAnd1<T>(T a, int b) {
    return a + b;
}

int test1(){
    struct E f1 = {8};
    if ((f1 + 2) != 10) {
        return -1;
    }
    if (genericAnd1(f1, 2) != 10) {
        return -1;
    }
    return 0;
}

// custom type + custom type
struct F
{
    int a;
};

__attribute__((operator +))
int opratorAnd2(struct F f1, struct F f2){
    return f1.a + f2.a;
}

int genericAnd2<T>(T a, T b) {
    return a + b;
}

int test2(){
    struct F f1 = {8};
    struct F f2 = {2};
    if ((f1 + f2) != 10) {
        return -1;
    }
    if (genericAnd2(f1, f2) != 10) {
        return -1;
    }
    return 0;
}

// custom type a + custom type b
__attribute__((operator +))
int opratorAnd3(struct E f1, struct F f2){
    return f1.a + f2.a;
}

int genericAnd3<T, P>(T a, P b) {
    return a + b;
}

int test3(){
    struct E f1 = {8};
    struct F f2 = {2};
    if ((f1 + f2) != 10) {
        return -1;
    }
    if (genericAnd3(f1, f2) != 10) {
        return -1;
    }
    return 0;
}

// unary
__attribute__((operator +))
int opratorAnd4(struct E f1){
    return f1.a;
}

int genericAnd4<T>(T a) {
    return +a;
}

int test4(){
    struct E f1 = {8};
    if ((+f1) != 8) {
        return -1;
    }
    if (genericAnd4(f1) != 8) {
        return -1;
    }
    return 0;
}

int main(){
    if (test1()) {
        return -1;
    }
    if (test2()) {
        return -1;
    }
    if (test3()) {
        return -1;
    }
    if (test4()) {
        return -1;
    }
    return 0;
}

// CHECK:      struct E;
// CHECK-NEXT: struct F;
// CHECK-NEXT: struct E
// CHECK-NEXT: {
// CHECK-NEXT:     int a;
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      struct F
// CHECK-NEXT: {
// CHECK-NEXT:     int a;
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      static int genericAnd1_struct_E(struct E a, int b);
// CHECK-EMPTY: 
// CHECK:      static int genericAnd2_struct_F(struct F a, struct F b);
// CHECK-EMPTY: 
// CHECK:      static int genericAnd3_struct_E_struct_F(struct E a, struct F b);
// CHECK-EMPTY: 
// CHECK:      static int genericAnd4_struct_E(struct E a);
// CHECK-EMPTY: 
// CHECK:      int opratorAnd1(struct E f1, int b) {
// CHECK-NEXT:     return f1.a + b;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int test1(void) {
// CHECK-NEXT:     struct E f1 = {8};
// CHECK-NEXT:     if ((opratorAnd1(f1, 2)) != 10) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd1_struct_E(f1, 2) != 10) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int opratorAnd2(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a + f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int test2(void) {
// CHECK-NEXT:     struct F f1 = {8};
// CHECK-NEXT:     struct F f2 = {2};
// CHECK-NEXT:     if ((opratorAnd2(f1, f2)) != 10) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd2_struct_F(f1, f2) != 10) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int opratorAnd3(struct E f1, struct F f2) {
// CHECK-NEXT:     return f1.a + f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int test3(void) {
// CHECK-NEXT:     struct E f1 = {8};
// CHECK-NEXT:     struct F f2 = {2};
// CHECK-NEXT:     if ((opratorAnd3(f1, f2)) != 10) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd3_struct_E_struct_F(f1, f2) != 10) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int opratorAnd4(struct E f1) {
// CHECK-NEXT:     return f1.a;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int test4(void) {
// CHECK-NEXT:     struct E f1 = {8};
// CHECK-NEXT:     if ((opratorAnd4(f1)) != 8) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd4_struct_E(f1) != 8) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      int main(){
// CHECK-NEXT:     if (test1()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (test2()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (test3()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (test4()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      static int genericAnd1_struct_E(struct E a, int b) {
// CHECK-NEXT:     return opratorAnd1(a, b);
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      static int genericAnd2_struct_F(struct F a, struct F b) {
// CHECK-NEXT:     return opratorAnd2(a, b);
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      static int genericAnd3_struct_E_struct_F(struct E a, struct F b) {
// CHECK-NEXT:     return opratorAnd3(a, b);
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      static int genericAnd4_struct_E(struct E a) {
// CHECK-NEXT:     return opratorAnd4(a);
// CHECK-NEXT: }
// CHECK-EMPTY: 
