// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

// custom type + ordinary type
struct E
{
    int a;
};

__attribute__((operator <))
_Bool opratorAnd1(struct E f1, int b){
    return f1.a < b;
}

_Bool genericAnd1<T>(T a, int b) {
    return a < b;
}

int test1(){
    struct E f1 = {1};
    if ((f1 < 2) != 1) {
        return -1;
    }
    if (genericAnd1(f1, 2) != 1) {
        return -1;
    }
    return 0;
}

// custom type + custom type
struct F
{
    int a;
};

__attribute__((operator <))
_Bool opratorAnd2(struct F f1, struct F f2){
    return f1.a < f2.a;
}
__attribute__((operator <=))
_Bool opratorAnd3(struct F f1, struct F f2){
    return f1.a <= f2.a;
}
__attribute__((operator >))
_Bool opratorAnd4(struct F f1, struct F f2){
    return f1.a > f2.a;
}
__attribute__((operator >=))
_Bool opratorAnd5(struct F f1, struct F f2){
    return f1.a >= f2.a;
}
__attribute__((operator ==))
_Bool opratorAnd6(struct F f1, struct F f2){
    return f1.a == f2.a;
}
__attribute__((operator !=))
_Bool opratorAnd7(struct F f1, struct F f2){
    return f1.a != f2.a;
}
_Bool genericAnd2<T>(T a, T b) {
    return a < b;
}

int test2(){
    struct F f1 = {1};
    struct F f2 = {2};
    if ((f1 < f2) != 1) {
        return -1;
    }
    if ((f1 <= f2) != 1) {
        return -1;
    }
    if ((f1 > f2) != 0) {
        return -1;
    }
    if ((f1 >= f2) != 0) {
        return -1;
    }
    if ((f1 == f2) != 0) {
        return -1;
    }
    if ((f1 != f2) != 1) {
        return -1;
    }
    if (genericAnd2(f1, f2) != 1) {
        return -1;
    }
    return 0;
}

// custom type a + custom type b
__attribute__((operator <))
_Bool opratorAnd8(struct E f1, struct F f2){
    return f1.a < f2.a;
}

_Bool genericAnd8<T, P>(T a, P b) {
    return a < b;
}

int test3(){
    struct E f1 = {1};
    struct F f2 = {2};
    if ((f1 < f2) != 1) {
        return -1;
    }
    if (genericAnd8(f1, f2) != 1) {
        return -1;
    }
    return 0;
}

typedef enum ase_status {
  ASE_OK = 0,
  ASE_ERROR = -1,
}ASE_STATUS;

int test4() {
  enum ase_status ret = 0;
  if (ret != ASE_OK) {
    return -1;
  }
  return 0;
}

int main(){
    if (test1()) {
        return -1;
    }
    if (test2()) {
        return -1;
    }
    if (test3()) {
        return -1;
    }
    if (test4()) {
        return -1;
    }
    return 0;
}

// CHECK:      struct E;
// CHECK:      struct F;
// CHECK:      enum ase_status {
// CHECK-NEXT:   ASE_OK = 0,
// CHECK-NEXT:   ASE_ERROR = -1,
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK:      typedef enum ase_status ASE_STATUS;
// CHECK-EMPTY:
// CHECK:      struct E
// CHECK-NEXT: {
// CHECK-NEXT:     int a;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK:      struct F
// CHECK-NEXT: {
// CHECK-NEXT:     int a;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK:      static _Bool genericAnd1_struct_E(struct E a, int b);
// CHECK-EMPTY:
// CHECK:      static _Bool genericAnd2_struct_F(struct F a, struct F b);
// CHECK-EMPTY:
// CHECK:      static _Bool genericAnd8_struct_E_struct_F(struct E a, struct F b);
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd1(struct E f1, int b) {
// CHECK-NEXT:     return f1.a < b;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      int test1(void) {
// CHECK-NEXT:     struct E f1 = {1};
// CHECK-NEXT:     if ((opratorAnd1(f1, 2)) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd1_struct_E(f1, 2) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd2(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a < f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd3(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a <= f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd4(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a > f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd5(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a >= f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd6(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a == f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd7(struct F f1, struct F f2) {
// CHECK-NEXT:     return f1.a != f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      int test2(void) {
// CHECK-NEXT:     struct F f1 = {1};
// CHECK-NEXT:     struct F f2 = {2};
// CHECK-NEXT:     if ((opratorAnd2(f1, f2)) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if ((opratorAnd3(f1, f2)) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if ((opratorAnd4(f1, f2)) != 0) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if ((opratorAnd5(f1, f2)) != 0) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if ((opratorAnd6(f1, f2)) != 0) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if ((opratorAnd7(f1, f2)) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd2_struct_F(f1, f2) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      _Bool opratorAnd8(struct E f1, struct F f2) {
// CHECK-NEXT:     return f1.a < f2.a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      int test3(void) {
// CHECK-NEXT:     struct E f1 = {1};
// CHECK-NEXT:     struct F f2 = {2};
// CHECK-NEXT:     if ((opratorAnd8(f1, f2)) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (genericAnd8_struct_E_struct_F(f1, f2) != 1) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      int test4() {
// CHECK-NEXT:   enum ase_status ret = 0;
// CHECK-NEXT:   if (ret != ASE_OK) {
// CHECK-NEXT:     return -1;
// CHECK-NEXT:   }
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      int main(){
// CHECK-NEXT:     if (test1()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (test2()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (test3()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     if (test4()) {
// CHECK-NEXT:         return -1;
// CHECK-NEXT:     }
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      static _Bool genericAnd1_struct_E(struct E a, int b) {
// CHECK-NEXT:     return opratorAnd1(a, b);
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      static _Bool genericAnd2_struct_F(struct F a, struct F b) {
// CHECK-NEXT:     return opratorAnd2(a, b);
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK:      static _Bool genericAnd8_struct_E_struct_F(struct E a, struct F b) {
// CHECK-NEXT:     return opratorAnd8(a, b);
// CHECK-NEXT: }
