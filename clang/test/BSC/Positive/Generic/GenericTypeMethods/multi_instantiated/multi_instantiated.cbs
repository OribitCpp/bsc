// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

struct MyStruct<T> {
  int isPending;
  T res;
};

struct MyStruct<int> foo(struct MyStruct<int> *a) {
  return *a;
}

int struct MyStruct<T>::bar(struct MyStruct<T> *this, int a) {
  return a;
}

int f() {
  struct MyStruct<int> p;
  int res1 = p.bar(10);
  int res2 = struct MyStruct<int>::bar(&p, 12);
  return res1 + res2;  
}

int struct MyStruct<T>::poll(struct MyStruct<T> *this, int a) {
  return a;
}

int main() {
  struct MyStruct<int> p;
  int res1 = p.poll(10);
  int res2 = struct MyStruct<int>::poll(&p, 12);
  int res3 = f();
  return res1 + res2 - res3;  
}

// CHECK:      struct MyStruct_int {
// CHECK-NEXT:   int isPending;
// CHECK-NEXT:   int res;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_bar(struct MyStruct_int *this, int a);
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_poll(struct MyStruct_int *this, int a);
// CHECK-EMPTY:
// CHECK-NEXT: struct MyStruct_int foo(struct MyStruct_int *a) {
// CHECK-NEXT:   return *a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int f(void) {
// CHECK-NEXT:   struct MyStruct_int p;
// CHECK-NEXT:   int res1 = struct_MyStruct_int_bar(&p, 10);
// CHECK-NEXT:   int res2 = struct_MyStruct_int_bar(&p, 12);
// CHECK-NEXT:   return res1 + res2;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct MyStruct_int p;
// CHECK-NEXT:   int res1 = struct_MyStruct_int_poll(&p, 10);
// CHECK-NEXT:   int res2 = struct_MyStruct_int_poll(&p, 12);
// CHECK-NEXT:   int res3 = f();
// CHECK-NEXT:   return res1 + res2 - res3;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_bar(struct MyStruct_int *this, int a) {
// CHECK-NEXT:   return a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_poll(struct MyStruct_int *this, int a) {
// CHECK-NEXT:   return a;
// CHECK-NEXT: }