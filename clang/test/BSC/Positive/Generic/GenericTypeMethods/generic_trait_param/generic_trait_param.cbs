// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK-L
// expected-no-diagnostics

trait Future<T> {};

struct A<T> {
};

// CHECK-L: #line 17 "{{.*}}.cbs"
void struct A<T>::foo(struct A<T> *this, trait Future<T> *future) {
}

int main() {
  struct A<void *> s;
  trait Future<void *> *future;
  s.foo(future);
  struct A<void *>::foo(&s, future);
  return 0;
}

// CHECK:      struct A_void_P {
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_void_P {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_Future_Vtable_void_P *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_A_void_P_foo(struct A_void_P *this, struct __Trait_Future_void_P future);
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct A_void_P s;
// CHECK-NEXT:   struct __Trait_Future_void_P future;
// CHECK-NEXT:   struct_A_void_P_foo(&s, future);
// CHECK-NEXT:   struct_A_void_P_foo(&s, future);
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_A_void_P_foo(struct A_void_P *this, struct __Trait_Future_void_P future) {
// CHECK-NEXT: }
