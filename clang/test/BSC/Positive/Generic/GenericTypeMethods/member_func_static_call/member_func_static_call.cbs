// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

struct MyStruct<T>;
struct MyStruct<T>;
struct MyStruct<T> {
  T res;
};

union MyUnion<T> {
  T res;
};

T struct MyStruct<T>::foo(T a) {
  return a;
}

T union MyUnion<T>::foo(T a) {
  return a;
}

int main() {
  int res1 = struct MyStruct<int>::foo(12);
  int res2 = union MyUnion<int>::foo(10);
  return res1 - res2 - 2;
}

// CHECK:      struct MyStruct_int {
// CHECK-NEXT:   int res;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: union MyUnion_int {
// CHECK-NEXT:   int res;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_foo(int a);
// CHECK-EMPTY:
// CHECK-NEXT: static int union_MyUnion_int_foo(int a);
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int res1 = struct_MyStruct_int_foo(12);
// CHECK-NEXT:   int res2 = union_MyUnion_int_foo(10);
// CHECK-NEXT:   return res1 - res2 - 2;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_foo(int a) {
// CHECK-NEXT:   return a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int union_MyUnion_int_foo(int a) {
// CHECK-NEXT:   return a;
// CHECK-NEXT: }