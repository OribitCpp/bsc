// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK-L
// expected-no-diagnostics

struct S<T> {
    T res;
};

struct MyStruct<T> {
    T res;
    struct S<T> s;
};

// CHECK-L: #line 21 "{{.*}}.cbs"
T struct MyStruct<T>::foo(struct MyStruct<T> *this, T a) {
    this->res = a;
    return this->res;
}

// CHECK-L: #line 27 "{{.*}}.cbs"
T f1<T>(T a) {
    struct MyStruct<T> s = {.res = a};
    return struct MyStruct<T>::foo(&s, a);
}

// CHECK-L: #line 33 "{{.*}}.cbs"
T f2<T>(T a) {
    struct MyStruct<T> s = {.res = a};
    return s.foo(a);
}

int main() {
    int res1 = f1<int>(2);
    int res2 = f2<int>(2);
    return res1 - res2;
}

// CHECK:      struct S_int {
// CHECK-NEXT:   int res;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct MyStruct_int {
// CHECK-NEXT:   int res;
// CHECK-NEXT:   struct S_int s;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_foo(struct MyStruct_int *this, int a);
// CHECK-EMPTY:
// CHECK-NEXT: static int f1_int(int a);
// CHECK-EMPTY:
// CHECK-NEXT: static int f2_int(int a);
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int res1 = f1_int(2);
// CHECK-NEXT:   int res2 = f2_int(2);
// CHECK-NEXT:   return res1 - res2;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int struct_MyStruct_int_foo(struct MyStruct_int *this, int a) {
// CHECK-NEXT:   this->res = a;
// CHECK-NEXT:   return this->res;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int f1_int(int a) {
// CHECK-NEXT:   struct MyStruct_int s = {.res = a};
// CHECK-NEXT:   return struct_MyStruct_int_foo(&s, a);
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static int f2_int(int a) {
// CHECK-NEXT:   struct MyStruct_int s = {.res = a};
// CHECK-NEXT:   return struct_MyStruct_int_foo(&s, a);
// CHECK-NEXT: }
