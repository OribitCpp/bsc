// RUN: %clang_cc1 -verify %s
// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

struct S<T> {
  T t;
};
void struct S<T>::f(struct S<T>* this) {}

int main() {
  struct S<int> s1;
  s1.f();
  struct S<double> s2;
  s2.f();

  return 0;
}

// CHECK:      struct S_int {
// CHECK-NEXT:   int t;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct S_double {
// CHECK-NEXT:   double t;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_S_int_f(struct S_int *this);
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_S_double_f(struct S_double *this);
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct S_int s1;
// CHECK-NEXT:   struct_S_int_f(&s1);
// CHECK-NEXT:   struct S_double s2;
// CHECK-NEXT:   struct_S_double_f(&s2);
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_S_int_f(struct S_int *this) {
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_S_double_f(struct S_double *this) {
// CHECK-NEXT: }
