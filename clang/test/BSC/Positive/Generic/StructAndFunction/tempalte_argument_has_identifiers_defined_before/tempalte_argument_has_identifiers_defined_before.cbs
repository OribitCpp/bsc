// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

# include "stdio.h"

struct P<T> {
    T a;
};
void struct P<T>::dump(struct P<T> *this) {
    this->a.dump();
}

struct S {
    int x;
};
void struct S::dump(struct S *this) {
    printf("%d\n", this->x);
}
typedef struct S S1;

struct P<struct S>(*poll1)();
struct P<S1>(*poll2)();

struct Q {
    struct P<struct S>(*poll3)();
    struct P<S1>(*poll4)();
};

enum Day {
    Mon = 1,
    Tue = 2
};
typedef enum Day Day1;

union U {};
typedef union U U1;

void foo<T> (T b) {}

int main() {
    struct S s = {.x = 10};
    S1 s1 = {.x = 5};
    struct P<struct S> p1 = {.a = s};
    struct P<S1> p2 = {.a = s1};
    p1.dump();
    p2.dump();
    
    enum Day day;
    Day1 day1;
    union U u;
    U1 u1;
    struct P<enum Day> p3 = {.a = day};
    struct P<Day1> p4 = {.a = day1};
    struct P<union U> p5 = {.a = u};
    struct P<U1> p6 = {.a = u1};
    
    foo<struct S>(s);
    foo<S1>(s1);
    foo<enum Day>(day);
    foo<Day1>(day1);
    foo<union U>(u);
    foo<U1>(u1);
    
    struct P<struct S>(*poll5)();
    struct P<S1>(*poll6)();
    struct P<enum Day>(*poll7)();
    struct P<Day1>(*poll8)();
    struct P<union U>(*poll9)();
    struct P<U1>(*poll10)();
    
    return 0;
}
