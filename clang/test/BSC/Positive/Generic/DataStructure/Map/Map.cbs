// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdio.h>
#include<stdlib.h>

#define MAP_SIZE 100

struct MapEntry<K, V> {
    K key;
    V value;
};

struct Map<K, V> {
    struct MapEntry<K, V> table[MAP_SIZE];
    int size;
};

void struct Map<K, V>::init(struct Map<K, V> *this) {
    this->size = 0;
}

int struct Map<K, V>::isEmpty(struct Map<K, V> *this) {
    return this->size == 0;
}

int struct Map<K, V>::contain(struct Map<K, V> *this, K key) {
    int index = -1;
    for (int i = 0; i < this->size; i++) {
        if (this->table[i].key == key) {
            index = i;
            break;
        }
    }
    if (index == -1)
        return 0;
    else
        return index + 1;
}

void struct Map<K, V>::put(struct Map<K, V> *this, K key, V value) {
    int index = this->contain(key);
    if (index) {
        this->table[index - 1].key = key;
        this->table[index - 1].value = value;
    } else {
        struct MapEntry<K, V> entry;
        entry.key = key;
        entry.value = value;
        this->table[this->size++] = entry;
    }
}

V struct Map<K, V>::find(struct Map<K, V> *this, K key) {
    int index = this->contain(key);
    if (!index) {
        printf("the key not found in map!\n");
        exit(-1);
    }
    return this->table[index - 1].value;
}

int struct Map<K, V>::count(struct Map<K, V> *this, K key) {
    int index = this->contain(key);
    if (index)
        return 1;
    else
        return 0;
}

void struct Map<K, V>::earse(struct Map<K, V> *this, K key) {
    int index = this->contain(key);
    if (!index) {
        printf("Key not found");
        exit(-1);
    }
    for (int i = index - 1; i < this->size -1; i++)
        this->table[i] = this->table[i + 1];
    this->size--;
}

int main() {
    struct Map<char*, int> m;
    m.init();
    m.put("Jonh", 30);
    m.put("Mary", 18);
    m.put("Lily", 26);
    m.put("Jonh", 20);
    for (int i = 0; i < m.size; i++) {
        printf("name: %s, age: %d\n", m.table[i].key, m.table[i].value);
    }
    m.find("Lily");
    m.earse("Lily");
    for (int i = 0; i < m.size; i++) {
        printf("name: %s, age: %d\n", m.table[i].key, m.table[i].value);
    }
    return 0;
}

