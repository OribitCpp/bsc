// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdio.h>

#define MAX_SIZE 100
struct Stack<T> {
    T data[MAX_SIZE];
    int num;
};

void struct Stack<T>::init(struct Stack<T> *this) {
    this->num = -1;
}

int struct Stack<T>::isEmpty(struct Stack<T> *this) {
    return this->num == -1;
}

int struct Stack<T>::isFull(struct Stack<T> *this) {
    return this->num == MAX_SIZE - 1;
}

void struct Stack<T>::push(struct Stack<T> *this, T value) {
    if (this->isFull()) {
        printf("this stack is full!\n");
        return;
    }
    this->data[++this->num] = value;
}

T struct Stack<T>::pop(struct Stack<T> *this) {
    if (this->isEmpty()) {
        printf("this stack is empty!\n");
        return -1;
    }
    return this->data[this->num--];
}

T struct Stack<T>::top(struct Stack<T> *this) {
    if (this->isEmpty()) {
        printf("this stack is empty!\n");
        return -1;
    }
    return this->data[this->num];
}

T struct Stack<T>::size(struct Stack<T> *this) {
    return this->num + 1;
}


int main() {
    struct Stack<int> s;
    s.init();
    for (int i = 0; i < 10; i++) {
        s.push(i);
    }
    printf("s.top: %d\n", s.top());
    printf("s.size: %d\n", s.size());
    while(!s.isEmpty()) {
        int value = s.pop();
        printf("%d ", value);
    }
    return 0;
}
