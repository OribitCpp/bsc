// RUN: %clang -g %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %S/../../../../../../lib/Headers/bsc_include/bsc_conditional.hbs -o %T/bsc_conditional.h
// RUN: %clang -rewrite-bsc %S/../../../../../../lib/Headers/bsc_include/bsc_type_traits.hbs -o %T/bsc_type_traits.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK-L
// expected-no-diagnostics

#include "bsc_conditional.hbs"
#include "bsc_type_traits.hbs"
#include "stdbool.h"

struct S<int N, T1, T2> {
    conditional<N, T1, T2> a;
};

conditional<5, int, float> foo1(conditional<5, int, float> a) {
    conditional<5, int, float> b = a;
    return b;
}

conditional<0, int, float> foo2(conditional<0, int, float> a) {
    conditional<0, int, float> b = a;
    return b;
}

conditional<N, T1, T2> foo3<int N, T1, T2>(conditional<N, T1, T2> a) {
    conditional<N, T1, T2> b = a;
    return b;
}

conditional<N, T1, T2> struct S<int N, T1, T2>::foo4(This* this) {
    return this->a;
}

constexpr int foo5() { return 5; }
constexpr T foo6<T>() { return 5; }

// CHECK-L: #line 20 "{{.*}}.cbs"
// CHECK-L-NEXT: int foo1(int a) {
// CHECK-L-NEXT:   int b = a;
// CHECK-L-NEXT:   return b;
// CHECK-L-NEXT: }

// CHECK-L: #line 25 "{{.*}}.cbs"
// CHECK-L-NEXT: float foo2(float a) {
// CHECK-L-NEXT:   float b = a;
// CHECK-L-NEXT:   return b;
// CHECK-L-NEXT: }

// CHECK-L: #line 35 "{{.*}}.cbs"
// CHECK-L-NEXT: static int struct_S_5_int_float_foo4(struct S_5_int_float *this) {
// CHECK-L-NEXT:   return this->a;
// CHECK-L-NEXT: }

// CHECK-L: #line 30 "{{.*}}.cbs"
// CHECK-L-NEXT: static int foo3_5_int_float(int a) {
// CHECK-L-NEXT:   int b = a;
// CHECK-L-NEXT:   return b;
// CHECK-L-NEXT: }


int main() {
    _Static_assert(is_same<conditional<5, int, float>, int>() == 1, "types are not the same.");
    _Static_assert(is_same<conditional<-5, int, float>, int>() == 1, "types are not the same.");
    _Static_assert(is_same<conditional<0, int, float>, float>() == 1, "types are not the same.");
    _Static_assert(is_same<conditional<true, int, float>, int>() == 1, "types are not the same.");
    _Static_assert(is_same<conditional<false, int, float>, float>() == 1, "types are not the same.");
    _Static_assert(is_same<conditional<'c', int, float>, int>() == 1, "types are not the same.");
    _Static_assert(is_same<conditional<'\0', int, float>, float>() == 1, "types are not the same.");

    conditional<5, int, float> a = 5;
    conditional<5, int, float> b = foo1(a);
    conditional<5, int, float> c = foo3<5, int, float>(a);
    struct S<5, int, float> s1 = { .a = a };
    s1.foo4();

    conditional<0, int, float> d = 5;
    conditional<0, int, float> e = foo2(d);
    conditional<0, int, float> f = foo3<0, int, float>(d);
    struct S<0, int, float> s2 = { .a = d };
    s2.foo4();
    
    constexpr int g1 = 5;
    constexpr bool g2 = true;
    constexpr char g3 = 'c';
    conditional<g1, int, float> h1 = 5;
    conditional<g2, int, float> h2 = 5;
    conditional<g3, int, float> h3 = 5;
    
    conditional<true, int, float> h4 = 5;
    conditional<false, int, float> h5 = 5;
    conditional<'c', int, float> h6 = 5;
    conditional<'\0', int, float> h7 = 5;

    conditional<foo5(), int, float> k = 5;
    conditional<foo6<int>(), int, float> l = 5;
    return 0;
}