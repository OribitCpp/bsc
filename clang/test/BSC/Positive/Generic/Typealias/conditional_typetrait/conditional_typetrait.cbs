// RUN: %clang %s -g -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %S/../../../../../../lib/Headers/bsc_include/bsc_conditional.hbs -o %T/bsc_conditional.h
// RUN: %clang -rewrite-bsc %S/../../../../../../lib/Headers/bsc_include/bsc_type_traits.hbs -o %T/bsc_type_traits.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include "bsc_conditional.hbs"
#include "bsc_type_traits.hbs"
typedef PointerType<T> = conditional<is_pointer<T>(), T, T*>;
typedef IntType<T> = conditional<is_integral<T>(), T, int>;

struct S<T> {
    PointerType<T> a;
    IntType<T> b;
};

PointerType<T> foo1<T>(PointerType<T> a) {
    return a;
}

IntType<T> foo2<T>(IntType<T> a) {
    return a;
}

PointerType<T> struct S<T>::foo3<T>(This* this) {
    return this->a;
}

IntType<T> struct S<T>::foo4<T>(This* this) {
    return this->b;
}

int main() {
    int a = 5;
    int* p = &a;
    struct S<int> s1;
    struct S<int*> s2;
    struct S<float> s3;

    int* q1 = foo1<int>(p);
    int* q2 = foo1<int*>(p);
    int* q3 = s1.foo3();
    int* q4 = s2.foo3();
    
    int a1 = foo2<int>(a);
    int a2 = foo2<float>(a);
    int a3 = s1.foo4();
    int a4 = s3.foo4();
  
    return 0;
}