// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdlib.h>

typedef struct File{
} FileID;

FileID* owned create() {
  FileID *p = malloc(sizeof(FileID));
  return (FileID* owned)p;
}

FileID* owned consume_and_return(FileID* owned p) {
  return p;
}

safe void safe_free(FileID* owned p) {
  int x = 2;
  if (x > 1) {
    unsafe {free((FileID*)p);}
  } else {
    unsafe {free((FileID*)p);}
  }
}

int main(void) {
  FileID* owned p1 = create();
  FileID* owned p2 = consume_and_return(p1);
  safe_free(p2);
  return 0;
}

// CHECK:      void safe_free(FileID * p) {
// CHECK-NEXT:   int x = 2;
// CHECK-NEXT:   if (x > 1) {
// CHECK-NEXT:     {
// CHECK-NEXT:       free((FileID *)p);
// CHECK-NEXT:     }
// CHECK-NEXT:   } else {
// CHECK-NEXT:     {
// CHECK-NEXT:       free((FileID *)p);
// CHECK-NEXT:     }
// CHECK-NEXT:   }
// CHECK-NEXT: }
