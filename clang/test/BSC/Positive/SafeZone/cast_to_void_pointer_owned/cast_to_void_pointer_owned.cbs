// RUN: %clang %s -o %t.output
// RUN: %t.output
// expected-no-diagnostics

#include <stdlib.h>

safe T *owned safe_malloc<T>(T t) {
  unsafe {
    T *addr = (T *)malloc(sizeof(T));
    if (!addr) {
      addr = &t;
      T* forget = &t;
      *forget = t;
      exit(EXIT_FAILURE);
    } else {
      *addr = t;
    }
    return (T *owned)addr;
  }
}

safe void safe_free(void* owned p) {
  unsafe {
    free((void *)p);
  }
}

safe void cast1(int* owned a) {
  void* owned p = (void* owned)a;
  safe_free(p);
}

struct S {
  int* owned p;
  int* owned q;
};
 
safe void cast2(struct S* owned s) {
  safe_free((void* owned)s->p);
  safe_free((void* owned)s->q);
  safe_free((void* owned)s);
}

int main() {
   int* owned a = safe_malloc(5);
   cast1(a);
   struct S s = { .p = safe_malloc(1), .q = safe_malloc(2) };
   struct S* owned sp = safe_malloc(s);
   cast2(sp);
}