// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %S/../../../../../../lib/Headers/bsc_include/bsc_type_traits.hbs -o %T/bsc_type_traits.h
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics
#include<stdio.h>
#include "bsc_type_traits.hbs"

void foo<T>(T a) {
    if constexpr (is_pointer<T>()) {
        printf("T is pointer\n");
        void* p = (void*) a;
    } else if constexpr (is_struct<T>()) {
        printf("T is a struct\n");
    } else {
        printf("T is a generic case\n");
    }
}

struct S<T> {
    T a;
};
void struct S<T>::foo(This* this) {
    if constexpr (is_pointer<T>()) {
        printf("T is pointer\n");
        void* p = (void*) this->a;
    } else if constexpr (is_struct<T>()) {
        printf("T is a struct\n");
    } else {
        printf("T is a generic case\n");
    }
}

struct G {};

int main() {
    int b = 5;
    struct G g;
    foo<int>(5);
    foo<int*>(&b);
    foo<struct G>(g);

    struct S<int> s1 = {.a = 5};
    struct S<int*> s2 = {.a = &b};
    struct S<struct G> s3 = {.a = g};
    s1.foo();
    s2.foo();
    s3.foo();    
    return 0;
}

// CHECK:static void foo_int(int a) {
// CHECK-NEXT:    if (0)
// CHECK-NEXT:        ;
// CHECK-NEXT:    else if (0)
// CHECK-NEXT:        ;
// CHECK-NEXT:    else {
// CHECK-NEXT:        printf("T is a generic case\n");
// CHECK-NEXT:    }
// CHECK-NEXT:}
// CHECK-EMPTY:
// CHECK-NEXT:static void foo_int_P(int *a) {
// CHECK-NEXT:    if (1) {
// CHECK-NEXT:        printf("T is pointer\n");
// CHECK-NEXT:        void *p = (void *)a;
// CHECK-NEXT:    }
// CHECK-NEXT:}
// CHECK-EMPTY:
// CHECK-NEXT:static void foo_struct_G(struct G a) {
// CHECK-NEXT:    if (0)
// CHECK-NEXT:        ;
// CHECK-NEXT:    else if (1)
// CHECK-NEXT:        printf("T is a struct\n");
// CHECK-NEXT:    }
// CHECK-NEXT:}
// CHECK-EMPTY:
// CHECK-NEXT:static void struct_S_int_foo(struct S_int *this) {
// CHECK-NEXT:    if (0)
// CHECK-NEXT:        ;
// CHECK-NEXT:    else if (0)
// CHECK-NEXT:        ;
// CHECK-NEXT:    else {
// CHECK-NEXT:        printf("T is a generic case\n");
// CHECK-NEXT:    }
// CHECK-NEXT:}
// CHECK-EMPTY:
// CHECK-NEXT:static void struct_S_int_P_foo(struct S_int_P *this) {
// CHECK-NEXT:    if (1) {
// CHECK-NEXT:        printf("T is pointer\n");
// CHECK-NEXT:        void *p = (void *)this->a;
// CHECK-NEXT:    }
// CHECK-NEXT:}
// CHECK-EMPTY:
// CHECK-NEXT:static void struct_S_struct_G_foo(struct S_struct_G *this) {
// CHECK-NEXT:    if (0)
// CHECK-NEXT:        ;
// CHECK-NEXT:    else if (1)
// CHECK-NEXT:        printf("T is a struct\n");
// CHECK-NEXT:    }
// CHECK-NEXT:}
// CHECK-EMPTY:
