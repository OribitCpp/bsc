// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdlib.h>

struct S {
  int a;
  int *borrow p1;
  int *owned p2;
};

void use_mut(int *borrow p) {}

T *owned safe_malloc<T>(T value) {
  T *p = (T *) malloc( sizeof(T) );
  *p = value;
  return (T *owned)p;
}

void free_owned<T>(T *owned p) {
  free( (T *)p );
}

void test1() {
  int *a = (int *)malloc(sizeof(int));
  int *borrow p = &mut *a;
  use_mut(p);
  free(a);
}

void test2(int *a) {
  int *borrow p = &mut *a;
  use_mut(p);
  free(a);
}

void test3(int *borrow p) {
  int *borrow p1 = &mut *p;
  use_mut(p1);
}

void test4(struct S s) {
  int *borrow p3 = &mut s.a;
  use_mut(p3);
  int *borrow p4 = s.p1;
  use_mut(p4);
  int *borrow p5 = &mut *s.p2;
  use_mut(p5); 
  free_owned<int>(s.p2);
}

int main() {
  int local = 5;
  int *a = (int *)malloc(sizeof(int));
  test1();
  test2(a);
  test3(&mut local);
  struct S s = { .a = 5, .p1 = &mut local, .p2 = safe_malloc<int>(5) };
  test4(s);
  return 0;
}