// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdlib.h>

owned struct Option<T> {
public:
  T *owned inner;
  ~Option(This this) {
    free((T *)this.inner);
  }
};

owned struct OptionRefMut<T> {
public:
  T *borrow p;
};

safe OptionRefMut<T> OptionRefMut<T>::Some(T *borrow p) {
  OptionRefMut<T> rm = { .p = p };
  return rm;
};

safe OptionRefMut<T> Option<T>::as_mut_1(Option<T> *borrow this) {
  OptionRefMut<T> r = OptionRefMut<T>::Some(&mut *this->inner);
  return r;
}

safe OptionRefMut<T> Option<T>::as_mut_2(Option<T> *borrow this) {
  return OptionRefMut<T>::Some(&mut *this->inner);
}

int main() {
  Option<int> op = { .inner = (int *owned)malloc(sizeof(int)) };
  OptionRefMut<int> rm1 = op.as_mut_1();
  OptionRefMut<int> rm2 = op.as_mut_2();
  return 0;
}