// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdlib.h>

struct S {
  int *borrow p1;
  const int *borrow p2;
};

struct S struct S::new(int *borrow p1, const int *borrow p2) {
  struct S s = { .p1 = p1, .p2 = p2 };
  return s;
}

void use(struct S s) {}

int main() {
  int a = 5;
  int b = 10;
  int *p1 = &a;
  int *p2 = &b;
  int *owned p3 = (int *owned)malloc(sizeof(int));
  int *owned p4 = (int *owned)malloc(sizeof(int));
  struct S s1 = struct S::new(&mut a, &const b);
  struct S s2 = struct S::new(&mut *p1, &const *p2);
  struct S s3 = struct S::new(&mut *p3, &const *p4);
  use(s1);
  use(s2);
  use(s3);
  s1 = struct S::new(&mut a, &const b);
  s2 = struct S::new(&mut *p1, &const *p2);
  s3 = struct S::new(&mut *p3, &const *p4);
  use(s1);
  use(s2);
  use(s3);
  free((int *)p3);
  free((int *)p4);
  return 0;
}