// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdio.h>

trait Future {
    int poll(This* this);
};

int int::poll(int* this) {
    return *this;
}

impl trait Future for int;

int main() {
    int *c = NULL;
    trait Future *f = NULL, *g = c;
    if (f == g) {
        return 1;
    }
    if (f != g) {
        return 0;
    }
    if (NULL == (trait Future *)f) {
        return 1;
    }
    return 1;
}

// CHECK: struct __Trait_Future_Vtable {
// CHECK-NEXT: int (*poll)(void *);
// CHECK-NEXT: };

// CHECK: struct __Trait_Future {
// CHECK-NEXT: void *data;
// CHECK-NEXT: struct __Trait_Future_Vtable *vtable;
// CHECK-NEXT: };

// CHECK: int int_poll(int *this) {
// CHECK-NEXT: return *this;
// CHECK-NEXT: }

// CHECK: struct __Trait_Future_Vtable __int_trait_Future = {.poll = (int (*)(void *))int_poll};

// CHECK: int main(void) {
// CHECK-NEXT: int *c = ((void *)0);
// CHECK-NEXT: struct __Trait_Future f = {((void *)0), ((void *)0)}, g = {c, &__int_trait_Future};
// CHECK-NEXT: if (f.data == g.data && f.vtable == g.vtable) {
// CHECK-NEXT: return 1;
// CHECK-NEXT: }
// CHECK-NEXT: if (f.data != g.data || f.vtable != g.vtable) {
// CHECK-NEXT: return 0;
// CHECK-NEXT: }
// CHECK-NEXT: if (((void *)0) == f.data) {
// CHECK-NEXT: return 1;
// CHECK-NEXT: }
// CHECK-NEXT: return 1;
// CHECK-NEXT: }