
// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait TR1{
  void f1(This* this);
};

void int::f1(int* this) {}

impl trait TR1 for int;

void baz(trait TR1* tr) {
  tr->f1();
};


int main() {
  int y = 41;
  baz(&y);
  baz((trait TR1*)&y);

  trait TR1* tr1 = (trait TR1*)&y;
  baz(tr1);

  trait TR1* tr2 = &y;
  baz(tr2);

  ((trait TR1*)&y)->f1();
  return 0;
}

// CHECK: struct __Trait_TR1_Vtable {
// CHECK-NEXT:     void (*f1)(void *);
// CHECK-NEXT: };

// CHECK: struct __Trait_TR1 {
// CHECK-NEXT:     void *data;
// CHECK-NEXT:     struct __Trait_TR1_Vtable *vtable;
// CHECK-NEXT: };

// CHECK: void int_f1(int *this) {
// CHECK-NEXT: }

// CHECK: struct __Trait_TR1_Vtable __int_trait_TR1 = {.f1 = (void (*)(void *))int_f1};

// CHECK: void baz(struct __Trait_TR1 tr) {
// CHECK-NEXT:     tr.vtable->f1(tr.data);
// CHECK-NEXT: }

// CHECK: int main(void) {
// CHECK-NEXT:     int y = 41;
// CHECK-NEXT:     baz((struct __Trait_TR1){.data = &y, .vtable = &__int_trait_TR1});
// CHECK-NEXT:     baz((struct __Trait_TR1){.data = &y, .vtable = &__int_trait_TR1});
// CHECK-NEXT:     struct __Trait_TR1 tr1 = {&y, &__int_trait_TR1};
// CHECK-NEXT:     baz(tr1);
// CHECK-NEXT:     struct __Trait_TR1 tr2 = {&y, &__int_trait_TR1};
// CHECK-NEXT:     baz(tr2);
// CHECK-NEXT:     (struct __Trait_TR1){&y, &__int_trait_TR1}.vtable->f1((struct __Trait_TR1){&y, &__int_trait_TR1}.data);
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }