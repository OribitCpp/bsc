// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F {
  int foo(This* this, int a);
};

typedef struct S{
  int x;
}MyS;

int struct S::foo(struct S* this, int a) {
  return this->x + a;
}

impl trait F for MyS;

int main() {
  struct S s; 
  int a = s.foo(1);
  trait F* f = &s;
  return 0;
}

// CHECK:      typedef struct S MyS;
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable {
// CHECK-NEXT:   int (*foo)(void *, int);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_F_Vtable *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Owned {
// CHECK-NEXT:   void * data;
// CHECK-NEXT:   struct __Trait_F_Vtable *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Borrow {
// CHECK-NEXT:   void * data;
// CHECK-NEXT:   struct __Trait_F_Vtable *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct S{
// CHECK-NEXT:   int x;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int struct_S_foo(struct S *this, int a) {
// CHECK-NEXT:   return this->x + a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable __struct_S_trait_F = {.foo = (int (*)(void *, int))struct_S_foo};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct S s;
// CHECK-NEXT:   int a = struct_S_foo(&s, 1);
// CHECK-NEXT:   struct __Trait_F f = {&s, &__struct_S_trait_F};
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }