// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F {
  int foo(This* this);
};

int int::foo(int *this) {
  return 2;
};

impl trait F for int;

int main() {
  int a = 1;
  trait F* f = &a;
  void *p = (void *)f;
  int *q = (int *)f;
  float *r = (float *)f;
  if (p == f && q == f && r == f) {
    return 0;
  } 
  return 1;
}

// CHECK: struct __Trait_F_Vtable {
// CHECK-NEXT: int (*foo)(void *);
// CHECK-NEXT: };
 
// CHECK: struct __Trait_F {
// CHECK-NEXT: void *data;
// CHECK-NEXT: struct __Trait_F_Vtable *vtable;
// CHECK-NEXT: };
 
// CHECK: int int_foo(int *this) {
// CHECK-NEXT: return 2;
// CHECK-NEXT: }

// CHECK: struct __Trait_F_Vtable __int_trait_F = {.foo = (int (*)(void *))int_foo};
 
// CHECK: int main(void) {
// CHECK-NEXT: int a = 1;
// CHECK-NEXT: struct __Trait_F f = {&a, &__int_trait_F};
// CHECK-NEXT: void *p = (void *)f.data;
// CHECK-NEXT: int *q = (int *)f.data;
// CHECK-NEXT: float *r = (float *)f.data;
// CHECK-NEXT: if (p == f.data && q == f.data && r == f.data) {
// CHECK-NEXT: return 0;
// CHECK-NEXT: }
// CHECK-NEXT: return 1;
// CHECK-NEXT: }
