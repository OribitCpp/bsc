// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F {
  int foo(This *this);
};
trait G {};

struct S {};

int struct S::foo(This *this) {
  return 1;
}

impl trait F for struct S;

trait F *f(trait F *a) {
    return a;
}

trait F **f1(trait F **a) {
    return a;
}

trait F ***f2(trait F ***a) {
    return a;
}

struct R {
    trait F* f1;
    trait F** f2;
    trait F*** f3;
};

int main() {
  struct S s;
  trait F *p = &s;

  // assign
  trait F **q = &p;
  trait F **q1 = (trait F **)&p;
  trait F **qq = q;
  trait F **qq1 = (trait F **)q;
  trait F **q2 = (void*)0;
  trait F **tmpq1 = &p, **tmpq2 = &p;
  // ressign
  qq = &p;
  qq = (trait F **)&p;
  qq = q;
  qq = (trait F **)q;
  q2 = (void*)0;
  tmpq1 = &p, tmpq2 = &p;
  // function call
  (*q)->foo();
  // compare with Null
  if ((*q) == (void*)0 || (*q) != (void*)0) {}
  // as parameter
  p = f((*q));
  p->foo();
  (*f1(q))->foo();

  // assign
  trait F ***t = &q;
  trait F ***t1 = (trait F ***)&q;
  trait F ***tt = t;
  trait F ***tt1 = (trait F ***)t;
  trait F ***t2 = (void*)0;
  trait F ***tmpt1 = &q, ***tmpt2 = &q;
  // ressign
  tt = &q;
  tt = (trait F ***)&q;
  tt = t;
  tt = (trait F ***)t;
  t2 = (void*)0;
  tmpt1 = &q, tmpt2 = &q;
  // function call
  (**t)->foo();
  // compare with Null
  if ((**t) == (void*)0 || (**t) != (void*)0) {}
  // as parameter
  p = f((**t));
  p->foo();
  (**f2(t))->foo();

  // trait in struct
  struct R r1 = {.f1 = p, .f2 = q, .f3= t};
  struct R r2 = { p, q, t };
  struct R r3 = { .f1 = (trait F*)p, .f2 = (trait F**)q};
  struct R r4 = { .f2 = (trait F**)&p };
  r1.f3 = &q;
}