// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK --check-prefix=CHECK-L
// expected-no-diagnostics

trait F {
  int foo(This* this, int a);
};
// CHECK: struct __Trait_F_Vtable {
// CHECK-NEXT: int (*foo)(void *, int);
// CHECK-NEXT: };

// CHECK: struct __Trait_F {
// CHECK-NEXT: void *data;
// CHECK-NEXT: struct __Trait_F_Vtable *vtable;
// CHECK-NEXT: };

struct S_1{
  int x;
};

enum S_2{
  x,
};

union S_3{
  int x;
};

// CHECK-L: #line 36 "{{.*}}.cbs"
int struct S_1::foo(struct S_1* this, int a) {
  return this->x + a;
}

impl trait F for struct S_1;
// CHECK: struct __Trait_F_Vtable __struct_S_1_trait_F = {.foo = (int (*)(void *, int))struct_S_1_foo};

// CHECK-L: #line 44 "{{.*}}.cbs"
int enum S_2::foo(enum S_2* this, int a) {
  return *this + a;
}

impl trait F for enum S_2;
// CHECK: struct __Trait_F_Vtable __enum_S_2_trait_F = {.foo = (int (*)(void *, int))enum_S_2_foo};

// CHECK-L: #line 52 "{{.*}}.cbs"
int union S_3::foo(union S_3* this, int a) {
  return this->x + a;
}

impl trait F for union S_3;
// CHECK: struct __Trait_F_Vtable __union_S_3_trait_F = {.foo = (int (*)(void *, int))union_S_3_foo};

// CHECK-L: #line 60 "{{.*}}.cbs"
int int::foo(int* this,int a) {
  return *this + a;
}

impl trait F for int;
// CHECK: struct __Trait_F_Vtable __int_trait_F = {.foo = (int (*)(void *, int))int_foo};

// CHECK-L: #line 68 "{{.*}}.cbs"
int main() {
  struct S_1 s_1 = { .x = 1 };
  trait F* i = &s_1; 

  enum S_2 s_2 = x;
  trait F* j = &s_2; 

  union S_3 s_3 = { .x = 1 };
  trait F* k = &s_3; 

  int s_4 = 1;
  trait F* l = &s_4; 

  return 0;
};
// CHECK: struct S_1 s_1 = {.x = 1};
// CHECK-NEXT: struct __Trait_F i = {&s_1, &__struct_S_1_trait_F};
// CHECK-NEXT: enum S_2 s_2 = x;
// CHECK-NEXT: struct __Trait_F j = {&s_2, &__enum_S_2_trait_F};
// CHECK-NEXT: union S_3 s_3 = {.x = 1};
// CHECK-NEXT: struct __Trait_F k = {&s_3, &__union_S_3_trait_F};
// CHECK-NEXT: int s_4 = 1;
// CHECK-NEXT: struct __Trait_F l = {&s_4, &__int_trait_F};
