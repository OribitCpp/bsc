// RUN: %clang %s -o %t.output
// RUN: %t.output
// expected-no-diagnostics

// Test with serialization:
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -emit-pch -o %t %s
// RUN: %clang_cc1 -x bsc -triple x86_64-unknown-unknown -include-pch %t -ast-dump-all /dev/null \
// RUN: | sed -e "s/ <undeserialized declarations>//" -e "s/ imported//" \
// RUN: | FileCheck --strict-whitespace %s

trait F {
  int foo(This* this, int a);
};
// CHECK: RecordDecl 0x{{[^ ]*}} <{{.*}}:[[@LINE-3]]:1, col:7> col:7 struct __Trait_F_Vtable definition
// CHECK-NEXT: FieldDecl 0x{{[^ ]*}} <line:[[@LINE-3]]:3, col:28> col:28 foo 'int (*)(void *, int)'
// CHECK-NEXT: RecordDecl 0x{{[^ ]*}} <line:[[@LINE-5]]:1, col:7> col:7 struct __Trait_F definition
// CHECK-NEXT: FieldDecl 0x{{[^ ]*}} <col:1, col:7> col:7 data 'void *'
// CHECK-NEXT: FieldDecl 0x{{[^ ]*}} <col:1, col:7> col:7 vtable 'struct __Trait_F_Vtable *

union S_2 {
  int x;
};
// CHECK: RecordDecl 0x{{[^ ]*}} <line:[[@LINE-3]]:1, line:[[@LINE-1]]:1> line:[[@LINE-3]]:7 union S_2 definition
// CHECK-NEXT: FieldDecl 0x{{[^ ]*}} <line:[[@LINE-3]]:3, col:7> col:7 x 'int'

int union S_2::foo(union S_2* this, int a) {
  return a;
}
// CHECK: BSCMethodDecl 0x{{[^ ]*}} parent 0x{{[^ ]*}} <line:[[@LINE-3]]:1, line:[[@LINE-1]]:1> line:[[@LINE-3]]:16 used foo 'int (union S_2 *, int)'
// CHECK-NEXT: ParmVarDecl 0x{{[^ ]*}} <col:20, col:31> col:31 this 'union S_2 *'
// CHECK-NEXT: ParmVarDecl 0x{{[^ ]*}} <col:37, col:41> col:41 used a 'int'
// CHECK-NEXT: CompoundStmt 0x{{[^ ]*}} <col:44, line:[[@LINE-4]]:1>
// CHECK-NEXT: ReturnStmt 0x{{[^ ]*}} <line:[[@LINE-6]]:3, col:10>
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:10> 'int' <LValueToRValue>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:10> 'int' lvalue ParmVar 0x{{[^ ]*}} 'a' 'int'

impl trait F for union S_2;
// CHECK: VarDecl 0x{{[^ ]*}} <line:[[@LINE-1]]:6, col:18> col:18 __union_S_2_trait_F 'struct __Trait_F_Vtable':'struct __Trait_F_Vtable' cinit
// CHECK-NEXT: InitListExpr 0x{{[^ ]*}} <col:6, col:18> 'struct __Trait_F_Vtable'
// CHECK-NEXT: CStyleCastExpr 0x{{[^ ]*}} <col:6> 'int (*)(void *, int)' <BitCast>
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:6> 'int (*)(union S_2 *, int)' <FunctionToPointerDecay> part_of_explicit_cast
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:6> 'int (union S_2 *, int)' lvalue BSCMethod 0x{{[^ ]*}} 'foo' 'int (union S_2 *, int)'

int main() {
  union S_2 s_2;
  int a = s_2.foo(1);
  trait F* f = &s_2;
  return a - 1;
}
// CHECK: FunctionDecl 0x{{[^ ]*}} <line:[[@LINE-6]]:1, line:[[@LINE-1]]:1> line:[[@LINE-6]]:5 main 'int (void)'
// CHECK-NEXT: CompoundStmt 0x{{[^ ]*}} <col:12, line:[[@LINE-2]]:1>
// CHECK-NEXT: DeclStmt 0x{{[^ ]*}} <line:[[@LINE-7]]:3, col:16>
// CHECK-NEXT: VarDecl 0x{{[^ ]*}} <col:3, col:13> col:13 used s_2 'union S_2':'union S_2'
// CHECK-NEXT: DeclStmt 0x{{[^ ]*}} <line:[[@LINE-8]]:3, col:21>
// CHECK-NEXT: VarDecl 0x{{[^ ]*}} <col:3, col:20> col:7 used a 'int' cinit
// CHECK-NEXT: CallExpr 0x{{[^ ]*}} <col:11, col:20> 'int'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:11, col:15> 'int (*)(union S_2 *, int)' <FunctionToPointerDecay>
// CHECK-NEXT: MemberExpr 0x{{[^ ]*}} <col:11, col:15> 'int (union S_2 *, int)' lvalue .foo 0x{{[^ ]*}}
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:11> 'union S_2':'union S_2' lvalue Var 0x{{[^ ]*}} 's_2' 'union S_2':'union S_2'
// CHECK-NEXT: UnaryOperator 0x{{[^ ]*}} <<invalid sloc>, col:11> 'union S_2 *' prefix '&' cannot overflow
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:11> 'union S_2':'union S_2' lvalue Var 0x{{[^ ]*}} 's_2' 'union S_2':'union S_2'
// CHECK-NEXT: IntegerLiteral 0x{{[^ ]*}} <col:19> 'int' 1
// CHECK-NEXT: DeclStmt 0x{{[^ ]*}} <line:[[@LINE-16]]:3, col:12>
// CHECK-NEXT: VarDecl 0x{{[^ ]*}} <col:3, col:12> col:12 f 'struct __Trait_F':'struct __Trait_F' cinit
// CHECK-NEXT: InitListExpr 0x{{[^ ]*}} <col:16, <invalid sloc>> 'struct __Trait_F'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:16, col:17> 'void *' <BitCast>
// CHECK-NEXT: UnaryOperator 0x{{[^ ]*}} <col:16, col:17> 'union S_2 *' prefix '&' cannot overflow
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:17> 'union S_2':'union S_2' lvalue Var 0x{{[^ ]*}} 's_2' 'union S_2':'union S_2'
// CHECK-NEXT: UnaryOperator 0x{{[^ ]*}} <<invalid sloc>> 'struct __Trait_F_Vtable *' prefix '&' cannot overflow
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <<invalid sloc>> 'struct __Trait_F_Vtable':'struct __Trait_F_Vtable' lvalue Var 0x{{[^ ]*}} '__union_S_2_trait_F' 'struct __Trait_F_Vtable':'struct __Trait_F_Vtable'
// CHECK-NEXT: ReturnStmt 0x{{[^ ]*}} <line:[[@LINE-23]]:3, col:14>
// CHECK-NEXT: BinaryOperator 0x{{[^ ]*}} <col:10, col:14> 'int' '-'
// CHECK-NEXT: ImplicitCastExpr 0x{{[^ ]*}} <col:10> 'int' <LValueToRValue>
// CHECK-NEXT: DeclRefExpr 0x{{[^ ]*}} <col:10> 'int' lvalue Var 0x{{[^ ]*}} 'a' 'int'
// CHECK-NEXT: IntegerLiteral 0x{{[^ ]*}} <col:14> 'int' 1
