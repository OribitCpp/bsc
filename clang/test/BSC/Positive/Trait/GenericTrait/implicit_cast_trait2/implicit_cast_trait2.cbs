// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include<stdlib.h>
struct PollResult<T> {
  int c;
};

trait Future<T> {
    T poll(This* this, T a);
};

int int::poll(int* this, int a) {
    return a;
}

impl trait Future<int> for int;

int *get(trait Future<int> *f) {
    int* c = malloc(sizeof(int));
    *c = 3;
    return c;
}

int main() {
    int a = 1;
    trait Future<int>* b = get(&a);
    return b->poll(0);
}

// CHECK:      struct __Trait_Future_Vtable_int {
// CHECK-NEXT:   int (*poll)(void *, int);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_Future_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int int_poll(int *this, int a) {
// CHECK-NEXT:   return a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_Vtable_int __int_trait_Future = {.poll = (int (*)(void *, int))int_poll};
// CHECK-EMPTY:
// CHECK-NEXT: int *get(struct __Trait_Future_int f) {
// CHECK-NEXT:   int *c = malloc(sizeof(int));
// CHECK-NEXT:   *c = 3;
// CHECK-NEXT:   return c;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int a = 1;
// CHECK-NEXT:   struct __Trait_Future_int b = {get((struct __Trait_Future_int){.data = &a, .vtable = &__int_trait_Future}), &__int_trait_Future};
// CHECK-NEXT:   return b.vtable->poll(b.data, 0);
// CHECK-NEXT: }
