// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F<T> {
  T f(This* this);
};

int int::f(int* this) {
  return 1;
}

impl trait F<int> for int;

impl trait F<int> for int; // OK, and useless.

int main() {
  int x = 1;
  trait F<int>* t = &x;
  t->f();
  return 0;
}

// CHECK:      struct __Trait_F_Vtable_int {
// CHECK-NEXT:   int (*f)(void *);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_F_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int int_f(int *this) {
// CHECK-NEXT:   return 1;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_int __int_trait_F = {.f = (int (*)(void *))int_f};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int x = 1;
// CHECK-NEXT:   struct __Trait_F_int t = {&x, &__int_trait_F};
// CHECK-NEXT:   t.vtable->f(t.data);
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }