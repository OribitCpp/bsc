// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F<T> {
  T foo(This* this);
};

int int::foo(int* this) {
  return 0;
}

impl trait F<int> for int;

int main() {
  int a = 1;
  trait F<int>* f = (trait F<int>*)&a;
  return f->foo();
}

// CHECK:      struct __Trait_F_Vtable_int {
// CHECK-NEXT:   int (*foo)(void *);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_F_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int int_foo(int *this) {
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_int __int_trait_F = {.foo = (int (*)(void *))int_foo};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int a = 1;
// CHECK-NEXT:   struct __Trait_F_int f = {&a, &__int_trait_F};
// CHECK-NEXT:   return f.vtable->foo(f.data);
// CHECK-NEXT: }