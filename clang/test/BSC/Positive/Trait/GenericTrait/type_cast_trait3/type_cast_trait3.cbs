// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F<T> {
  T foo(This* this);
};

int int::foo(int* this) {
  return 0;
}

impl trait F<int> for int;

void baz(trait F<int>* f) {
  f->foo();
}

int main() {
  int a = 1;
  baz(&a);
  baz((trait F<int>*)&a);

  trait F<int>* tr1 = (trait F<int>*)&a;
  baz(tr1);

  trait F<int>* tr2 = &a;
  baz(tr2);

  ((trait F<int>*)&a)->foo();

  trait F<int>* f = (trait F<int>*)&a;
  return f->foo();
}

// CHECK:      struct __Trait_F_Vtable_int {
// CHECK-NEXT:   int (*foo)(void *);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_F_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int int_foo(int *this) {
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_int __int_trait_F = {.foo = (int (*)(void *))int_foo};
// CHECK-EMPTY:
// CHECK-NEXT: void baz(struct __Trait_F_int f) {
// CHECK-NEXT:     f.vtable->foo(f.data);
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int a = 1;
// CHECK-NEXT:   baz((struct __Trait_F_int){.data = &a, .vtable = &__int_trait_F});
// CHECK-NEXT:   baz((struct __Trait_F_int){.data = &a, .vtable = &__int_trait_F});
// CHECK-NEXT:   struct __Trait_F_int tr1 = {&a, &__int_trait_F};
// CHECK-NEXT:   baz(tr1);
// CHECK-NEXT:   struct __Trait_F_int tr2 = {&a, &__int_trait_F};
// CHECK-NEXT:   baz(tr2);
// CHECK-NEXT:   (struct __Trait_F_int){&a, &__int_trait_F}.vtable->foo((struct __Trait_F_int){&a, &__int_trait_F}.data);
// CHECK-NEXT:   struct __Trait_F_int f = {&a, &__int_trait_F};
// CHECK-NEXT:   return f.vtable->foo(f.data);
// CHECK-NEXT: }