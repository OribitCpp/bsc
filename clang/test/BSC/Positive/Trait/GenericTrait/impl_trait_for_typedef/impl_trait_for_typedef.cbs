// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F<T> {
  T foo(This* this, int a);
};

typedef struct S{
  int x;
}MyS;

int struct S::foo(struct S* this, int a) {
  return this->x + a;
}

impl trait F<int> for MyS;

int main() {
  struct S s = {1}; 
  int a = s.foo(1);
  trait F<int>* f = &s;
  return a - 2;
}

// CHECK:      typedef struct S MyS;
// CHECK-EMPTY:
// CHECK-NEXT: struct S{
// CHECK-NEXT:   int x;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_int {
// CHECK-NEXT:   int (*foo)(void *, int);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_F_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int struct_S_foo(struct S *this, int a) {
// CHECK-NEXT:   return this->x + a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_int __struct_S_trait_F = {.foo = (int (*)(void *, int))struct_S_foo};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct S s = {1};
// CHECK-NEXT:   int a = struct_S_foo(&s, 1);
// CHECK-NEXT:   struct __Trait_F_int f = {&s, &__struct_S_trait_F};
// CHECK-NEXT:   return a - 2;
// CHECK-NEXT: }