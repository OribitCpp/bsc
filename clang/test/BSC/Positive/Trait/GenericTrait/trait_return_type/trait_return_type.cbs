// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics
#include <limits.h>
#include <float.h>

struct S<T> {
    T a;
};

trait F<T> {};

impl trait F<S<int>> for int;
int g_flag = 1;
static trait F<S<int>>* S<T>::getA(S<T> *this, int a, trait F<S<int>> *t) {
    trait F<S<int>> *p1 = t;
    int* p2 = &a;
    trait F<S<int>> *p3 = p2;
    int* p4 = (int*) p1;
    if (p3 != p2 || p4 != (int*)p1) {
        return p3;
    }
    else if (*p2 != INT_MAX) {
        return p3;
    }
    g_flag = 0;
    return p1;
}

int main() {
    int a = INT_MAX;
    S<int> b;
    b.a = INT_MAX;
    trait F<S<int>> *t = &b.a;
    trait F<S<int>> *r = S<int>::getA(&b, a, t);
    return g_flag;
}

// CHECK: struct S_int {
// CHECK-NEXT:     int a;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_struct_S_int {
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_struct_S_int {
// CHECK-NEXT:     void *data;
// CHECK-NEXT:     struct __Trait_F_Vtable_struct_S_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static struct __Trait_F_struct_S_int struct_S_int_getA(struct S_int *this, int a, struct __Trait_F_struct_S_int t);
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_struct_S_int __int_trait_F = {};
// CHECK-EMPTY:
// CHECK-NEXT: int g_flag = 1;
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:    int a = 2147483647;
// CHECK-NEXT:     struct S_int b;
// CHECK-NEXT:     b.a = 2147483647;
// CHECK-NEXT:     struct __Trait_F_struct_S_int t = {&b.a, &__int_trait_F};
// CHECK-NEXT:     struct __Trait_F_struct_S_int r = struct_S_int_getA(&b, a, t);
// CHECK-NEXT:     return g_flag;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static struct __Trait_F_struct_S_int struct_S_int_getA(struct S_int *this, int a, struct __Trait_F_struct_S_int t) {
// CHECK-NEXT:     struct __Trait_F_struct_S_int p1 = t;
// CHECK-NEXT:     int *p2 = &a;
// CHECK-NEXT:     struct __Trait_F_struct_S_int p3 = {p2, &__int_trait_F};
// CHECK-NEXT:     int *p4 = (int *)p1.data;
// CHECK-NEXT:     if (p3.data != p2 || p4 != (int *)p1.data) {
// CHECK-NEXT:         return p3;
// CHECK-NEXT:     } else if (*p2 != 2147483647) {
// CHECK-NEXT:         return p3;
// CHECK-NEXT:     }
// CHECK-NEXT:     g_flag = 0;
// CHECK-NEXT:     return p1;
// CHECK-NEXT: }