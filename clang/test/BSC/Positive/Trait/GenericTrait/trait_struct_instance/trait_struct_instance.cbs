// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait Future<T> {
    T poll(This* this, T a);
};

struct S {
    int c;
};
struct S int::poll(int* this, struct S a) {
    return a;
}

impl trait Future<struct S> for int;

int main() {
    int m = 0;
    struct S s = {10};
    trait Future<struct S> *a = &m;
    int b = a->poll(s).c;
    return b - 10;
}

// CHECK:      struct S {
// CHECK-NEXT:   int c;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_Vtable_struct_S {
// CHECK-NEXT:   struct S (*poll)(void *, struct S);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_struct_S {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_Future_Vtable_struct_S *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct S int_poll(int *this, struct S a) {
// CHECK-NEXT:   return a;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_Vtable_struct_S __int_trait_Future = {.poll = (struct S (*)(void *, struct S))int_poll};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int m = 0;
// CHECK-NEXT:   struct S s = {10};
// CHECK-NEXT:   struct __Trait_Future_struct_S a = {&m, &__int_trait_Future};
// CHECK-NEXT:   int b = a.vtable->poll(a.data, s).c;
// CHECK-NEXT:   return b - 10;
// CHECK-NEXT: }