// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdio.h>
#include <limits.h>

trait F<T> {
    T foo(This *this, T);
};
typedef long long int LLI;
union U {
    LLI a;
};
union U LLI::foo(LLI* this, union U a) {
    return a;
}
union U int::foo(int* this, union U a) {
    return a;
}

impl trait F<union U> for int;
impl trait F<union U> for LLI;

trait F<T>* get<T>(trait F<T>* t) {
    return t;
}

int main()
{
    int a = INT_MAX;
    union U b;
    b.a = LLONG_MAX;
    trait F<union U> *p1 = &(b.a);
    int* p2 = &a;
    trait F<union U> *p3 = p2;
    trait F<union U>* p4 = (trait F<union U>*) p1;
    union U c = p1->foo(b);
    if (p3 != p2 || p4 != (trait F<union U>*)p1) {
        return 1;
    }
    else if (*p2 != INT_MAX || c.a != LLONG_MAX) {
        return 1;
    }
    return 0;
}
