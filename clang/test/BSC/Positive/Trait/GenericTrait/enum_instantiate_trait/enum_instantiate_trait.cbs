// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdio.h>
#include <limits.h>

trait F<T> {
    T foo(This *this, T);
};
enum Day {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
};
enum Day enum Day::foo(enum Day* this, enum Day a) {
    return a;
}
enum Day int::foo(int* this, enum Day a) {
    return a;
}

impl trait F<enum Day> for int;
impl trait F<enum Day> for enum Day;

trait F<T>* get<T>(trait F<T>* t) {
    return t;
}

int main()
{
    int a = INT_MAX;
    enum Day b = Sunday;
    trait F<enum Day> *p1 = &b;
    int* p2 = &a;
    trait F<enum Day> *p3 = p2;
    trait F<enum Day> *p4 = (trait F<enum Day>*) p1;
    enum Day c = p1->foo(b);
    if (p3 != p2 || p4 != (trait F<enum Day>*)p1) {
        return 1;
    }
    else if (*p2 != INT_MAX || c != Sunday) {
        return 1;
    }
    return 0;
}
