// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait F<T> {
  int foo(This* this);
};

int int::foo(int *this) {
  return 2;
};

impl trait F<int> for int;

int traitPtrEqualTraitPtr() {
  int a = 1;
  trait F<int>* f = &a;
  trait F<int>* e = &a;
  if (f != e) {
    return 1;
  }
  if (f == e) {
    return 0;
  }
  if ((trait F<int>*)f != (trait F<int>*)e) {
    return 1;
  }
  return 1;
}

int traitPtrNotEqualTraitPtr() {
  int a = 1;
  int b = 1;
  trait F<int>* f = &a;
  trait F<int>* e = &b;
  if (f == e) {
    return 1;
  }
  if (f != e) {
    return 0;
  }
  if ((trait F<int>*)f != (trait F<int>*)e) {
    return 0;
  }
  return 1;
}

int main() {
  if (traitPtrEqualTraitPtr() || traitPtrNotEqualTraitPtr()) {
    return 1;
  }
  return 0;
}

// CHECK:      struct __Trait_F_Vtable_int {
// CHECK-NEXT:   int (*foo)(void *);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_F_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int int_foo(int *this) {
// CHECK-NEXT:   return 2;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_F_Vtable_int __int_trait_F = {.foo = (int (*)(void *))int_foo};
// CHECK-EMPTY:
// CHECK-NEXT: int traitPtrEqualTraitPtr(void) {
// CHECK-NEXT:   int a = 1;
// CHECK-NEXT:   struct __Trait_F_int f = {&a, &__int_trait_F};
// CHECK-NEXT:   struct __Trait_F_int e = {&a, &__int_trait_F};
// CHECK-NEXT:   if (f.data != e.data || f.vtable != e.vtable) {
// CHECK-NEXT:     return 1;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (f.data == e.data && f.vtable == e.vtable) {
// CHECK-NEXT:     return 0;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (f.data != e.data || f.vtable != e.vtable) {
// CHECK-NEXT:     return 1;
// CHECK-NEXT:   }
// CHECK-NEXT:   return 1;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int traitPtrNotEqualTraitPtr(void) {
// CHECK-NEXT:   int a = 1;
// CHECK-NEXT:   int b = 1;
// CHECK-NEXT:   struct __Trait_F_int f = {&a, &__int_trait_F};
// CHECK-NEXT:   struct __Trait_F_int e = {&b, &__int_trait_F};
// CHECK-NEXT:   if (f.data == e.data && f.vtable == e.vtable) {
// CHECK-NEXT:     return 1;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (f.data != e.data || f.vtable != e.vtable) {
// CHECK-NEXT:     return 0;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (f.data != e.data || f.vtable != e.vtable) {
// CHECK-NEXT:     return 0;
// CHECK-NEXT:   }
// CHECK-NEXT:   return 1;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int main() {
// CHECK-NEXT:   if (traitPtrEqualTraitPtr() || traitPtrNotEqualTraitPtr()) {
// CHECK-NEXT:     return 1;
// CHECK-NEXT:   }
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }