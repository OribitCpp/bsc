// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

trait Future<T> {
    T poll(This* this);
};

int int::poll(int* this) {
    return *this;
}

impl trait Future<int> for int;

int main() {
    int m = 0;
    trait Future<int> *f = &m;
    int *g = &m;
    if (f != g) {
        return 1;
    }
    if (f == g) {
        return 0;
    }
    if ((trait Future<int> *)g == (trait Future<int> *)f) {
        return 0;
    }
    if (g == (int *)f) {
        return 0;
    }
    return 1;
}

// CHECK:      struct __Trait_Future_Vtable_int {
// CHECK-NEXT:   int (*poll)(void *);
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_int {
// CHECK-NEXT:   void *data;
// CHECK-NEXT:   struct __Trait_Future_Vtable_int *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int int_poll(int *this) {
// CHECK-NEXT:   return *this;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: struct __Trait_Future_Vtable_int __int_trait_Future = {.poll = (int (*)(void *))int_poll};
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   int m = 0;
// CHECK-NEXT:   struct __Trait_Future_int f = {&m, &__int_trait_Future};
// CHECK-NEXT:   int *g = &m;
// CHECK-NEXT:   if (f.data != g) {
// CHECK-NEXT:     return 1;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (f.data == g) {
// CHECK-NEXT:     return 0;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (g == f.data) {
// CHECK-NEXT:     return 0;
// CHECK-NEXT:   }
// CHECK-NEXT:   if (g == (int *)f.data) {
// CHECK-NEXT:     return 0;
// CHECK-NEXT:   }
// CHECK-NEXT:   return 1;
// CHECK-NEXT: }
