// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdio.h>

struct S{
  int x;
};

trait TR {
  void sayHi(This* this);
};
// CHECK: struct __Trait_TR_Vtable {
// CHECK-NEXT: void (*sayHi)(void *);
// CHECK-NEXT: };

// CHECK: struct __Trait_TR {
// CHECK-NEXT: void *data;
// CHECK-NEXT: struct __Trait_TR_Vtable *vtable;
// CHECK-NEXT: };

void int::sayHi(int* this) {
  printf("int says Hi\n");
}

void struct S::sayHi(struct S* this) {
  printf("struct S says Hi\n");
}

impl trait TR for int;
// CHECK: struct __Trait_TR_Vtable __int_trait_TR = {.sayHi = (void (*)(void *))int_sayHi};
impl trait TR for struct S;
// CHECK: struct __Trait_TR_Vtable __struct_S_trait_TR = {.sayHi = (void (*)(void *))struct_S_sayHi};

void greet(trait TR* t) {
  t->sayHi();
}
// CHECK: void greet(struct __Trait_TR t) {
// CHECK-NEXT: t.vtable->sayHi(t.data);
// CHECK-NEXT: }


int main() {
  int x = 42;
  trait TR* t1 = &x;
  greet(t1);
  struct S s1 = {.x = 42};
  trait TR* t2 = &s1;
  greet(t2);
  return 0;
}
// CHECK: int x = 42;
// CHECK-NEXT: struct __Trait_TR t1 = {&x, &__int_trait_TR};
// CHECK-NEXT: greet(t1);
// CHECK-NEXT: struct S s1 = {.x = 42};
// CHECK-NEXT: struct __Trait_TR t2 = {&s1, &__struct_S_trait_TR};
// CHECK-NEXT: greet(t2);
