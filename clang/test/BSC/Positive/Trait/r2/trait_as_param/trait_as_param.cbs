// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK --check-prefix=CHECK-L
// expected-no-diagnostics

#include <stdio.h>
#include <stdlib.h>

struct S{
  int x;
};

struct Leah{
  int age;
};

trait TR { // define a trait
  void sayHi(This* this); // ThisType
};
// CHECK: struct __Trait_TR_Vtable {
// CHECK-NEXT: void (*sayHi)(void *);
// CHECK-NEXT: };

// CHECK: struct __Trait_TR {
// CHECK-NEXT:  void *data;
// CHECK-NEXT: struct __Trait_TR_Vtable *vtable;
// CHECK-NEXT: };

void int::sayHi(int* this) {
  printf("Hi I'm int\n");
}

void struct S::sayHi(struct S* this) {
  printf("Hi I'm struct S\n");
}

void struct Leah::sayHi(struct Leah* this) {
  printf("Hi I'm Leah\n");
}

impl trait TR for int;
// CHECK: struct __Trait_TR_Vtable __int_trait_TR = {.sayHi = (void (*)(void *))int_sayHi};
impl trait TR for struct S;
// CHECK: struct __Trait_TR_Vtable __struct_S_trait_TR = {.sayHi = (void (*)(void *))struct_S_sayHi};
impl trait TR for struct Leah;
// CHECK: struct __Trait_TR_Vtable __struct_Leah_trait_TR = {.sayHi = (void (*)(void *))struct_Leah_sayHi};

void greet(trait TR* t) {
  t->sayHi();
}
// CHECK-L: #line 53 "{{.*}}.cbs"
// CHECK: void greet(struct __Trait_TR t) {
// CHECK-NEXT: t.vtable->sayHi(t.data);
// CHECK-NEXT: }

// CHECK-L: #line 62 "{{.*}}.cbs"
int main() {
  int x = 42;
  greet(&x);
  struct S* s1 = malloc(sizeof(struct S));
  s1->x = 42;
  greet(s1); // We need to check if "struct S has impled trait TR" or not?
  struct Leah leah = {.age = 1};
  greet(&leah);
  return 0;
}
// CHECK: int x = 42;
// CHECK-NEXT: greet((struct __Trait_TR){.data = &x, .vtable = &__int_trait_TR});
// CHECK-NEXT: struct S *s1 = malloc(sizeof(struct S));
// CHECK-NEXT: s1->x = 42;
// CHECK-NEXT: greet((struct __Trait_TR){.data = s1, .vtable = &__struct_S_trait_TR});
// CHECK-NEXT: struct Leah leah = {.age = 1};
// CHECK-NEXT: greet((struct __Trait_TR){.data = &leah, .vtable = &__struct_Leah_trait_TR});
