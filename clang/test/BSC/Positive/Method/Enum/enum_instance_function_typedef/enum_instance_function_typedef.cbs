// RUN: %clang_cc1 -verify %s
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

enum E {
    X3,
    X4
};

typedef enum E F;
int F::getA(enum E* this) { 
  return X4;
}

int F::getB(F* this) { 
  return X4;
}

int enum E::getC(F* this) { 
  return X4;
}

int main() {
  enum E foo = X3; 
  foo.getA();
  foo.getB();
  foo.getC();

  F f = foo;
  f.getB();
  f.getA();
  f.getC();
  return 0;
}

// CHECK: enum E {
// CHECK-NEXT:     X3,
// CHECK-NEXT:     X4
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: typedef enum E F;
// CHECK-EMPTY:
// CHECK-NEXT: int F_getA(enum E *this) {
// CHECK-NEXT:   return X4;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int F_getB(F *this) {
// CHECK-NEXT:   return X4;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int enum_E_getC(F *this) {
// CHECK-NEXT:   return X4;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   enum E foo = X3;
// CHECK-NEXT:   F_getA(&foo);
// CHECK-NEXT:   F_getB(&foo);
// CHECK-NEXT:   enum_E_getC(&foo);
// CHECK-NEXT:   F f = foo;
// CHECK-NEXT:   F_getB(&f);
// CHECK-NEXT:   F_getA(&f);
// CHECK-NEXT:   enum_E_getC(&f);
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
