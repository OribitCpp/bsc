// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdlib.h>


struct Foo<T> {
  T a;
};

T* owned safe_malloc<T>(T value);
void free_owned<T>(T* owned p);

T* owned safe_malloc<T>(T value) {
  T * p = (T *) malloc( sizeof(T) );
  *p = value;
  return (T* owned)p;
}

void free_owned<T>(T* owned p) {
  free( (void *)p );
}


T struct Foo<T>::getA(This this) {
  return this.a;
}

T struct Foo<T>::getA_2(const This this) {
  return this.a;
}

T struct Foo<T>::getB(This* this) {
  return this->a;
}

T struct Foo<T>::getB_2(const This* this) {
  return this->a;
}

T struct Foo<T>::getC(This* borrow this) {
  return this->a;
}

T struct Foo<T>::getC_2(const This* borrow this) {
  return this->a;
}

void struct Foo<T>::getD(This* owned this) {
  free_owned<struct Foo<T>>(this);
}

void test_This_actual_param() {
  struct Foo<int> foo = {.a = 1};
  const struct Foo<long> foo2 = {.a = 2};
  int a = foo.getA();
  int a2 = foo.getA_2();
  long a3 = foo2.getA_2();
  int b = foo.getB();
  int b2 = foo.getB_2();
  long b3 = foo2.getB_2();
  int c = foo.getC(); 
  int c2 = foo.getC_2();
}

void test_This_pointer_actual_param() {
  struct Foo<int> foo = {.a = 1};
  struct Foo<int> * foo_p = &foo;
  int b = foo_p->getB();
  int b2 = foo_p->getB_2();
  int c = foo_p->getC();
  int c2 = foo_p->getC_2();
}

void test_const_This_pointer_actual_param() {
  struct Foo<long> foo = {.a = 1};
  const struct Foo<long> * c_foo_p = &foo;
  long b2 = c_foo_p->getB_2();
  long c2 = c_foo_p->getC_2();
}

void test_This_pointer_borrow_actual_param(void) {
  struct Foo<int> foo = {.a = 1};
  struct Foo<int> *borrow foo_mut = &mut foo;
  int b = foo_mut->getB();
  int b2 = foo_mut->getB_2();
  int c = foo_mut->getC();
  int c2 = foo_mut->getC_2();
}

void test_const_This_pointer_borrow_actual_param(void) {
  struct Foo<long> foo = {.a = 1};
  const struct Foo<long> *borrow c_foo_mut = &const foo;
  long b2 = c_foo_mut->getB_2();
  long c2 = c_foo_mut->getC_2();
}

void test_This_pointer_owned_actual_param(void) {
  struct Foo<int> foo = {.a = 1};
  struct Foo<int> * owned foo_owned = safe_malloc<struct Foo<int>>(foo);
  int b = foo_owned->getB();
  int b2 = foo_owned->getB_2();
  int c = foo_owned->getC();
  int c2 = foo_owned->getC_2();
  foo_owned->getD();
}

int main() {
  test_This_actual_param();
  test_This_pointer_actual_param();
  test_const_This_pointer_actual_param();
  test_This_pointer_borrow_actual_param();
  test_const_This_pointer_borrow_actual_param();
  test_This_pointer_owned_actual_param();
}


// CHECK: static int struct_Foo_int_getA(struct Foo_int this);

// CHECK: static int struct_Foo_int_getA_2(const struct Foo_int this);

// CHECK: static int struct_Foo_int_getB(struct Foo_int *this);

// CHECK: static int struct_Foo_int_getB_2(const struct Foo_int *this);

// CHECK: static int struct_Foo_int_getC(struct Foo_int * this);

// CHECK: static int struct_Foo_int_getC_2(const struct Foo_int * this);

// CHECK: static void struct_Foo_int_getD(struct Foo_int * this);

// CHECK: static long struct_Foo_long_getA_2(const struct Foo_long this);

// CHECK: static long struct_Foo_long_getB_2(const struct Foo_long *this);

// CHECK: static long struct_Foo_long_getC_2(const struct Foo_long * this);

// CHECK: static struct Foo_int * safe_malloc_struct_Foo_int(struct Foo_int value);

// CHECK: static void free_owned_struct_Foo_int(struct Foo_int * p);

// CHECK: void test_This_actual_param(void) {
// CHECK-NEXT:     struct Foo_int foo = {.a = 1};
// CHECK-NEXT:     const struct Foo_long foo2 = {.a = 2};
// CHECK-NEXT:     int a = struct_Foo_int_getA(foo);
// CHECK-NEXT:     int a2 = struct_Foo_int_getA_2(foo);
// CHECK-NEXT:     long a3 = struct_Foo_long_getA_2(foo2);
// CHECK-NEXT:     int b = struct_Foo_int_getB(&foo);
// CHECK-NEXT:     int b2 = struct_Foo_int_getB_2(&foo);
// CHECK-NEXT:     long b3 = struct_Foo_long_getB_2(&foo2);
// CHECK-NEXT:     int c = struct_Foo_int_getC(&foo);
// CHECK-NEXT:     int c2 = struct_Foo_int_getC_2(&foo);
// CHECK-NEXT: }

// CHECK: void test_This_pointer_actual_param(void) {
// CHECK-NEXT:     struct Foo_int foo = {.a = 1};
// CHECK-NEXT:     struct Foo_int *foo_p = &foo;
// CHECK-NEXT:     int b = struct_Foo_int_getB(foo_p);
// CHECK-NEXT:     int b2 = struct_Foo_int_getB_2(foo_p);
// CHECK-NEXT:     int c = struct_Foo_int_getC(&*foo_p);
// CHECK-NEXT:     int c2 = struct_Foo_int_getC_2(&*foo_p);
// CHECK-NEXT: }

// CHECK: void test_const_This_pointer_actual_param(void) {
// CHECK-NEXT:     struct Foo_long foo = {.a = 1};
// CHECK-NEXT:     const struct Foo_long *c_foo_p = &foo;
// CHECK-NEXT:     long b2 = struct_Foo_long_getB_2(c_foo_p);
// CHECK-NEXT:     long c2 = struct_Foo_long_getC_2(&*c_foo_p);
// CHECK-NEXT: }

// CHECK: void test_This_pointer_borrow_actual_param(void) {
// CHECK-NEXT:     struct Foo_int foo = {.a = 1};
// CHECK-NEXT:     struct Foo_int * foo_mut = &foo;
// CHECK-NEXT:     int b = struct_Foo_int_getB(foo_mut);
// CHECK-NEXT:     int b2 = struct_Foo_int_getB_2(foo_mut);
// CHECK-NEXT:     int c = struct_Foo_int_getC(foo_mut);
// CHECK-NEXT:     int c2 = struct_Foo_int_getC_2(foo_mut);
// CHECK-NEXT: }

// CHECK: void test_const_This_pointer_borrow_actual_param(void) {
// CHECK-NEXT:     struct Foo_long foo = {.a = 1};
// CHECK-NEXT:     const struct Foo_long * c_foo_mut = &foo;
// CHECK-NEXT:     long b2 = struct_Foo_long_getB_2(c_foo_mut);
// CHECK-NEXT:     long c2 = struct_Foo_long_getC_2(c_foo_mut);
// CHECK-NEXT: }

// CHECK: void test_This_pointer_owned_actual_param(void) {
// CHECK-NEXT:     struct Foo_int foo = {.a = 1};
// CHECK-NEXT:     struct Foo_int * foo_owned = safe_malloc_struct_Foo_int(foo);
// CHECK-NEXT:     int b = struct_Foo_int_getB(&*foo_owned);
// CHECK-NEXT:     int b2 = struct_Foo_int_getB_2(&*foo_owned);
// CHECK-NEXT:     int c = struct_Foo_int_getC(&*foo_owned);
// CHECK-NEXT:     int c2 = struct_Foo_int_getC_2(&*foo_owned);
// CHECK-NEXT:     struct_Foo_int_getD(foo_owned);
// CHECK-NEXT: }

// CHECK: static int struct_Foo_int_getA(struct Foo_int this) {
// CHECK-NEXT:     return this.a;
// CHECK-NEXT: }

// CHECK: static int struct_Foo_int_getA_2(const struct Foo_int this) {
// CHECK-NEXT:     return this.a;
// CHECK-NEXT: }

// CHECK: static int struct_Foo_int_getB(struct Foo_int *this) {
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: static int struct_Foo_int_getB_2(const struct Foo_int *this) {
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: static int struct_Foo_int_getC(struct Foo_int * this) {
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: static int struct_Foo_int_getC_2(const struct Foo_int * this) {
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: static void struct_Foo_int_getD(struct Foo_int * this) {
// CHECK-NEXT:     free_owned_struct_Foo_int(this);
// CHECK-NEXT: }

// CHECK: static long struct_Foo_long_getA_2(const struct Foo_long this) {
// CHECK-NEXT:     return this.a;
// CHECK-NEXT: }

// CHECK: static long struct_Foo_long_getB_2(const struct Foo_long *this) {
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: static long struct_Foo_long_getC_2(const struct Foo_long * this) {
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: static struct Foo_int * safe_malloc_struct_Foo_int(struct Foo_int value) {
// CHECK-NEXT:     struct Foo_int *p = (struct Foo_int *)malloc(sizeof(struct Foo_int));
// CHECK-NEXT:     *p = value;
// CHECK-NEXT:     return (struct Foo_int *)p;
// CHECK-NEXT: }

// CHECK: static void free_owned_struct_Foo_int(struct Foo_int * p) {
// CHECK-NEXT:     free((void *)p);
// CHECK-NEXT: }