// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// expected-no-diagnostics

#include <stdlib.h>
#include <stdio.h>

owned struct Bar {
public:
  int a;
};

T* owned safe_malloc<T>(T value);
void free_owned<T>(T* owned p);

T* owned safe_malloc<T>(T value) {
  T * p = (T *) malloc( sizeof(T) );
  *p = value;
  return (T* owned)p;
}

void free_owned<T>(T* owned p) {
  free( (void *)p );
}

int Bar::getB(This* this) {
  this->a = 3;
  printf("this->a in getB: %d\n", this->a);
  return this->a;
}

int Bar::getB_2(const This* this) {
  printf("this->a in getB_2: %d\n", this->a);
  return this->a;
}

safe int Bar::getC(This* borrow this) {
  this->a = 2;
  unsafe {
    printf("this->a in getC: %d\n", this->a);
  }
  return this->a;
}

safe int Bar::getC_2(const This* borrow this) {
  unsafe {
    printf("this->a in getC_2: %d\n", this->a);
  }
  return this->a;
}

safe void Bar::getD(This* owned this) {
  free_owned<Bar>(this);
}

void test_non_pointer_This_call_reborrow() {
  printf("test_non_pointer_This_call_reborrow:\n");
  Bar foo = {.a = 1};
  int b = foo.getB();
  int b_2 = foo.getB_2();
  safe {
    int c = foo.getC();
    int c_2 = foo.getC_2();
  }
  printf("this->a in test: %d\n", foo.a);
}

void test_raw_pointer_call_reborrow() {
  printf("test_raw_pointer_call_reborrow:\n");
  Bar foo = {.a = 1};
  Bar * foo_p = &foo;
  int b = foo_p->getB();
  int b_2 = foo_p->getB_2();
  int c = foo_p->getC();
  int c_2 = foo_p->getC_2();
  printf("this->a in test: %d\n", foo.a);
}

void test_const_raw_pointer_call_reborrow() {
  printf("test_const_raw_pointer_call_reborrow:\n");
  Bar foo = {.a = 1};
  const Bar* c_foo_p = &foo;
  int b_2 = c_foo_p->getB_2();
  int c_2 = c_foo_p->getC_2();
  printf("this->a in test: %d\n", foo.a);
}

void test_owned_pointer_call_reborrow() {
  printf("test_owned_pointer_call_reborrow:\n");
  Bar foo = {.a = 1};
  Bar * owned foo_owned = safe_malloc<Bar>(foo);
  int b = foo_owned->getB();
  int b_2 = foo_owned->getB_2();
  safe {
    int c = foo_owned->getC();
    int c_2 = foo_owned->getC_2();
    foo_owned->getD();
  }
}

int main() {
  test_non_pointer_This_call_reborrow();
  test_raw_pointer_call_reborrow();
  test_const_raw_pointer_call_reborrow();
  test_owned_pointer_call_reborrow();
  return 0;
}


// CHECK: int struct_Bar_getB( struct Bar *this) {
// CHECK-NEXT:     this->a = 3;
// CHECK-NEXT:     printf("this->a in getB: %d\n", this->a);
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: int struct_Bar_getB_2(const struct Bar *this) {
// CHECK-NEXT:     printf("this->a in getB_2: %d\n", this->a);
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: int struct_Bar_getC( struct Bar * this) {
// CHECK-NEXT:     this->a = 2;
// CHECK-NEXT:     {
// CHECK-NEXT:         printf("this->a in getC: %d\n", this->a);
// CHECK-NEXT:     }
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: int struct_Bar_getC_2(const struct Bar * this) {
// CHECK-NEXT:     {
// CHECK-NEXT:         printf("this->a in getC_2: %d\n", this->a);
// CHECK-NEXT:     }
// CHECK-NEXT:     return this->a;
// CHECK-NEXT: }

// CHECK: void struct_Bar_getD( struct Bar * this) {
// CHECK-NEXT:     free_owned_struct_Bar(this);
// CHECK-NEXT: }

// CHECK: void test_non_pointer_This_call_reborrow(void) {
// CHECK-NEXT:     printf("test_non_pointer_This_call_reborrow:\n");
// CHECK-NEXT:      struct Bar foo = {.a = 1};
// CHECK-NEXT:     _Bool foo_is_moved = 0;
// CHECK-NEXT:     int b = struct_Bar_getB(&foo);
// CHECK-NEXT:     int b_2 = struct_Bar_getB_2(&foo);
// CHECK-NEXT:     {
// CHECK-NEXT:         int c = struct_Bar_getC(&foo);
// CHECK-NEXT:         int c_2 = struct_Bar_getC_2(&foo);
// CHECK-NEXT:     }
// CHECK-NEXT:     printf("this->a in test: %d\n", foo.a);
// CHECK-NEXT:     if (!foo_is_moved)
// CHECK-NEXT:         struct_Bar_D(foo);
// CHECK-NEXT: }

// CHECK: void test_raw_pointer_call_reborrow(void) {
// CHECK-NEXT:     printf("test_raw_pointer_call_reborrow:\n");
// CHECK-NEXT:      struct Bar foo = {.a = 1};
// CHECK-NEXT:     _Bool foo_is_moved = 0;
// CHECK-NEXT:      struct Bar *foo_p = &foo;
// CHECK-NEXT:     int b = struct_Bar_getB(foo_p);
// CHECK-NEXT:     int b_2 = struct_Bar_getB_2(foo_p);
// CHECK-NEXT:     int c = struct_Bar_getC(&*foo_p);
// CHECK-NEXT:     int c_2 = struct_Bar_getC_2(&*foo_p);
// CHECK-NEXT:     printf("this->a in test: %d\n", foo.a);
// CHECK-NEXT:     if (!foo_is_moved)
// CHECK-NEXT:         struct_Bar_D(foo);
// CHECK-NEXT: }

// CHECK: void test_const_raw_pointer_call_reborrow(void) {
// CHECK-NEXT:     printf("test_const_raw_pointer_call_reborrow:\n");
// CHECK-NEXT:      struct Bar foo = {.a = 1};
// CHECK-NEXT:     _Bool foo_is_moved = 0;
// CHECK-NEXT:     const struct Bar *c_foo_p = &foo;
// CHECK-NEXT:     int b_2 = struct_Bar_getB_2(c_foo_p);
// CHECK-NEXT:     int c_2 = struct_Bar_getC_2(&*c_foo_p);
// CHECK-NEXT:     printf("this->a in test: %d\n", foo.a);
// CHECK-NEXT:     if (!foo_is_moved)
// CHECK-NEXT:         struct_Bar_D(foo);
// CHECK-NEXT: }

// CHECK: void test_owned_pointer_call_reborrow(void) {
// CHECK-NEXT:     printf("test_owned_pointer_call_reborrow:\n");
// CHECK-NEXT:      struct Bar foo = {.a = 1};
// CHECK-NEXT:     _Bool foo_is_moved = 0;
// CHECK-NEXT:      struct Bar * foo_owned = safe_malloc_struct_Bar(foo);
// CHECK-NEXT:     foo_is_moved = 1;
// CHECK-NEXT:     int b = struct_Bar_getB(&*foo_owned);
// CHECK-NEXT:     int b_2 = struct_Bar_getB_2(&*foo_owned);
// CHECK-NEXT:     {
// CHECK-NEXT:         int c = struct_Bar_getC(&*foo_owned);
// CHECK-NEXT:         int c_2 = struct_Bar_getC_2(&*foo_owned);
// CHECK-NEXT:         struct_Bar_getD(foo_owned);
// CHECK-NEXT:     }
// CHECK-NEXT:     if (!foo_is_moved)
// CHECK-NEXT:         struct_Bar_D(foo);
// CHECK-NEXT: }