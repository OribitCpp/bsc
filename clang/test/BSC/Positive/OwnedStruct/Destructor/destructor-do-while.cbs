// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK-L

int y = 0;
owned struct A {  
 public:
     int x;
     ~A(A this) {
        y++;
    }
  };
int test_do_while() {
   int n  = 1 ;
   do {
     A aaa = {};
     if (n == 6) {
       break;
     }
     n++;
   } while (n < 7);
   return 0;
}
// CHECK-L: #line 17 "{{.*}}.cbs"
// CHECK-L-NEXT: int test_do_while(void) {
// CHECK-L-NEXT:   int n = 1;
// CHECK-L-NEXT:   do {
// CHECK-L-NEXT:     struct A aaa = {};
// CHECK-L-NEXT:     _Bool aaa_is_moved = 0;
// CHECK-L-NEXT:     if (n == 6) {
// CHECK-L-NEXT:       if (!aaa_is_moved)
// CHECK-L-NEXT:         struct_A_D(aaa);
// CHECK-L-NEXT:       break;
// CHECK-L-NEXT:     }
// CHECK-L-NEXT:     n++;
// CHECK-L-NEXT:     if (!aaa_is_moved)
// CHECK-L-NEXT:       struct_A_D(aaa);
// CHECK-L-NEXT:   } while (n < 7);
// CHECK-L-NEXT:   return 0;
// CHECK-L-NEXT: }

// CHECK-L: #line 13 "{{.*}}.cbs"
// CHECK-L-NEXT: static void struct_A_D( struct A this) {
// CHECK-L-NEXT:  _Bool this_is_moved = 0;
// CHECK-L-NEXT:  y++;
// CHECK-L-NEXT: }

int main() {
  test_do_while();
  return y-6;
}