// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output

owned struct A<T> {};

owned struct B<T> {
    public:
        A<T> a;
};

owned struct C {
    public:
        B<int> b;
};

void C::test() {}

int main() {
    C::test();
    return 0;
}

// CHECK: struct A_int {
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct B_int {
// CHECK-NEXT:      struct A_int a;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct C {
// CHECK-NEXT:      struct B_int b;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_A_int_D( struct A_int this);
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_B_int_D( struct B_int this);
// CHECK-EMPTY:
// CHECK-NEXT: void struct_C_D( struct C this);
// CHECK-EMPTY:
// CHECK-NEXT: void struct_C_test(void) {
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:     struct_C_test();
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_A_int_D( struct A_int this) {
// CHECK-NEXT:     _Bool this_is_moved = 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static void struct_B_int_D( struct B_int this) {
// CHECK-NEXT:     _Bool this_is_moved = 0;
// CHECK-NEXT:     struct_A_int_D(this.a);
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: void struct_C_D( struct C this) {
// CHECK-NEXT:     struct_B_int_D(this.b);
// CHECK-NEXT: }