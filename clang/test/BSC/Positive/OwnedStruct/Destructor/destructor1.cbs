// RUN: %clang %s -o %test.output
// RUN: %test.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -rewrite-bsc -line %s -o %t-rwline.c
// RUN: FileCheck --input-file=%t-rwline.c %s --check-prefix=CHECK-L

int x = 0;
owned struct A {
  ~A(A this) {
    x++;
  }
};


owned struct B {
};

owned struct C {
public:
    A a;
};

owned struct D {
public:
    A a;
    ~D(D this) {
    }
};


owned struct E {
public:
    A *a;
};

int foo() {
  A a = {};
  E e= {&a};
  C c = {a};
  return x;
}
// CHECK-L: #line 38 "{{.*}}.cbs"
// CHECK-L-NEXT: int foo(void) {
// CHECK-L-NEXT:   struct A a = {};
// CHECK-L-NEXT:   _Bool a_is_moved = 0;
// CHECK-L-NEXT:   struct E e = {&a};
// CHECK-L-NEXT:   _Bool e_is_moved = 0;
// CHECK-L-NEXT:   struct C c = {a};
// CHECK-L-NEXT:   _Bool c_is_moved = 0;
// CHECK-L-NEXT:   a_is_moved = 1;
// CHECK-L-NEXT:   if (!c_is_moved)
// CHECK-L-NEXT:       struct_C_D(c);
// CHECK-L-NEXT:   if (!e_is_moved)
// CHECK-L-NEXT:       struct_E_D(e);
// CHECK-L-NEXT:   if (!a_is_moved)
// CHECK-L-NEXT:       struct_A_D(a);
// CHECK-L-NEXT:   return x;
// CHECK-L-NEXT: }

// CHECK-L: #line 11 "{{.*}}.cbs"
// CHECK-L-NEXT: static void struct_A_D( struct A this) {
// CHECK-L-NEXT:   _Bool this_is_moved = 0;
// CHECK-L-NEXT:   x++;
// CHECK-L-NEXT: }

// CHECK-L: #line 18 "{{.*}}.cbs"
// CHECK-L-NEXT: void struct_B_D( struct B this) {
// CHECK-L-NEXT: }

// CHECK-L: #line 23 "{{.*}}.cbs"
// CHECK-L-NEXT: void struct_C_D( struct C this) {
// CHECK-L-NEXT:   struct_A_D(this.a);
// CHECK-L-NEXT: }

// CHECK-L: #line 28 "{{.*}}.cbs"
// CHECK-L-NEXT: void struct_D_D( struct D this) {
// CHECK-L-NEXT:   _Bool this_is_moved = 0;
// CHECK-L-NEXT:   struct_A_D(this.a);
// CHECK-L-NEXT: }

// CHECK-L: #line 36 "{{.*}}.cbs"
// CHECK-L-NEXT: void struct_E_D( struct E this) {
// CHECK-L-NEXT: }

int main() {
  return foo()-1;
}

