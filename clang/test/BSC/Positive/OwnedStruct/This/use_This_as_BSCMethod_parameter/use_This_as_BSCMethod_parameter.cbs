// RUN: %clang %s -o %t.output
// RUN: %t.output
// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output

#include <stdio.h>
typedef owned struct S {
    public:
        int a;
}S1;

void S1::f(This* this, int b) {
    this->a = this->a + b;
}

void S::dump(This* this) {
    printf("%d\n", this->a);
}

void S::dump2(This this) {
    printf("%d\n", this.a);
}

void int::f(This* this, int b) {
    *this = *this + b;
}
void int::dump(This* this) {
    printf("%d\n", *this);
}

void int::dump2(This this) {
    printf("%d\n", this);
}

owned struct G<T> {
    public:
        T d;
};

void G<T>::f(This* this, int b) {
    this->d = this->d + b;
}
void G<T>::dump(This* this) {
    printf("%d\n", this->d);
}

void G<T>::dump2(This this) {
    printf("%d\n", this.d);
}
int main() {
    S s = {.a = 5};
    s.f(4);  
    s.dump();   // print 9
    s.dump2();  // print 9
 
    int c = 10;
    c.f(4);  
    c.dump();   // print 14
    c.dump2();  // print 14
 
    G<int> g = {.d = 15};
    g.f(4);  
    g.dump();   // print 19
    g.dump2();  /// print 19
    
    return 0;
}
