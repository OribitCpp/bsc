// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -S -emit-llvm -o - %s | FileCheck %s --check-prefix=CHECK_MANGLE

struct R {
    int * borrow p1;
    const int * borrow p2;
};

// CHECK_MANGLE: define {{.*}} @int_foo
void int::foo(This * borrow this) {}

typedef int * borrow myInt;
typedef int* borrow (*PF2)(struct R);

void test1() {
    int x1 = 0;
    int x = 0;
    float y = 1.0;
    const int * borrow p2 = &const x;
    const int * borrow p4= (const int * borrow)&x;
    int * borrow p7 = &mut *(&x);
    int * borrow p = &mut x;
    float * borrow p1 = &mut y;
    myInt p3 = p;

    int * owned p5 = (int * owned)&x1;
    const int * borrow b6 = &const *p3;
    p7 = &mut *p;
    int * p8 = (int *)p5;
}

void test2() {
    int x = 0;
    int y = 1;
    struct R r1 = { &mut x, &const y };
    struct R r2 = { .p1 = &mut x, .p2 = &const y };    
}

int main() {
    return 0;
}

// CHECK:      typedef int * myInt;
// CHECK-EMPTY:
// CHECK-NEXT: typedef int * (*PF2)(struct R);
// CHECK-EMPTY:
// CHECK-NEXT: struct R {
// CHECK-NEXT:     int * p1;
// CHECK-NEXT:     const int * p2;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: void int_foo(int * this) {
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: void test1(void) {
// CHECK-NEXT:     int x1 = 0;
// CHECK-NEXT:     int x = 0;
// CHECK-NEXT:     float y = 1.;
// CHECK-NEXT:     const int * p2 = &x;
// CHECK-NEXT:     const int * p4 = (const int *)&x;
// CHECK-NEXT:     int * p7 = &*(&x);
// CHECK-NEXT:     int * p = &x;
// CHECK-NEXT:     float * p1 = &y;
// CHECK-NEXT:     myInt p3 = p;
// CHECK-NEXT:     int * p5 = (int *)&x1;
// CHECK-NEXT:     const int * b6 = &*p3;
// CHECK-NEXT:     p7 = &*p;
// CHECK-NEXT:     int *p8 = (int *)p5;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: void test2(void) {
// CHECK-NEXT:     int x = 0;
// CHECK-NEXT:     int y = 1;
// CHECK-NEXT:     struct R r1 = {&x, &y};
// CHECK-NEXT:     struct R r2 = {.p1 = &x, .p2 = &y};
// CHECK-NEXT: }
