// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output

struct A<T> {
  T t;
};

struct B<T> {
  T t;
};

struct C<T> {
  T t;
};

struct D { 
  B<A<C<struct D *>>> b;
};

int main() {
  C<struct D *> c = { 0 };
  A<C<struct D *>> a = { c };
  B<A<C<struct D *>>> b = { a };
  struct D d = {b};
  return 0;
}

// CHECK:      struct C_struct_D_P {
// CHECK-NEXT:   struct D *t;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct A_struct_C_struct_D_P {
// CHECK-NEXT:   struct C_struct_D_P t;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct B_struct_A_struct_C_struct_D_P {
// CHECK-NEXT:   struct A_struct_C_struct_D_P t;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: struct D {
// CHECK-NEXT:   struct B_struct_A_struct_C_struct_D_P b;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct C_struct_D_P c = {0};
// CHECK-NEXT:   struct A_struct_C_struct_D_P a = {c};
// CHECK-NEXT:   struct B_struct_A_struct_C_struct_D_P b = {a};
// CHECK-NEXT:   struct D d = {b};
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }