// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output

struct B {};

struct Foo<T> {
    T a;
};

struct Goo<T1, T2> {
    T1 a;
    T2 b;
};

int struct B::increase(struct B* this) {
  return 0;
}

struct Foo<struct B> max<T1>(T1 a, struct Foo<struct B> foo) {
  struct B x;
  struct B::increase(&x);
  int b = x.increase();
  return foo;
}

struct Goo<struct B, struct B> poo(struct Goo<struct B, struct B> goo) {
  return goo;
}

int main() {
  struct B a1;
  struct B b1;
  b1.increase();
  struct B::increase(&b1);
  struct Foo<struct B> foo;
  foo = max<struct B>(a1, foo);
  struct Goo<struct B, struct B> p;
  p = poo(p);
  return 0;
}

// CHECK: struct B {};
// CHECK-EMPTY:
// CHECK-NEXT: struct Goo_struct_B_struct_B {
// CHECK-NEXT:       struct B a;
// CHECK-NEXT:       struct B b;
// CHECK-NEXT:   };
// CHECK-EMPTY:
// CHECK-NEXT: struct Foo_struct_B {
// CHECK-NEXT:       struct B a;
// CHECK-NEXT:   };
// CHECK-EMPTY:
// CHECK-NEXT: static struct Foo_struct_B max_struct_B(struct B a, struct Foo_struct_B foo);
// CHECK-EMPTY:
// CHECK-NEXT: int struct_B_increase(struct B *this) {
// CHECK-NEXT:       return 0;
// CHECK-NEXT:   }
// CHECK-EMPTY:
// CHECK-NEXT: struct Goo_struct_B_struct_B poo(struct Goo_struct_B_struct_B goo) {
// CHECK-NEXT:       return goo;
// CHECK-NEXT:   }
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:       struct B a1;
// CHECK-NEXT:       struct B b1;
// CHECK-NEXT:       struct_B_increase(&b1);
// CHECK-NEXT:       struct_B_increase(&b1);
// CHECK-NEXT:       struct Foo_struct_B foo;
// CHECK-NEXT:       foo = max_struct_B(a1, foo);
// CHECK-NEXT:       struct Goo_struct_B_struct_B p;
// CHECK-NEXT:       p = poo(p);
// CHECK-NEXT:       return 0;
// CHECK-NEXT:   }
// CHECK-EMPTY:
// CHECK-NEXT: static struct Foo_struct_B max_struct_B(struct B a, struct Foo_struct_B foo) {
// CHECK-NEXT:       struct B x;
// CHECK-NEXT:       struct_B_increase(&x);
// CHECK-NEXT:       int b = struct_B_increase(&x);
// CHECK-NEXT:       return foo;
// CHECK-NEXT:   }