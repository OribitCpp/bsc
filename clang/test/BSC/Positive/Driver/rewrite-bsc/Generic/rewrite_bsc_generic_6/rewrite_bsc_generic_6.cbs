// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -o %t-rw.output
// RUN: %t-rw.output

struct B {};

int struct B::increase(struct B* this) {
  return 0;
}

struct Foo<T> {
    T a;
};

struct Foo<int> max<T1>(T1 a) {
  struct Foo<int> f;
  struct B x;
  struct B::increase(&x);
  int b = x.increase();
  return f;
}

int main() {
  struct B a1;
  struct B b1;
  b1.increase();
  struct B::increase(&b1);
  struct Foo<int> c1 = max<struct B>(a1);
  return 0;
}

// CHECK:      struct B {};
// CHECK-EMPTY:
// CHECK-NEXT: struct Foo_int {
// CHECK-NEXT:   int a;
// CHECK-NEXT: };
// CHECK-EMPTY:
// CHECK-NEXT: static struct Foo_int max_struct_B(struct B a);
// CHECK-EMPTY:
// CHECK-NEXT: int struct_B_increase(struct B *this) {
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }  
// CHECK-EMPTY:
// CHECK-NEXT: int main(void) {
// CHECK-NEXT:   struct B a1;
// CHECK-NEXT:   struct B b1;
// CHECK-NEXT:   struct_B_increase(&b1);
// CHECK-NEXT:   struct_B_increase(&b1);
// CHECK-NEXT:   struct Foo_int c1 = max_struct_B(a1);
// CHECK-NEXT:   return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: static struct Foo_int max_struct_B(struct B a) {
// CHECK-NEXT:   struct Foo_int f;
// CHECK-NEXT:   struct B x;
// CHECK-NEXT:   struct_B_increase(&x);
// CHECK-NEXT:   int b = struct_B_increase(&x);
// CHECK-NEXT:   return f;
// CHECK-NEXT: }