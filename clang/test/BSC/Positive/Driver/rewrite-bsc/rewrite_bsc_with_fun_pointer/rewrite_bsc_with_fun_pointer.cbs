// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// RUN: %clang %t-rw.c -I %S -o %t-rw.output
// RUN: %t-rw.output
// RUN: %clang -S -emit-llvm -o - %s | FileCheck %s --check-prefix=CHECK_MANGLE

// CHECK_MANGLE: define {{.*}} @safe_swap_int_LPPRPLPintCOMMA_intRP
safe void safe_swap<T>(T* borrow l, T* borrow r) {
}

int add(int a, int b) {
    return a + b;
}

int sub(int a, int b) {
    return a - b;
}

// CHECK: static void safe_swap_int_LPPRPLPintCOMMA_intRP(int (** l)(int, int), int (** r)(int, int));
// CHECK-EMPTY:
// CHECK-NEXT: int add(int a, int b) {
// CHECK-NEXT:     return a + b;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT: int sub(int a, int b) {
// CHECK-NEXT:     return a - b;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT:  int main(void) {
// CHECK-NEXT:     int (*pAdd)(int, int);
// CHECK-NEXT:     int (*pSub)(int, int);
// CHECK-NEXT:     pAdd = &add;
// CHECK-NEXT:     pSub = &sub;
// CHECK-NEXT:     safe_swap_int_LPPRPLPintCOMMA_intRP(&pAdd, &pSub);
// CHECK-NEXT:     return 0;
// CHECK-NEXT: }
// CHECK-EMPTY:
// CHECK-NEXT:  static void safe_swap_int_LPPRPLPintCOMMA_intRP(int (** l)(int, int), int (** r)(int, int)) {
// CHECK-NEXT: }

int main() {
    int (*pAdd)(int, int);
    int (*pSub)(int, int);
    pAdd = &add;
    pSub = &sub;
    safe_swap(&mut pAdd, &mut pSub);
    return 0;
}
