// RUN: %clang -Eno-repeated-borrow -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// expected-no-diagnostics

void use_mut(int *borrow p);
void use_immut(const int *borrow p);
void test1() {
  int local = 42;
  int *borrow p = &mut local;
  int *borrow q = &mut local; // cannot borrow `local` as mutable more than once at a time
  use_mut(p);
  use_mut(q);
}

void test2() {
  int local = 42;
  int *borrow p = &mut local;
  const int *borrow q = &const local; // cannot borrow `local` as immutable because it is also borrowed as mutable
  use_mut(p);
  use_immut(q);
}

void test3(int *borrow p) {
  int local = 5;
  p = &mut local;
  const int *borrow p1 = &const *p;
  use_mut(p);          // cannot borrow `*p` as mutable because it is also borrowed as immutable
  use_immut(p1);
}

// CHECK:      void use_mut(int * p);
// CHECK-EMPTY: 
// CHECK:      void use_immut(const int * p);
// CHECK-EMPTY: 
// CHECK:      void test1(void) {
// CHECK-NEXT:     int local = 42;
// CHECK-NEXT:     int * p = &local;
// CHECK-NEXT:     int * q = &local;
// CHECK-NEXT:     use_mut(p);
// CHECK-NEXT:     use_mut(q);
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      void test2(void) {
// CHECK-NEXT:     int local = 42;
// CHECK-NEXT:     int * p = &local;
// CHECK-NEXT:     const int * q = &local;
// CHECK-NEXT:     use_mut(p);
// CHECK-NEXT:     use_immut(q);
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      void test3(int * p) {
// CHECK-NEXT:     int local = 5;
// CHECK-NEXT:     p = &local;
// CHECK-NEXT:     const int * p1 = &*p;
// CHECK-NEXT:     use_mut(p);
// CHECK-NEXT:     use_immut(p1);
// CHECK-NEXT: }
