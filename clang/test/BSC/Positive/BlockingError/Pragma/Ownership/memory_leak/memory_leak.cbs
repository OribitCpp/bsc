// RUN: %clang -rewrite-bsc %s -o %t-rw.c
// RUN: FileCheck --input-file=%t-rw.c %s
// expected-no-diagnostics

typedef int* owned myInt;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Echeck-memory-leak"
void test1() {
    int x = 10;
    int* p = &x;
    myInt p1 = (myInt)p;
} // memory leak of value: `p1`
#pragma GCC diagnostic pop

owned struct S { 
public:
  int a;
};

trait T { 
};

impl trait T for S;
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Echeck-memory-leak"
void test2(S* owned sp) {
  trait T* owned t = sp;
} // field memory leak of value: `t`, t.data is leak
#pragma GCC diagnostic pop

// CHECK:      struct S;
// CHECK-NEXT: struct __Trait_T_Vtable;
// CHECK-NEXT: struct __Trait_T;
// CHECK-NEXT: struct __Trait_T_Owned;
// CHECK-NEXT: struct __Trait_T_Borrow;
// CHECK-NEXT: typedef int * myInt;
// CHECK-EMPTY: 
// CHECK:      struct S {
// CHECK-NEXT:     int a;
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      struct __Trait_T_Vtable {
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      struct __Trait_T {
// CHECK-NEXT:     void *data;
// CHECK-NEXT:     struct __Trait_T_Vtable *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      struct __Trait_T_Owned {
// CHECK-NEXT:     void * data;
// CHECK-NEXT:     struct __Trait_T_Vtable *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      struct __Trait_T_Borrow {
// CHECK-NEXT:     void * data;
// CHECK-NEXT:     struct __Trait_T_Vtable *vtable;
// CHECK-NEXT: };
// CHECK-EMPTY: 
// CHECK:      void struct_S_D( struct S this);
// CHECK-EMPTY: 
// CHECK:      void test1(void) {
// CHECK-NEXT:     int x = 10;
// CHECK-NEXT:     int *p = &x;
// CHECK-NEXT:     myInt p1 = (myInt)p;
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      struct __Trait_T_Vtable __owned_struct_S_trait_T = {};
// CHECK-EMPTY: 
// CHECK:      void test2( struct S * sp) {
// CHECK-NEXT:     struct __Trait_T_Owned t = {sp, &__owned_struct_S_trait_T};
// CHECK-NEXT: }
// CHECK-EMPTY: 
// CHECK:      void struct_S_D( struct S this) {
// CHECK-NEXT: }
